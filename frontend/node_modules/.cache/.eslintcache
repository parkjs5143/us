[{"C:\\project\\us\\frontend\\src\\index.js":"1","C:\\project\\us\\frontend\\src\\app.jsx":"2","C:\\project\\us\\frontend\\src\\admin\\memberPage.jsx":"3","C:\\project\\us\\frontend\\src\\admin\\questionPage.jsx":"4","C:\\project\\us\\frontend\\src\\admin\\chatPage.jsx":"5","C:\\project\\us\\frontend\\src\\admin\\postDetailPage.jsx":"6","C:\\project\\us\\frontend\\src\\admin\\memberDetailPage.jsx":"7","C:\\project\\us\\frontend\\src\\admin\\memberPostPage.jsx":"8","C:\\project\\us\\frontend\\src\\admin\\questionDetailPage.jsx":"9","C:\\project\\us\\frontend\\src\\admin\\chatDetailPage.jsx":"10","C:\\project\\us\\frontend\\src\\admin\\memberChatPage.jsx":"11","C:\\project\\us\\frontend\\src\\user\\main.jsx":"12","C:\\project\\us\\frontend\\src\\admin\\postPage.jsx":"13","C:\\project\\us\\frontend\\src\\user\\FinishIdPage.jsx":"14","C:\\project\\us\\frontend\\src\\user\\SignInPage.jsx":"15","C:\\project\\us\\frontend\\src\\user\\mainMapPage.jsx":"16","C:\\project\\us\\frontend\\src\\user\\FinishPwPage.jsx":"17","C:\\project\\us\\frontend\\src\\user\\RegistPage.jsx":"18","C:\\project\\us\\frontend\\src\\user\\FindIdPage.jsx":"19","C:\\project\\us\\frontend\\src\\user\\mypage.jsx":"20","C:\\project\\us\\frontend\\src\\user\\mypageLogin.jsx":"21","C:\\project\\us\\frontend\\src\\user\\FindPwPage.jsx":"22","C:\\project\\us\\frontend\\src\\user\\mypagePw.jsx":"23","C:\\project\\us\\frontend\\src\\user\\mypageQnA.jsx":"24","C:\\project\\us\\frontend\\src\\admin\\mainPage.jsx":"25","C:\\project\\us\\frontend\\src\\admin\\loginPage.jsx":"26","C:\\project\\us\\frontend\\src\\user\\mainTalkPage.jsx":"27","C:\\project\\us\\frontend\\src\\AdminComponents\\header.jsx":"28","C:\\project\\us\\frontend\\src\\AdminComponents\\sidebar.jsx":"29","C:\\project\\us\\frontend\\src\\UserComponents\\header.jsx":"30","C:\\project\\us\\frontend\\src\\UserComponents\\loginMap.jsx":"31","C:\\project\\us\\frontend\\src\\UserComponents\\mainProfile.jsx":"32","C:\\project\\us\\frontend\\src\\UserComponents\\mainMap.jsx":"33","C:\\project\\us\\frontend\\src\\UserComponents\\talkList.jsx":"34","C:\\project\\us\\frontend\\src\\UserComponents\\talk.jsx":"35","C:\\project\\us\\frontend\\src\\user\\detailPage.jsx":"36","C:\\project\\us\\frontend\\src\\UserComponents\\replyLike.jsx":"37"},{"size":318,"mtime":1637331746000,"results":"38","hashOfConfig":"39"},{"size":3295,"mtime":1640154354631,"results":"40","hashOfConfig":"39"},{"size":9116,"mtime":1638258346000,"results":"41","hashOfConfig":"39"},{"size":11286,"mtime":1638258398000,"results":"42","hashOfConfig":"39"},{"size":9748,"mtime":1638258310000,"results":"43","hashOfConfig":"39"},{"size":6437,"mtime":1640169584994,"results":"44","hashOfConfig":"39"},{"size":3334,"mtime":1639996213217,"results":"45","hashOfConfig":"39"},{"size":15842,"mtime":1638777468000,"results":"46","hashOfConfig":"39"},{"size":6133,"mtime":1638258374000,"results":"47","hashOfConfig":"39"},{"size":10891,"mtime":1638258302000,"results":"48","hashOfConfig":"39"},{"size":14089,"mtime":1638258334000,"results":"49","hashOfConfig":"39"},{"size":2997,"mtime":1640170926337,"results":"50","hashOfConfig":"39"},{"size":9261,"mtime":1638258366000,"results":"51","hashOfConfig":"39"},{"size":2538,"mtime":1638768350000,"results":"52","hashOfConfig":"39"},{"size":8251,"mtime":1639122052330,"results":"53","hashOfConfig":"39"},{"size":848,"mtime":1639984379138,"results":"54","hashOfConfig":"39"},{"size":1997,"mtime":1638768404000,"results":"55","hashOfConfig":"39"},{"size":13222,"mtime":1639125086542,"results":"56","hashOfConfig":"39"},{"size":5036,"mtime":1638774820000,"results":"57","hashOfConfig":"39"},{"size":13984,"mtime":1639984372130,"results":"58","hashOfConfig":"39"},{"size":6018,"mtime":1639985461660,"results":"59","hashOfConfig":"39"},{"size":6158,"mtime":1638774820000,"results":"60","hashOfConfig":"39"},{"size":9728,"mtime":1639984379135,"results":"61","hashOfConfig":"39"},{"size":16191,"mtime":1639984379139,"results":"62","hashOfConfig":"39"},{"size":10329,"mtime":1638258286000,"results":"63","hashOfConfig":"39"},{"size":5028,"mtime":1638349534000,"results":"64","hashOfConfig":"39"},{"size":946,"mtime":1639984379144,"results":"65","hashOfConfig":"39"},{"size":1247,"mtime":1638260710000,"results":"66","hashOfConfig":"39"},{"size":3275,"mtime":1637568268000,"results":"67","hashOfConfig":"39"},{"size":1650,"mtime":1639497811299,"results":"68","hashOfConfig":"39"},{"size":2005,"mtime":1638434396332,"results":"69","hashOfConfig":"39"},{"size":30987,"mtime":1640161401795,"results":"70","hashOfConfig":"39"},{"size":4367,"mtime":1639039166227,"results":"71","hashOfConfig":"39"},{"size":5568,"mtime":1639984379136,"results":"72","hashOfConfig":"39"},{"size":8593,"mtime":1639119237859,"results":"73","hashOfConfig":"39"},{"size":35042,"mtime":1640192383896,"results":"74","hashOfConfig":"39"},{"size":1319,"mtime":1640192425414,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"qst8mz",{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"78"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"78"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"78"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"78"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\project\\us\\frontend\\src\\index.js",[],["181","182"],"C:\\project\\us\\frontend\\src\\app.jsx",["183"],"C:\\project\\us\\frontend\\src\\admin\\memberPage.jsx",["184","185","186","187"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport '../../src/admin.css';\r\nimport axios from \"axios\";\r\n\r\nconst MemberForm = styled.div`\r\n    overflow-x: hidden; margin-left: 24rem;\r\n    ul { list-style:none; display: flex; }\r\n    ul li { padding: 0.6rem; font-size: 1.8rem; background-color: none; color: #888; cursor: pointer; font-weight: bold; }\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .memberListBox{ background-color: white; margin: 13rem auto 10rem; width: 112rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    .memberSearchBox{ display: flex; font-size:1.5rem; margin-top: 2rem; width: 100%; justify-content: end; margin-bottom:2rem; }\r\n    .memberSearchBox p{ margin: 0 1rem; display: flex; align-items: center; }\r\n    .memberSearch{ width: 26rem; height: 2.9rem; padding-left: 1rem; background-color: white; border: 2px solid #14c1c7; border-radius: 5px; box-shadow: 3px 3px 3px rgb(210,210,210); caret-color: #14c1c7; }\r\n    .memberSearch:focus{ outline:none; border:2px solid lightgray; }\r\n    .btn{ padding: 0.4rem 1.2rem }\r\n    .searchBtn{ background-color: #14c1c7; border: 1px solid white; color: white; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1.5rem; font-size: 1.3rem; }\r\n    .resetBtn{ background-color: white; border: 1px solid #14c1c7; color: #14c1c7; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1rem; font-size: 1.3rem; }\r\n    .postDate{ border: 1px solid #14c1c7; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); }\r\n    .fa-user-shield, .fa-clipboard, .fa-comments{ font-size: 1.7rem }\r\n    .fa-user-shield:hover, .fa-clipboard:hover, .fa-comments:hover{ font-size: 2rem; color: #14c1c7; }\r\n    .memberEmail{ width:35%; }\r\n    .memberInfo{ width:15%; }\r\n    .memberPost{ width:15%; }\r\n    .memberChat{ width:15%; }\r\n    .memberDate{ width:20%; }\r\n    table a{ text-decoration: none; color: black; }\r\n    table { text-align: center; width: 100%; margin-top: 10px; border-collapse: collapse; border: 2px solid #9b9b9b; font-size:1.4rem }\r\n    table th, table td { border: 1px solid #9b9b9b; height: 3.8rem; }\r\n    table th { background-color: rgb(248, 250, 252); }\r\n    .nonData { height: 10rem; color: #999; font-size: 1.4rem; }\r\n\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\nconst MemberPage = () => {\r\n\r\n    const [memberAxios, setAxios] = useState(0); // list-useEffect axios의 값 존재 여부 저장\r\n\r\n    let [change, setChange] = useState(1);\r\n    let [search, setSearch] = useState('')\r\n    let [searchNo, setSearchNo] = useState('')\r\n\r\n    let [member, setMember] = useState([]);\r\n    let [pageNum, setPageNum] = useState(1);\r\n\r\n    let pages = [];\r\n\r\n    const Pagination = (page) =>{ \r\n        setPageNum(page)\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    } \r\n\r\n    const PaginationNum = (e) =>{\r\n        let pageNum = e.target.id\r\n        Pagination(pageNum)\r\n    }\r\n\r\n    const PaginationArr = (e) =>{\r\n        let pageArr = e.target.value\r\n        console.log(pageArr)\r\n        Pagination(pageArr)\r\n    }\r\n\r\n    const searchInput = (e)=>{\r\n        e.preventDefault()\r\n        const searchInput = e.target.value;\r\n        setSearch(searchInput)\r\n    }\r\n    \r\n    const Search = () =>{\r\n        setPageNum(1)\r\n        setSearchNo(search)\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    }\r\n\r\n    const Reset = () =>{\r\n        setSearch('')\r\n        let e = document.querySelector('.memberSearch')\r\n        e.value = '';\r\n        Search()\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const member = await axios.get(\"http://localhost:3001/admin/member?page=\" + pageNum + \"&email=\" + search)\r\n        console.log(member.data)\r\n        setMember(member.data)\r\n        let paginationClass = document.querySelectorAll('.paginationClass');\r\n        if(member.data.totalPage!==0){\r\n            for(let i=0; i<paginationClass.length; i++){\r\n                paginationClass[i].style.color = \"#888\";\r\n            }\r\n            let current = document.getElementById(pageNum);\r\n                current.style.color = \"#14c1c7\";\r\n        }\r\n        if(member.data.result.length !== 0){ setAxios(1) } // axios의 값 존재 여부 저장\r\n    }, [change]);\r\n    for(let i=member.startPage; i<=member.endPage;i++){pages[i]=i}\r\n    \r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <MemberForm>\r\n            <div className=\"memberListBox\">\r\n                <p className=\"title\">회원관리</p>\r\n                    <div className=\"memberSearchBox\">\r\n                        <p>\r\n                            <input type=\"text\" className=\"memberSearch\" placeholder=\"이메일을 검색하세요\" onChange={searchInput} />\r\n                            <input type=\"button\" className=\"searchBtn btn\" value=\"검색\" onClick={Search}/>\r\n                            <input type=\"button\" className=\"resetBtn btn\" value=\"초기화\" onClick={Reset}/>\r\n                        </p>\r\n                    </div>\r\n                    <div>\r\n                        <table>\r\n                            <tr>\r\n                                <th className=\"memberEmail\">이메일 / 아이디</th>\r\n                                <th className=\"memberInfo\">정보</th>\r\n                                <th className=\"memberPost\">게시물</th>\r\n                                <th className=\"memberChat\">채팅방</th>\r\n                                <th className=\"memberDate\">가입날짜</th>\r\n                            </tr>\r\n                            {memberAxios !== 0 ?\r\n                                member.result.length !== 0 ?\r\n                                    member.result.map(rowData => (\r\n                                        <tr>\r\n                                            <td className=\"memberEmail\">{rowData.email}</td>\r\n                                            <td className=\"memberInfo\"><Link to={\"/admin/member/detail/\"+rowData.idx}><i class=\"fas fa-user-shield\"></i></Link></td>\r\n                                            <td className=\"memberPost\"><Link to={\"/admin/member/post/\"+rowData.idx}><i class=\"far fa-clipboard\"></i></Link></td>\r\n                                            <td className=\"memberChat\"><Link to={\"/admin/member/chat/\"+rowData.idx}><i class=\"fas fa-comments\"></i></Link></td>\r\n                                            <td className=\"memberDate\">{rowData.createdAt}</td>\r\n                                        </tr>\r\n                                    )) :\r\n                                    // rowData 가 없으면 나타냄\r\n                                    <tr className=\"nonData\"><td colSpan=\"5\">' {searchNo} ' 에 대한 검색결과가 존재하지 않습니다</td></tr>\r\n                                : \r\n                                // member의 데이터가 없으면 나타냄\r\n                                <tr className=\"nonData\"><td colSpan=\"5\">데이터가 존재하지 않습니다</td></tr>\r\n                            }\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"pagination\">\r\n                        <ul>\r\n                            { member.startPage !== 1 ?\r\n                                <>\r\n                                <li onClick={PaginationArr} value=\"1\">《</li>\r\n                                <li onClick={PaginationArr} value={member.startPage-1}>〈</li>\r\n                                </>\r\n                                : <></> // startPage가 1이면 나타냄\r\n                            }\r\n                            { member.totalPage !== 0 ?\r\n                                pages.map(rowData => (\r\n                                    member.startPage+5 > rowData ?\r\n                                    <li onClick={PaginationNum} class=\"paginationClass\" id={rowData}>{rowData}</li>\r\n                                    : <></>\r\n                                )) : <></> // pages가 없으면 나타냄\r\n                            }\r\n                            { member.endPage !== member.totalPage && member.endPage < member.totalPage ?\r\n                                <>\r\n                                <li onClick={PaginationArr} value={member.endPage+1}>〉</li>\r\n                                <li onClick={PaginationArr} value={member.totalPage}>》</li>\r\n                                </> : <></>\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </MemberForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default MemberPage;","C:\\project\\us\\frontend\\src\\admin\\questionPage.jsx",["188","189","190","191","192"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport '../../src/admin.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst QuestionForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    ul { list-style:none; display: flex; }\r\n    ul li { padding: 0.6rem; font-size: 1.8rem; background-color: none; color: #888; cursor: pointer; font-weight: bold; }\r\n    .form {\r\n        background-color: white;\r\n        margin: 13rem auto 10rem;\r\n        width: 112rem;\r\n        border-radius: 20px;\r\n        padding: 1.5rem 4rem;\r\n        box-shadow: 5px 5px 5px 5px rgb(210, 210, 210);\r\n    }\r\n    .title {\r\n        border-radius: 10px;\r\n        font-size: 1.5rem;\r\n        font-weight: bold;\r\n        color: #14c1c7;\r\n    }\r\n    .content-box {\r\n        border-radius: 10px;\r\n        padding-top: 2rem;\r\n    }\r\n    .content {\r\n        margin: 0;\r\n    }\r\n    input[type=\"text\"] {\r\n        width: 30rem;\r\n        height: 3rem;\r\n        padding-left: 1rem;\r\n        background-color: white;\r\n        border: 2px solid #14c1c7;\r\n        border-radius: 5px;\r\n        box-shadow: 3px 3px 3px rgb(210,210,210);\r\n        caret-color: #14c1c7;\r\n    }\r\n    input[type=\"text\"]:focus { outline: none; border: 2px solid lightgray; }\r\n    input[type=\"button\"] {\r\n        background-color: #14c1c7;\r\n        border: 1px solid white;\r\n        color: white;\r\n        width: 7rem;\r\n        height: 3.5rem;\r\n        border-radius: 5px;\r\n        box-shadow: 2px 2px 2px 2px rgb(210,210,210);\r\n        margin-left: 0.5rem;\r\n        font-size: 1.3rem;\r\n        cursor: pointer;\r\n    }\r\n    .search-box {\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n    table {\r\n        text-align: center;\r\n        width: 100%;\r\n        border-collapse: collapse;\r\n        border: 2px solid #9b9b9b;\r\n        font-size: 1.4rem;\r\n    }\r\n    table th, table td {\r\n        border: 1px solid #9b9b9b;\r\n        height: 3.8rem;\r\n    }\r\n    table th {\r\n        background-color: rgb(248, 250, 252);\r\n    }\r\n    .fa-check-square {\r\n        font-size: 1.8rem;\r\n        color: #14c1c7;\r\n    }\r\n    .detail-link {\r\n        color: black; \r\n    }\r\n    .detail-link:hover {\r\n        color: #14c1c7;\r\n        font-weight: bolder;  \r\n        font-size: 1.45rem; \r\n        overflow:hidden;\r\n        text-overflow:ellipsis;\r\n        white-space:nowrap;\r\n    }\r\n    input[type=\"checkbox\"]{ display: none; }\r\n    input[type=\"checkbox\"] + label {\r\n        display: inline-block; \r\n        height: 2rem; \r\n        padding-left: 3.2rem; \r\n        background: url(/img/admin/checkbox.png) no-repeat 0 0; \r\n        background-size: 2.1rem;\r\n        cursor: pointer; \r\n        vertical-align: middle; \r\n    }\r\n    input[type=\"checkbox\"]:checked + label {\r\n        background: url(/img/admin/check.png) no-repeat 0 0;\r\n        background-size: 1.7rem;\r\n    }\r\n    table tr td label { margin-left: 10px; }\r\n    table tr th label { margin-left: 10px; }\r\n    .nonData { height: 10rem; color: #999; font-size: 1.4rem;  }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\nconst QuestionPage = () => {\r\n\r\n    // 체크박스 설정\r\n    const checkAll = (e) =>{\r\n        const checkbox = document.getElementsByName('question');\r\n        if(e.target.checked === true){\r\n            checkbox.forEach((check)=>{\r\n                check.checked = true;\r\n            })\r\n        }else if(e.target.checked === false){\r\n            checkbox.forEach((check)=>{\r\n                check.checked = false;\r\n            })\r\n        }\r\n    }\r\n    function checkSelectAll() {\r\n        const cbox = document.querySelectorAll('input[name=\"question\"]');\r\n        const checked = document.querySelectorAll('input[name=\"question\"]:checked');\r\n        const selectAll = document.querySelector('input[name=\"selectall\"]');\r\n\r\n        if(cbox.length === checked.length)  {\r\n            selectAll.checked = true;\r\n        }else {\r\n            selectAll.checked = false;\r\n        }\r\n    }\r\n\r\n    // axios 뿌리기\r\n    const [listAxios, setAxios] = useState(0); // list-useEffect axios의 값 존재 여부 저장\r\n    let [question, setQuestion] = useState([]);\r\n    let [pageNum, setPageNum] = useState(1);\r\n    let [change, setChange] = useState(1);\r\n    let [search, setSearch] = useState('')\r\n    let [searchNo, setSearchNo] = useState('')\r\n\r\n    let pages = [];\r\n\r\n    const Pagination = (page) =>{ \r\n        setPageNum(page)\r\n        if(change == 1){ setChange(0) }else{ setChange(1) } } // useEffect 재실행을 위해 change값을 변경\r\n\r\n    const PaginationNum = (e) =>{\r\n        let pageNum = e.target.id\r\n        Pagination(pageNum)\r\n    }\r\n\r\n    const PaginationArr = (e) =>{\r\n        let pageArr = e.target.value\r\n        Pagination(pageArr)\r\n    }\r\n\r\n    const searchInput = (e)=>{\r\n        e.preventDefault()\r\n        const searchInput = e.target.value;\r\n        setSearch(searchInput)\r\n    }\r\n    \r\n    const Search = () =>{\r\n        setPageNum(1)\r\n        setSearchNo(search)\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    }\r\n\r\n    const Reset = () =>{\r\n        setSearch('')\r\n        let e = document.querySelector('.writer');\r\n        e.value = '';\r\n        Search()\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const question = await axios.get(\"http://localhost:3001/admin/inquiry?page=\" + pageNum + \"&name=\" + search)\r\n        setQuestion(question.data)\r\n        let paginationClass = document.querySelectorAll('.paginationClass');\r\n        if(question.data.totalPage!==0){\r\n            for(let i=0; i<paginationClass.length; i++) {\r\n                if(paginationClass.length !== 0){\r\n                    paginationClass[i].style.color = \"#888\";\r\n                }\r\n            }\r\n            let current = document.getElementById(pageNum);\r\n                current.style.color = \"#14c1c7\";\r\n        }\r\n        if(question.data.result.length !== 0){ setAxios(1) } // axios의 값 존재 여부 저장\r\n    }, [change]);\r\n\r\n    for(let i = question.startPage; i <= question.endPage; i++) { pages[i] = i }\r\n\r\n    const Delete = async() =>{\r\n        let delCheck = document.querySelectorAll('.delCheck');\r\n        for(let i in delCheck){ delCheck[i].checked? await axios.delete('http://localhost:3001/admin/inquiry/delete?idx='+delCheck[i].id.substring(15)):<></> }\r\n        alert('삭제되었습니다')\r\n        delCheck.forEach((check)=>{ check.checked = false; })\r\n        if(change==1){setChange(0)}else{setChange(1)}\r\n    }\r\n\r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <QuestionForm>\r\n                <div className=\"form\">\r\n                    <p className=\"title\">문의사항</p>\r\n                    <div className=\"content-box\">\r\n                        <p className=\"content\">\r\n                            <div className=\"search-box\">\r\n                                <p><input type=\"button\" value=\"삭제\" onClick={Delete}/></p>\r\n                                <p>\r\n                                    <input type=\"text\" className=\"writer\" placeholder=\"작성자를 검색하세요\" onChange={searchInput}/>\r\n                                    <input type=\"button\" value=\"검색\" onClick={Search}/>\r\n                                    <input type=\"button\" className=\"resetBtn btn\" value=\"초기화\" onClick={Reset}/>\r\n                                </p>\r\n                            </div>\r\n                            <table align= \"center\">\r\n                                <tr>\r\n                                    <th width=\"7%\"><input type=\"checkbox\" id=\"question_check\" name=\"selectall\" onClick={checkAll}/><label for=\"question_check\"></label></th>\r\n                                    <th width=\"15%\">작성자</th>\r\n                                    <th width=\"14%\">문의유형</th>\r\n                                    <th width=\"45%\">문의내용</th>\r\n                                    <th width=\"19%\">작성일</th>\r\n                                </tr>\r\n                                {  listAxios !== 0 ?\r\n                                    question.result.length !== 0 ?\r\n                                        question.result.map(rowData => (\r\n                                            <tr>\r\n                                                <td><input type=\"checkbox\" id={\"question_check_\"+ rowData.idx} className=\"delCheck\" name=\"question\" onClick={checkSelectAll}/><label for={\"question_check_\"+ rowData.idx}></label></td>\r\n                                                <td>{rowData.name}</td>\r\n                                                <td>{rowData.type}</td>\r\n                                                <td><Link to={\"/admin/question/detail/\" + rowData.idx} className=\"detail-link\">{rowData.content}</Link></td>\r\n                                                <td>{rowData.createdAt}</td>\r\n                                            </tr>\r\n                                        )) :// rowData 가 없으면 나타냄\r\n                                            <tr className=\"nonData\"><td colSpan=\"5\">' {searchNo} ' 에 대한 검색결과가 존재하지 않습니다</td></tr>\r\n                                    :   // member의 데이터가 없으면 나타냄\r\n                                        <tr className=\"nonData\"><td colSpan=\"5\">작성된 문의사항이 없습니다</td></tr>\r\n                                }\r\n                            </table>\r\n                        </p>\r\n                        <div className=\"pagination\">\r\n                            <ul>\r\n                            { question.startPage !== 1 ?\r\n                                <>\r\n                                <li onClick={PaginationArr} value=\"1\">《</li>\r\n                                <li onClick={PaginationArr} value={question.startPage-1}>〈</li>\r\n                                </>\r\n                                : <></> // startPage가 1이면 나타냄\r\n                            }\r\n                            { question.totalPage !== 0 ?\r\n                                pages.map(rowData => (\r\n                                    question.startPage+5 > rowData ?\r\n                                    <li onClick={PaginationNum} class=\"paginationClass\" id={rowData}>{rowData}</li>\r\n                                    : <></>\r\n                                )) : <></> // pages가 없으면 나타냄\r\n                            }\r\n                            { question.endPage !== question.totalPage && question.endPage < question.totalPage ?\r\n                                <>\r\n                                <li onClick={PaginationArr} value={question.endPage+1}>〉</li>\r\n                                <li onClick={PaginationArr} value={question.totalPage}>》</li>\r\n                                </> : <></>\r\n                            }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </QuestionForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default QuestionPage;","C:\\project\\us\\frontend\\src\\admin\\chatPage.jsx",["193","194","195","196"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport '../../src/app.css';\r\nimport axios from \"axios\";\r\n\r\nconst ChatForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    ul { list-style:none; display: flex; }\r\n    ul li { padding: 0.6rem; font-size: 1.8rem; background-color: none; color: #888; cursor: pointer; font-weight: bold; }\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .chatListBox { background-color: white; margin: 13rem auto 10rem; width: 112rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    .chatSearchBox { display: flex; font-size:1.5rem; margin-top: 2rem; width: 100%; justify-content: end; margin-bottom:2rem; }\r\n    .chatSearchBox p { margin: 0 1rem; display: flex; align-items: center; }\r\n    .btn { padding: 0.4rem 1.2rem }\r\n    .searchBtn { background-color: #14c1c7; border: 1px solid white; color: white; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1.5rem; font-size: 1.3rem; }\r\n    .resetBtn { background-color: white; border: 1px solid #14c1c7; color: #14c1c7; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1rem; font-size: 1.3rem; }\r\n    select { width:12rem; margin-right:1rem; border: 1px solid #14c1c7; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); padding: 0 1rem; }\r\n    select:focus, .chatDate:focus { outline:none; }\r\n    .chatDate { border: 1px solid #14c1c7; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); padding: 0 1rem; }\r\n    .chatRoomName a { text-decoration: none; color: #555; font-weight: bolder;  }\r\n    .chatRoomName a:hover { color: #14c1c7; font-size: 1.45rem; }\r\n    table { text-align: center; width: 100%; margin-top: 10px; border-collapse: collapse; border: 2px solid #9b9b9b; font-size:1.4rem }\r\n    table th, table td { border: 1px solid #9b9b9b; height: 3.8rem; }\r\n    table th { background-color: rgb(248, 250, 252); }\r\n    .search-text { font-weight: bold; font-size: 1.4rem; }\r\n    .nonData { height: 10rem; color: #999; font-size: 1.4rem; }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\nconst ChatPage = () => {\r\n\r\n    const [listAxios, setAxios] = useState(0); // useEffect axios의 값 존재 여부 저장\r\n    let [chat, setChat] = useState([]);\r\n    let [pageNum, setPageNum] = useState(1);\r\n    let [change, setChange] = useState(1); // useEffect 재실행을 위해 change값을 저장\r\n    let [search, setSearch] = useState('');\r\n    let [dateStart, setDateStart] = useState('');\r\n    let [dateEnd, setDateEnd] = useState('')\r\n\r\n    let pages = [];\r\n\r\n    const Pagination = (page) =>{ \r\n        setPageNum(page)\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    } \r\n\r\n    const PaginationNum = (e) =>{\r\n        let pageNum = e.target.id\r\n        Pagination(pageNum)\r\n    }\r\n\r\n    const PaginationArr = (e) =>{\r\n        let pageArr = e.target.value\r\n        Pagination(pageArr)\r\n    }\r\n\r\n    const Start = (e)=>{\r\n        e.preventDefault()\r\n        const dateStart = e.target.value;\r\n        setDateStart(dateStart)\r\n    }\r\n\r\n    const End = (e)=>{\r\n        e.preventDefault()\r\n        const dateEnd = e.target.value;\r\n        setDateEnd(dateEnd)\r\n    }\r\n\r\n    const searchSelect = (e)=>{\r\n        e.preventDefault()\r\n        const searchSelect = e.target.value;\r\n        setSearch(searchSelect)\r\n    }\r\n    \r\n    const Search = () =>{\r\n        setPageNum(1)\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    }\r\n\r\n    const Reset = () =>{\r\n        setSearch('')\r\n        setDateStart('')\r\n        setDateEnd('')\r\n        let e1 = document.getElementById('startDate');\r\n        let e2 = document.getElementById('endDate');\r\n        let e3 = document.getElementById('report');\r\n        e1.value = '';\r\n        e2.value = '';\r\n        e3.value = '';\r\n        Search()\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const chat = await axios.get(\"http://localhost:3001/admin/chat?page=\" + pageNum + \"&report=\" + search + \"&date1=\" + dateStart + \"&date2=\" + dateEnd)\r\n        setChat(chat.data)\r\n        let paginationClass = document.querySelectorAll('.paginationClass');\r\n        if(chat.data.totalPage!==0){\r\n            for(let i=0; i<paginationClass.length; i++){\r\n                paginationClass[i].style.color = \"#888\";\r\n            }\r\n            let current = document.getElementById(pageNum);\r\n                current.style.color = \"#14c1c7\";\r\n        }\r\n        if(chat.data.result.length !== 0){ setAxios(1) } // axios의 값 존재 여부 저장\r\n    }, [change]);\r\n\r\n    for(let i = chat.startPage; i <= chat.endPage; i++) { pages[i] = i }\r\n\r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <ChatForm>\r\n                <div className=\"chatListBox\">\r\n                <p className=\"title\">채팅관리</p>\r\n                    <div className=\"chatSearchBox\">\r\n                        <p className=\"search-text\">구분</p>\r\n                        <select id=\"report\" onChange={searchSelect}>\r\n                            <option value=\"\">전체</option>\r\n                            <option value=\"Y\">신고여부 : Y</option>\r\n                            <option value=\"N\">신고여부 : N</option>\r\n                        </select>\r\n                        <p className=\"search-text\">날짜</p>\r\n                        <input type=\"date\" className=\"chatDate\" id=\"startDate\" onChange={Start}/>\r\n                        <p>~</p>\r\n                        <input type=\"date\" className=\"chatDate\" id=\"endDate\" onChange={End}/>\r\n                        <input type=\"button\" className=\"searchBtn btn\" value=\"검색\" onClick={Search}/>\r\n                        <input type=\"button\" className=\"resetBtn btn\" value=\"초기화\" onClick={Reset}/>\r\n                    </div>\r\n                    <div>\r\n                        <table>\r\n                            <tr>\r\n                                <th width=\"10%\" className=\"Number\">번호</th>\r\n                                <th width=\"10%\" className=\"chatNumber\">인원수</th>\r\n                                <th width=\"27%\" className=\"chatRoomName\">채팅방명</th>\r\n                                <th width=\"20%\" className=\"chatDateText\">채팅 생성일자</th>\r\n                                <th width=\"18%\" className=\"chatType\">채팅방 유형</th>\r\n                                <th width=\"15%\" className=\"chatDec\">채팅방 신고여부</th>\r\n                            </tr>\r\n                            { listAxios !== 0 ?\r\n                                chat.result.length !== 0 ?\r\n                                    chat.result.map(rowData => (\r\n                                        <tr>\r\n                                            <td className=\"Number\">{rowData.idx}</td>\r\n                                            <td className=\"chatNumber\">{rowData.cnt}</td>\r\n                                            <td className=\"chatRoomName\"><Link to={\"/admin/chat/detail/\"+rowData.idx} className=\"link\">{rowData.title}</Link></td>\r\n                                            <td className=\"chatDateText\">{rowData.createdAt}</td>\r\n                                            <td className=\"chatType\">{rowData.type}</td>\r\n                                            <td className=\"chatDec\">{rowData.report}</td>\r\n                                        </tr>\r\n                                    )) : // rowData 가 없으면 나타냄\r\n                                    <tr className=\"nonData\"><td colSpan=\"6\">검색결과가 존재하지 않습니다</td></tr>\r\n                                : // chat의 데이터가 없으면 나타냄\r\n                                <tr className=\"nonData\"><td colSpan=\"6\">생성된 채팅방이 없습니다</td></tr>\r\n                            }\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"pagination\">\r\n                        <ul>\r\n                        { chat.startPage !== 1 ?\r\n                            <>\r\n                            <li onClick={PaginationArr} value=\"1\">《</li>\r\n                            <li onClick={PaginationArr} value={chat.startPage-1}>〈</li>\r\n                            </>\r\n                            : <></> // startPage가 1이면 나타냄\r\n                        }\r\n                        { chat.totalPage !== 0 ?\r\n                            pages.map(rowData => (\r\n                                chat.startPage+5 > rowData ?\r\n                                <li onClick={PaginationNum} class=\"paginationClass\" id={rowData}>{rowData}</li>\r\n                                : <></>\r\n                            )) : <></> // pages가 없으면 나타냄\r\n                        }\r\n                        { chat.endPage !== chat.totalPage && chat.endPage < chat.totalPage ?\r\n                            <>\r\n                            <li onClick={PaginationArr} value={chat.endPage+1}>〉</li>\r\n                            <li onClick={PaginationArr} value={chat.totalPage}>》</li>\r\n                            </> : <></>\r\n                        }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </ChatForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default ChatPage;","C:\\project\\us\\frontend\\src\\admin\\postDetailPage.jsx",["197","198","199","200","201","202","203"],"C:\\project\\us\\frontend\\src\\admin\\memberDetailPage.jsx",["204","205","206"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport '../../src/admin.css';\r\n\r\nconst MemberDetailForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .memberListBox{ background-color: white; margin: 13rem auto 10rem; width: 112rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    hr{ margin: 3rem 0 5rem; }\r\n    .memberFlexBox{ display: flex; align-items: center; justify-content: center; }\r\n    .memberImgBox img{ width: 35rem; height: 35rem; border: 2px solid lightgray; border-radius: 50%; box-shadow: 3px 3px 3px 3px rgb(240,240,240);}\r\n    .memberInfoText { font-size: 1.6rem; margin-left: 10rem; margin-top: 3rem; }\r\n    .memberInfoText p { margin-top: 0; font-weight: bold; color: #555;}\r\n    .memberInfoText p span { font-weight: normal; margin-left: 1.8rem; color: black; }\r\n    .returnBtnBox{ text-align: center; }\r\n    .returnBtn { cursor: pointer; text-align: center; font-size: 2.5rem; font-weight: bold; background-color: #14c1c7; border: 1px solid white; color: white; width: 16rem; height: 4rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); font-size: 1.3rem; margin: 7rem 0 2.5rem; }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\n\r\nconst MemberDetailPage = () => {\r\n    \r\n    const id = useParams();\r\n\r\n    const [detail, setDetail] = useState([])\r\n    \r\n    useEffect(async () => {\r\n        const info = await axios.get(\"http://localhost:3001/admin/member/Mdetail?idx=\"+id.idx)\r\n        setDetail(info.data[0])\r\n    }, []);\r\n    \r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <MemberDetailForm>\r\n            <div className=\"memberListBox\">\r\n                <p className=\"title\">회원관리 <i class=\"fas fa-chevron-right\"></i> 상세페이지</p>\r\n                <hr/>\r\n                <div className=\"memberFlexBox\">\r\n                    <div className=\"memberImgBox\">\r\n                        <img src={detail.img !== null? '/'+detail.img : '/img/admin/noneImg.png'}/>\r\n                    </div>\r\n                    <div className=\"memberInfoText\">\r\n                        <p>회원번호 : {detail.idx}</p>\r\n                        <p>이메일(아이디) : {detail.email}</p>\r\n                        <p>초대코드 : {detail.code}</p>\r\n                        <p>가입날짜 : {detail.createdAt}</p>\r\n                        <p>친구 수 : {detail.friendCnt}</p>\r\n                        <p>약관동의 1 : {detail.agreement1}</p>\r\n                        <p>약관동의 2 : {detail.agreement2}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"returnBtnBox\">\r\n                    <Link to= \"/admin/member\"><button className=\"returnBtn\">목록으로 돌아가기</button></Link>\r\n                </div>\r\n            </div>\r\n            </MemberDetailForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default MemberDetailPage;","C:\\project\\us\\frontend\\src\\admin\\memberPostPage.jsx",["207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport '../../src/admin.css';\r\n\r\nconst MemberPostForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    ul { list-style:none; display: flex; }\r\n    ul li { padding: 0.6rem; font-size: 1.8rem; background-color: none; color: #888; cursor: pointer; font-weight: bold; }\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .memberPostListBox{ background-color: white; margin: 13rem auto 10rem; width: 112rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    .memberPostSearchBox{ display: flex; font-size:1.5rem; margin-top: 2rem; width: 100%; justify-content: end; margin-bottom:2rem; }\r\n    .memberPostSearchBox p{ margin: 0 1rem; display: flex; align-items: center; }\r\n    .memberPostSearch{ width: 26rem; height: 2.9rem; padding-left: 1rem; background-color: white; border: 2px solid #14c1c7; border-radius: 5px; box-shadow: 3px 3px 3px rgb(210,210,210); caret-color: #14c1c7; }\r\n    .memberPostSearch:focus{ outline:none; border:2px solid lightgray; }\r\n    .btn{ padding: 0.4rem 1.2rem }\r\n    .searchBtn{ background-color: #14c1c7; border: 1px solid white; color: white; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1.5rem; font-size: 1.3rem; }\r\n    .resetBtn{ background-color: white; border: 1px solid #14c1c7; color: #14c1c7; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1rem; font-size: 1.3rem; }\r\n    .returnBtnBox{ text-align: center; }\r\n    .returnBtn{ text-align: center; font-size: 1.5rem; background-color: #14c1c7; border: 1px solid white; color: white; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); font-size: 1.3rem; margin: 1rem 0 2.5rem; }\r\n    table a{ text-decoration: none; color: black; }\r\n    table { text-align: center; width: 100%; margin-top: 10px; border-collapse: collapse; border: 2px solid #9b9b9b; font-size:1.4rem }\r\n    table th, table td { border: 1px solid #9b9b9b; height: 3.8rem; }\r\n    table th { background-color: rgb(248, 250, 252); }\r\n    .memberPostNum{ width: 14%; }\r\n    .memberPostContent{ width: 68%; }\r\n    .memberPostDate{ width: 18%; }\r\n    .postContent:hover{ font-size: 1.5rem; font-weight:bold; color: #14c1c7; }\r\n    .popTitle{ margin: 3.2rem 0 2.8rem; font-size:1.6rem; text-align: center; font-weight: bold; }\r\n    .popFlexBox{ width: calc(100% - 2rem); display: flex; padding:1rem 1rem 0.5rem 1rem; justify-content: space-between; }\r\n    .imgBox{ width: 25rem; height: 25rem; border: 1px solid lightgray; }\r\n    .imgBox img{ width: 100%; height: 100%; }\r\n    .contentBox{ width: calc(22rem - 2rem); height: calc(25rem - 2rem); border: 1px solid lightgray; padding: 1rem; overflow-y: scroll; }\r\n    .content{ margin: 0; font-size: 1.3rem; }\r\n    .contentOverflow{ width:56rem; height: 2rem; overflow: hidden; padding: 0 9rem; text-overflow: ellipsis; margin: 0 auto; }\r\n    .popBox{ width: calc(100% - 2rem); padding: 0rem 1rem 1rem 1rem; }\r\n    .reBox{ width: 100%; border: 1px solid lightgray; height: 23rem; overflow-y: scroll; }\r\n    .reTextBox img{ width: 4rem; height: 4rem; border: 1px solid lightgray; border-radius: 50%; margin-right: 1rem; }\r\n    .reMember, .reText{ margin: 0; margin-top: 0.2rem; }\r\n    .reMember{ font-weight: bold; }\r\n    .reText{ font-size: 1.2rem; max-width: 30rem; overflow-wrap: anywhere; }\r\n    .reTextBox{ display: flex;  margin: 1rem; }\r\n    .reImg{ width: 4rem; height: 4rem; margin-right: 1rem; position: relative; }\r\n    .reReImg{ width: 8rem; height: 4rem; margin-right: 1rem; position: relative; }\r\n    .fa-replyd{ font-size: 3rem; position: absolute; bottom: 0; right: 0; color: gray; }\r\n    .postImgBtn{ width: 100%; display:flex; justify-content: space-between; position: relative; bottom: 17rem; } \r\n    .postImgBtn img{ width: 6rem; }\r\n    .nonData { height: 10rem; color: #999; font-size: 1.4rem; }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\nlet img = 0;\r\n\r\nconst MemberPostPage = () => {\r\n\r\n    const id = useParams(); // 넘겨받은 id값\r\n    const [listAxios, setAxios] = useState(0); // list-useEffect axios의 값 존재 여부 저장\r\n\r\n    // axios 저장 / list, modal\r\n    let [list, setList] = useState([])\r\n    let [detail, setDetail] = useState({postInfo:[0], postImg:[0], postReply:[0]});\r\n\r\n    let [detailImg, setDetailImg] = useState(0) // scrollImg-useEffect 재실행을 위한 값 변경 저장\r\n    let [modalOn, setModalOn] = useState(false); // 팝업 open/close를 위한 변경 값\r\n    let [scrollImg, setScrollImg ] = useState(''); // imgName 저장\r\n    let [detailId, setId] = useState(null); // 팝업으로 띄울 post idx 값 저장 \r\n\r\n    let [change, setChange] = useState(1);\r\n    let [search, setSearch] = useState('')\r\n    let [searchNo, setSearchNo] = useState('')\r\n    let [pageNum, setPageNum] = useState(1);\r\n    let pages = [];\r\n    \r\n    useEffect(async () => { // list-useEffect\r\n        const list = await axios.get(\"http://localhost:3001/admin/member/post?idx=\"+id.idx+\"&page=\"+pageNum+\"&content=\"+search)\r\n        setList(list.data)\r\n        let paginationClass = document.querySelectorAll('.paginationClass');\r\n        if(list.data.totalPage!==0){\r\n            for(let i=0; i<paginationClass.length; i++){\r\n                paginationClass[i].style.color = \"#888\";\r\n            }\r\n            let current = document.getElementById(pageNum);\r\n            current.style.color = \"#14c1c7\";\r\n        }\r\n        if(list.data.result.length !== 0){ setAxios(1) } // axios의 값 존재 여부 저장\r\n    }, [change]);\r\n\r\n    useEffect(async () => { // modal-useEffect\r\n        const info = await axios.get(\"http://localhost:3001/admin/member/post/detail?postIdx=\"+detailId)\r\n        setDetail({postInfo:info.data[0], postImg:info.data[1], postReply:info.data[2]})\r\n        if(detailImg===0){setDetailImg(1)}else{setDetailImg(0)} // scrollImg-useEffect 재실행을 위해 detailImg 값 변경\r\n    }, [modalOn]);\r\n\r\n    useEffect(async () => { // scrollImg-useEffect\r\n        if(detail.postImg.length!==0){setScrollImg(detail.postImg[0].imgName)}\r\n    }, [detailImg]);\r\n\r\n    // 페이지네이션\r\n    const Pagination = (page) =>{ \r\n        setPageNum(page)\r\n        if(change==1){setChange(0)}else{setChange(1)} } // useEffect 재실행을 위해 change값을 변경\r\n    const PaginationNum = (e) =>{\r\n        let pageNum = e.target.id\r\n        Pagination(pageNum)\r\n    }\r\n    const PaginationArr = (e) =>{\r\n        let pageArr = e.target.value\r\n        Pagination(pageArr)\r\n    }\r\n    for(let i=list.startPage; i<=list.totalPage;i++){pages[i]=i}\r\n\r\n    // 조건검색\r\n    const searchInput = (e)=>{\r\n        e.preventDefault()\r\n        const searchInput = e.target.value;\r\n        setSearch(searchInput)\r\n    }\r\n    const Search = () =>{\r\n        setPageNum(1)\r\n        setSearchNo(search)\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    }\r\n    const Reset = () =>{\r\n        setSearch('')\r\n        let e = document.querySelector('.memberPostSearch')\r\n        e.value = '';\r\n        Search()\r\n    }\r\n\r\n    // 이미지 버튼\r\n    const next = () => {\r\n        img = detail.postImg.length-1 === img ? img : img+1;\r\n        setScrollImg(detail.postImg[img].imgName)\r\n    }\r\n    const prev = () => {\r\n        img = img === 0 ? 0 : img-1;\r\n        setScrollImg(detail.postImg[img].imgName)\r\n    }\r\n\r\n    const onOpenModal = (e) => { // 팝업창 open/close\r\n        img = 0\r\n        setModalOn(!modalOn)\r\n        let idx = e.target.id\r\n        setId(idx)\r\n        //팝업 창 띄울 시 body 스크롤\r\n        if(modalOn==false){\r\n            document.body.style.overflow = \"hidden\";\r\n        }else if(modalOn==true){\r\n            document.body.style.overflow = \"unset\";\r\n        }\r\n    }\r\n    \r\n    const Modal = () => { //팝업창\r\n        return (\r\n            <div id=\"mw_temp\" className=\"mw\">\r\n                <div className=\"bg\"></div>\r\n                <div className=\"fg\">\r\n                    <div className=\"closeBtn\" onClick={onOpenModal}><i class=\"fas fa-times\"></i></div>\r\n                    <p className=\"popTitle\">{detail.postInfo.length!==0?<span>{detail.postInfo[0].createdAt}</span>:<span></span>}</p>\r\n                    <div className=\"popFlexBox\">\r\n                        <div className=\"imgBox\">\r\n                            <img className=\"postImg\" src={\"/uploads/\"+scrollImg}/>\r\n                            <div className=\"postImgBtn\"><img style={img===0?{opacity: '0'}:{opacity: '1'}} onClick={prev} src=\"/img/admin/insta-left-circle.svg\"/><img style={img===detail.postImg.length-1?{opacity: '0'}:{opacity: '1'}} onClick={next} src=\"/img/admin/insta-right-circle.svg\"/></div>\r\n                            <div></div>\r\n                        </div>\r\n                        <div className=\"contentBox\">\r\n                            <p className=\"content\">{detail.postInfo.length!==0?<span>{detail.postInfo[0].content}</span>:<span></span>}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"popBox\">\r\n                        <div className=\"reBox\">\r\n                            {detail.postReply.length!==0?\r\n                                detail.postReply.map(ReplyData => (\r\n                                    ReplyData.depth===0?\r\n                                    <div className=\"reTextBox\">\r\n                                        <img src=\"/img/admin/yb.png\"/>\r\n                                        <div className=\"onRe\">\r\n                                            <p className=\"reMember\">{ReplyData.name} ⦁ {ReplyData.createdAt}</p>\r\n                                            <p className=\"reText\">{ReplyData.content}</p>    \r\n                                        </div>\r\n                                    </div>\r\n                                    : ReplyData.depth===1?\r\n                                    <div className=\"reTextBox\">\r\n                                        <div className=\"reImg\"><i class=\"fab fa-replyd\"></i></div>\r\n                                        <img src=\"/img/admin/yb.png\"/>\r\n                                        <div className=\"onRe\">\r\n                                            <p className=\"reMember\">{ReplyData.name} ⦁ {ReplyData.createdAt}</p>\r\n                                            <p className=\"reText\">{ReplyData.content}</p>    \r\n                                        </div>\r\n                                    </div>\r\n                                    : ReplyData.depth>=2?\r\n                                    <div className=\"reTextBox\">\r\n                                        <div className=\"reReImg\"><i class=\"fab fa-replyd\"></i></div>\r\n                                        <img src=\"/img/admin/yb.png\"/>\r\n                                        <div className=\"onRe\">\r\n                                            <p className=\"reMember\">{ReplyData.name} ⦁ {ReplyData.createdAt}</p>\r\n                                            <p className=\"reText\">{ReplyData.content}</p>    \r\n                                        </div>\r\n                                    </div>\r\n                                    : <></>\r\n                                )):\r\n                                <p>등록된 댓글이 없습니다.</p>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <MemberPostForm>\r\n            <div className=\"memberPostListBox\">\r\n                <p className=\"title\">회원관리 <i class=\"fas fa-chevron-right\"></i> 게시물목록</p>\r\n                <div className=\"memberPostSearchBox\">\r\n                    <p>\r\n                        <input type=\"text\" className=\"memberPostSearch\" placeholder=\"게시물 내용을 입력하세요\" onChange={searchInput}/>\r\n                        <input type=\"button\" className=\"searchBtn btn\" value=\"검색\" onClick={Search}/>\r\n                        <input type=\"button\" className=\"resetBtn btn\" value=\"초기화\" onClick={Reset}/>\r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    <table>\r\n                        <tr>\r\n                            <th className=\"memberPostNum\">게시물번호</th>\r\n                            <th className=\"memberPostContent\">게시물내용</th>\r\n                            <th className=\"memberPostDate\">게시날짜</th>\r\n                        </tr>\r\n                        {listAxios !== 0 ?\r\n                            list.result.length !== 0 ?\r\n                                list.result.map(rowData => (\r\n                                    <tr>\r\n                                        <td className=\"memberPostNum\">{rowData.idx}</td>\r\n                                        <td className=\"memberPostContent postContent\"><div  id={rowData.idx} onClick={onOpenModal} className=\"contentOverflow\">{rowData.content}</div></td>\r\n                                        <td className=\"memberPostDate\">{rowData.createdAt}</td>\r\n                                    </tr>\r\n                                )) :\r\n                                // rowData 가 없으면 나타냄\r\n                                <tr className=\"nonData\"><td colSpan=\"3\">' {searchNo} ' 에 대한 검색결과가 존재하지 않습니다</td></tr>\r\n                            : \r\n                            // member의 post 데이터가 없으면 나타냄\r\n                            <tr className=\"nonData\"><td colSpan=\"3\">게시글이 존재하지 않습니다</td></tr>\r\n                        }\r\n                        \r\n                    </table>\r\n                </div>\r\n                <div className=\"pagination\">\r\n                    <ul>\r\n                        { list.startPage !== 1 ?\r\n                            <>\r\n                            <li onClick={PaginationArr} value=\"1\">《</li>\r\n                            <li onClick={PaginationArr} value={list.startPage-1}>〈</li>\r\n                            </> : <></> // startPage가 1이면 나타냄\r\n                        }\r\n                        { list.totalPage !== 0 ?\r\n                            pages.map(rowData => (\r\n                                list.startPage+5 > rowData ?\r\n                                <li onClick={PaginationNum} class=\"paginationClass\" id={rowData}>{rowData}</li>\r\n                                : <></>\r\n                            )) : <></> // pages가 없으면 나타냄\r\n                        }\r\n                        { list.endPage !== list.totalPage && list.endPage < list.totalPage ?\r\n                            <>\r\n                            <li onClick={PaginationArr} value={list.endPage+1}>〉</li>\r\n                            <li onClick={PaginationArr} value={list.totalPage}>》</li>\r\n                            </> : <></>\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"returnBtnBox\">\r\n                    <Link to= \"/admin/member\"><button className=\"returnBtn\">뒤로가기</button></Link>\r\n                </div>\r\n            </div>\r\n            {modalOn? <Modal/>: ''}\r\n            </MemberPostForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default MemberPostPage;","C:\\project\\us\\frontend\\src\\admin\\questionDetailPage.jsx",["223","224","225"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport '../../src/admin.css';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport qs from 'qs';\r\n\r\nconst QuestionDetailForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    .form { background-color: white; margin: 13rem auto 10rem; width: 112rem; min-height: 55rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .content-box { height: 37rem; border-radius: 10px; padding-top: 2rem; }\r\n    .content { font-size: 1.4rem; text-align: left; width: 75rem; margin: 0 auto; border-bottom: 2px solid rgb(215, 215, 215); box-shadow: 3px 3px 3px 4px rgb(240, 240, 240); padding: 1.3rem 3rem; }\r\n    .content table th { width: 17rem; padding: 1.2rem 0; }\r\n    .content table td { width: 41rem; }\r\n    .content table td span { color: #14c1c7; font-weight: bold; }\r\n    .answer { width: 78rem; margin: 0 auto; }\r\n    .answer-title { font-size: 1.4rem; font-weight: bold; color: #888; margin-top: 2rem; padding: 1rem; box-shadow: 2px 2px 2px 2px rgb(248, 250, 252); border-radius: 5px; }\r\n    .answer-content { background-color: rgb(248, 250, 252); height: 15rem; width: 100%; border: 2px solid #14c1c7; border-radius: 5px; padding: 1rem; font-size: 1.5rem; box-shadow: 2px 2px 2px 2px rgb(210,210,210); resize: none; overflow-y: scroll; }\r\n    .answer-content:focus { outline: none; caret-color: #14c1c7; }\r\n    input[type=\"button\"] { background-color: #14c1c7; border: 1px solid white; color: white; width: 9rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210);  margin-left: 2rem; font-size: 1.3rem; cursor: pointer; }\r\n    .button-box { text-align: center; margin-top: 3rem; }\r\n    .nonData { margin-left: 4rem; }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\nconst QuestionDetailPage = () => {\r\n\r\n    let [detail, setDetail] = useState({qnaInfo:[0], qnaDec:[0]});\r\n    let [message, setMessage] = useState(null);\r\n\r\n    const idx = useParams();\r\n\r\n    useEffect(async () => {\r\n        const questionDetail = await axios.get(\"http://localhost:3001/admin/inquiry/detail?idx=\" + idx.idx)\r\n        setDetail({qnaInfo:questionDetail.data[0][0], qnaDec:questionDetail.data[1]})\r\n        setMessage(questionDetail.data[0][0].message)\r\n        console.log(questionDetail)\r\n    }, []);\r\n\r\n    const content = (e) =>{\r\n        let msg = e.target.value\r\n        setMessage(msg)\r\n    }\r\n\r\n    const Repeat = () => {\r\n        axios.put(\"http://localhost:3001/admin/inquiry/repeat?idx=\" + idx.idx + \"&message=\" + message)\r\n        if(message===''){alert('답변을 지웠습니다')}else{alert('답변이 등록되었습니다')}\r\n    }\r\n\r\n    console.log(detail.qnaInfo.message)\r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <QuestionDetailForm>\r\n                <div className=\"form\">\r\n                    <p className=\"title\">문의사항 <i class=\"fas fa-chevron-right\"></i> 문의 상세</p>\r\n                    <div className=\"content-box\">\r\n                        <div className=\"content\">\r\n                            <table>\r\n                                <tr>\r\n                                    <th>작성자</th>\r\n                                    <td>{detail.qnaInfo.name}</td>\r\n                                    <th>작성일자</th>\r\n                                    <td>{detail.qnaInfo.createdAt}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>문의유형</th>\r\n                                    <td>{detail.qnaInfo.type}</td>\r\n                                    <th>신고대상자</th>\r\n                                    {detail.qnaInfo.type === \"신고문의\" ?\r\n                                        <td>{detail.qnaDec.name} [<span> {detail.qnaDec.email} </span>]</td> : <td>-</td> }\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>문의내용</th>\r\n                                    <td colSpan=\"3\">{detail.qnaInfo.content}</td>\r\n                                </tr>\r\n                            </table>\r\n                        </div>\r\n                        {detail.qnaInfo.message === null ?\r\n                            <div className=\"answer\">\r\n                                <p className=\"answer-title\">답변 등록하기</p>\r\n                                <textarea className=\"answer-content\" onChange={content} value={message}></textarea>\r\n                            </div>\r\n                            :\r\n                            <div className=\"answer\">\r\n                                <p className=\"answer-title\">답변 수정하기</p>\r\n                                <textarea className=\"answer-content\" onChange={content} value={message}>{detail.qnaInfo.message}</textarea>\r\n                            </div>\r\n                        }\r\n                        {detail.qnaInfo.message === null ?\r\n                            <p className=\"button-box\">\r\n                                <Link to=\"/admin/question\"><input type=\"button\" value=\"뒤로가기\"/></Link>\r\n                                <input type=\"button\" value=\"등록\" onClick={Repeat}/>\r\n                            </p>\r\n                        :\r\n                            <p className=\"button-box\">\r\n                                <Link to=\"/admin/question\"><input type=\"button\" value=\"뒤로가기\"/></Link>\r\n                                <input type=\"button\" value=\"수정\" onClick={Repeat}/>\r\n                            </p>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </QuestionDetailForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default QuestionDetailPage;","C:\\project\\us\\frontend\\src\\admin\\chatDetailPage.jsx",["226","227","228","229","230","231","232","233","234","235"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport '../../src/admin.css';\r\nimport axios from \"axios\";\r\n\r\nconst ChatDetailForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .chatListBox { background-color: white; margin: 13rem auto 10rem; width: 112rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    .Number a { text-decoration: none; color: #14c1c7; font-weight: bolder; }\r\n    .postDetailInfoBox{ width:100%; display:flex; justify-content: space-between; margin: 6rem 0; }\r\n    .chatBox { width: calc(49.7% - 2px); height: 50rem; padding: 1rem 0; }\r\n    .chatTextBox { height: calc(49.7% - 2px); border:2px solid rgb(210,210,210); overflow-y: scroll; height: 45rem; padding: 2rem; background-color: rgb(248, 250, 252); border-radius: 5px;}\r\n    .chatDetail_text { padding: 1rem; overflow-wrap: anywhere; font-size: 1.4rem; }\r\n    .chatDetail_text p { margin: 0.5rem 0; border-radius: 5px; border: 1px solid lightgray; padding: 0.8rem 1rem; color: #333; background-color: white; }\r\n    .chatDetail_text p span { margin-left: 1.5rem; font-size: 1rem; font-weight: bolder; color: #888; }\r\n    .chatDetail_text p input { width: 5rem; font-size: 0.5rem; border-radius: 5px; border: 1px solid #14c1c7; color: #14c1c7; background-color: white; cursor: pointer; margin-left: 0.5rem; }\r\n    .chatDetail_text .nickname { font-size: 1.4rem; margin-left: 0; margin-right: 2rem; }\r\n    .chatInfoBox { width: calc(49.7% - 2px); height: 50rem; padding: 1rem 0; }\r\n    .InfoForm { height: calc(49.7% - 2px); border:2px solid rgb(248, 250, 252); height: 49rem; padding: 0 3rem; border-radius: 5px; }\r\n    .chatTitle { font-size: 1.5rem; font-weight: bold; color: #14c1c7; padding: 5rem 0; margin-right: 2rem; }\r\n    .chatInfoText { font-size: 1.7rem; color: #555; font-weight: bold; margin-bottom: 3rem; border-bottom: 2px solid lightgray; padding: 0.4rem 0 0.6rem 0.5rem; border-radius: 5px; }\r\n    .InfoText { padding: 0 1rem 0.5rem; }\r\n    .profileImgForm { display: flex; }\r\n    .profileImg { margin-right: 1rem; }\r\n    .profileImg img { width: 5.5rem; height: 5.5rem; border-radius: 30px; border: 2px solid #14c1c7; }\r\n    .profileName { font-size: 1.1rem; font-weight: bold; margin-left: 1.2rem; color: #555; }\r\n    .info { font-size: 1.4rem; font-weight: bold; color: #888; }\r\n    .first-chatInfo { margin-bottom: 3rem; }\r\n    // 모달창 css\r\n    .mw .fg .modalTitle { border: none; width: 11rem; margin: 2rem auto; font-size: 2rem; font-weight: bold;  }\r\n    .fa-times { font-size: 3.5rem; }\r\n    .modalForm .user { font-size: 1.7rem; font-weight: bold; color: #666; border: none; text-align: center; border-bottom: 4px solid rgb(240,240,240); border-radius: 10px; width: 20rem; margin: 4rem auto 0;}\r\n    .modalForm .userName { font-size: 1.7rem; }\r\n    .chat {\r\n        width: 35rem; border: 2px solid rgb(240, 240, 240); height: 33rem; margin: 3rem auto; overflow-y: scroll; background-color: rgb(248, 250, 252); padding: 2rem; font-size: 1.5rem; font-weight: normal; color: #444; }\r\n    .nonData { font-size: 1.6rem; color: #777; margin: 3rem auto; }\r\n    .chatTextBox .nonChat { font-size: 1.6rem; margin: 0 auto; font-weight: bold; }\r\n    .chatTextBox .nonChat p { color: #999; }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\n\r\nconst ChatDetailPage = () => {\r\n    // axios 뿌리기\r\n    let [infomation, setInfo] = useState([]);\r\n    let [profile, setProfile] = useState([]);\r\n    let [chat, setChat] = useState([]);\r\n    let [search, setSearch] = useState('');\r\n    let [change, setChange] = useState(1);\r\n    let [popup, setPopup] = useState();\r\n    let [popupId, setId] = useState(null); // 팝업으로 띄울 room idx 값 저장 \r\n    const id = useParams();\r\n\r\n    const searchInput = (e)=>{\r\n        e.preventDefault()\r\n        const searchInput = e.target.value;\r\n        setSearch(searchInput)\r\n    }\r\n    \r\n    const Search = () =>{\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    }\r\n\r\n    //팝업\r\n    const [modalOn, setModalOn] = useState(false); \r\n\r\n    const onOpenModal = (e) => {\r\n        setModalOn(!modalOn);\r\n        let idx = e.target.id\r\n        setId(idx)\r\n\r\n        //팝업 창 띄울 시 body 스크롤\r\n        if(modalOn==false){\r\n            document.body.style.overflow = \"hidden\";\r\n        }else if(modalOn==true){\r\n            document.body.style.overflow = \"unset\";\r\n        }\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const infomation = await axios.get(\"http://localhost:3001/admin/chat/detail?idx=\" + id.idx + \"&content=\" + search)\r\n        setInfo(infomation.data[1][0])\r\n        setProfile(infomation.data[2])\r\n        setChat(infomation.data[0])\r\n    }, [change]);\r\n\r\n    //팝업 url\r\n    useEffect(async () => { \r\n        const detail = await axios.get(\"http://localhost:3001/admin/chat/detail/plus?idx=\" + popupId)\r\n        setPopup(detail.data[0])\r\n    }, [modalOn]);\r\n\r\n    console.log(profile)\r\n\r\n    const Modal = () => {\r\n        return(\r\n            <div id=\"mw_temp\" className=\"mw\">\r\n                <div className=\"bg\" style={{opacity: '0.2'}}></div>\r\n                {\r\n                    popup !== undefined ?\r\n                        <div className=\"fg\">\r\n                            <div className=\"closeBtn\" onClick={onOpenModal}><i class=\"fas fa-times\"></i></div>\r\n                            <p className=\"modalTitle\">채팅 더보기</p>\r\n                            <div className=\"modalForm\">\r\n                                <p className=\"user\">사용자 :<span className=\"userName\">{popup.name}</span></p>\r\n                            </div>\r\n                            <div>\r\n                                <div className=\"chat\">\r\n                                    <div>{popup.content}</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    :\r\n                        <div className=\"fg\">\r\n                        <div className=\"closeBtn\" onClick={onOpenModal}><i class=\"fas fa-times\"></i></div>\r\n                        <p className=\"modalTitle\">채팅 더보기</p>\r\n                        <div className=\"modalForm\">\r\n                            <p className=\"user\">사용자 :<span className=\"userName\"></span></p>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"chat\">\r\n                                <div></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <ChatDetailForm>\r\n                <div className=\"chatListBox\">\r\n                <p className=\"title\">채팅관리 <i class=\"fas fa-chevron-right\"></i> 상세페이지</p>\r\n                    <div className=\"postDetailInfoBox\">\r\n                        <div className=\"chatBox\">\r\n                            <div className=\"chatTextBox\">\r\n                                <div className=\"chatDetail_text\">\r\n                                { chat.length !== 0 ?\r\n                                    chat.map(rowData => (\r\n                                        <p><span className=\"nickname\">{rowData.name}</span> {rowData.content} <span><input type=\"button\" value=\"더보기\" id={rowData.idx} className=\"openBtn\" onClick={onOpenModal}/>\r\n                                        {modalOn? <Modal/>: ''}</span><span>{rowData.createdAt}</span></p>\r\n                                    )):\r\n                                    <div className=\"nonChat\">\r\n                                        <p>채팅내역이 없습니다</p>\r\n                                    </div>\r\n                                }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"chatInfoBox\">\r\n                            <div className=\"InfoForm\">\r\n                            { \r\n                                <div className=\"chatInfo first-chatInfo\">\r\n                                    <p className=\"chatInfoText\">채팅방 정보</p>\r\n                                    <p className=\"InfoText\"><span className=\"chatTitle\">채팅방명</span><span className=\"info chatName\">{infomation.title}</span></p>\r\n                                    <p className=\"InfoText\"><span className=\"chatTitle\">채팅인원</span><span className=\"info chatCount\">{infomation.cnt}</span></p>\r\n                                    <p className=\"InfoText\"><span className=\"chatTitle\">생성일자</span><span className=\"info chatRegdate\">{infomation.createdAt}</span></p>\r\n                                    <p className=\"InfoText\"><span className=\"chatTitle\">채팅유형</span><span className=\"info chatType\">{infomation.type}</span></p>\r\n                                    <p className=\"InfoText\"><span className=\"chatTitle\">신고여부</span><span className=\"info chatDec\">{infomation.report}</span></p>\r\n                                </div>\r\n                            }\r\n                                <div className=\"chatInfo\">\r\n                                    <p className=\"chatInfoText\">프로필 정보</p>\r\n                                    <div className=\"profileImgForm\">\r\n                                        { profile.length !== 0 ?\r\n                                            profile.map(rowData => (\r\n                                                <div className=\"profileImg\">\r\n                                                    <img src={rowData.img !== null ? '/'+rowData.img :  '/img/admin/noneImg.png'}/>\r\n                                                    <p className=\"profileName\">{rowData.name}</p>\r\n                                                </div>\r\n                                            )):\r\n                                                <div className=\"profileImg nonData\">\r\n                                                    <p>채팅에 참여한 사람이 없습니다</p>\r\n                                                </div>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>    \r\n                </div>\r\n            </ChatDetailForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default ChatDetailPage;","C:\\project\\us\\frontend\\src\\admin\\memberChatPage.jsx",["236","237","238","239","240","241","242","243","244","245"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport '../../src/admin.css';\r\n\r\nconst MemberChatForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    ul { list-style:none; display: flex; }\r\n    ul li { padding: 0.6rem; font-size: 1.8rem; background-color: none; color: #888; cursor: pointer; font-weight: bold; }\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .memberChatListBox{ background-color: white; margin: 13rem auto 10rem; width: 112rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    .memberChatSearchBox{ display: flex; font-size:1.5rem; margin-top: 2rem; width: 100%; justify-content: end; margin-bottom:2rem; }\r\n    .memberChatSearchBox p{ margin: 0 1rem; display: flex; align-items: center; }\r\n    .memberChatSearch{ width: 26rem; height: 2.9rem; padding-left: 1rem; background-color: white; border: 2px solid #14c1c7; border-radius: 5px; box-shadow: 3px 3px 3px rgb(210,210,210); caret-color: #14c1c7; }\r\n    .memberChatSearch:focus{ outline:none; border:2px solid lightgray; }\r\n    .btn{ padding: 0.4rem 1.2rem }\r\n    .searchBtn{ background-color: #14c1c7; border: 1px solid white; color: white; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1.5rem; font-size: 1.3rem; }\r\n    .resetBtn{ background-color: white; border: 1px solid #14c1c7; color: #14c1c7; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1rem; font-size: 1.3rem; }\r\n    .returnBtnBox{ text-align: center; }\r\n    .returnBtn{ text-align: center; font-size: 1.5rem; background-color: #14c1c7; border: 1px solid white; color: white; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); font-size: 1.3rem; margin: 1rem 0 2.5rem; }\r\n    table a{ text-decoration: none; color: black; }\r\n    table { text-align: center; width: 100%; margin-top: 10px; border-collapse: collapse; border: 2px solid #9b9b9b; font-size:1.4rem }\r\n    table th, table td { border: 1px solid #9b9b9b; height: 3.8rem; }\r\n    table th { background-color: rgb(248, 250, 252); }\r\n    .memberChatNum{ width: 15%; }\r\n    .memberChatTitle{ width: 65%; }\r\n    .memberChatDate{ width: 20%; }\r\n    .chatTitle:hover{ font-size: 1.5rem; font-weight:bold; color: #14c1c7; }\r\n    .popTitle{ margin: 3.2rem 0 2.8rem; font-size:1.6rem; text-align: center; font-weight: bold; }\r\n    .chatContentBox{ height: 44.8rem; border: 1px solid lightgray; overflow-y: scroll; padding-bottom: 1.5rem; }\r\n    .chatBox{ display: flex; }\r\n    .chatImg{ width: 4rem; height: 4rem; border-radius: 50%; border: 1px solid lightgray; margin: 1rem 0.7rem 1rem 1rem; }\r\n    .chatText{ margin: 0; font-size:1.1rem; max-width: 24rem; overflow-wrap: anywhere; height: fit-content; max-height: 15rem; overflow-y: auto; margin-top: 0.5rem; padding: 0.7rem 1rem 0.8rem; border: 1px solid lightgray; border-radius: 10px; }\r\n    .chatName{ margin: 1.1rem 0 0; font-weight: bold; font-size: 1.1rem; }\r\n\r\n    // 멤버 팝업 css\r\n    .member-openBtn{ margin-top: 1.1rem; padding: 0.5rem 2rem 0.6rem; border: 1px solid #14c1c7; border-radius: 10px; background-color: #14c1c7; color: white; }\r\n    .member-closeBox, .member-openBox{ width: 100%; text-align: center; }\r\n    .member-pop{ position: absolute; z-index:1100; top: 58%; left: 130%; width: 27rem; height: 50.4rem; transform: translate(-50%, -50%); background: #fff; border-radius: 30px; }\r\n    .chatMemberBox{ height: 42rem; margin-top: 3rem; overflow-y:scroll }\r\n    .member-closeBtn{ margin-top: 1.1rem; padding: 0.3rem 2rem 0.4rem; border-radius: 10px; background-color: #14c1c7; border: 1px solid #14c1c7; color:white;  }\r\n    .memberBox{ width: calc(100% - 0.7rem); padding: 0.7rem 0 0.7rem 0.7rem; display:flex; align-items: center; }\r\n    .memberImg{ width: 4rem; height: 4rem; border-radius: 50%; border: 1px solid lightgray; }\r\n    .memberText{ margin: 0; padding-left:0.5rem; font-size: 1.1rem; }\r\n    .nonData { height: 10rem; color: #999; font-size: 1.4rem; }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\nconst MemberChatPage = () => {\r\n\r\n    const id = useParams(); // 넘겨받은 id값\r\n    const [listAxios, setAxios] = useState(0); // list-useEffect axios의 값 존재 여부 저장\r\n    let [detailId, setId] = useState(null); // 팝업으로 띄울 room idx 값 저장 \r\n\r\n    // axios 저장 / list, chatModal\r\n    let [list, setList] = useState([])\r\n    let [detail, setDetail] = useState({chatDetail:[0], chatMember:[1]})\r\n\r\n    let [change, setChange] = useState(1);\r\n    let [search, setSearch] = useState('')\r\n    let [searchNo, setSearchNo] = useState('')\r\n    let [pageNum, setPageNum] = useState(1);\r\n    let pages = [];\r\n\r\n    //채팅창, 멤버 팝업\r\n    const [chatOn, setChatOn] = useState(false); \r\n    const [memberOn, setMemberOn] = useState(false); \r\n\r\n    const onOpenChat = (e) => {\r\n        setChatOn(!chatOn);\r\n        let idx = e.target.id\r\n        setId(idx)\r\n        //채팅창 팝업 창 띄울 시 body 스크롤\r\n        if(chatOn==false){\r\n            document.body.style.overflow = \"hidden\";\r\n        }else if(chatOn==true){\r\n            document.body.style.overflow = \"unset\";\r\n            setMemberOn(false);\r\n        }\r\n    }\r\n\r\n    const onOpenMember = () => {\r\n        setMemberOn(!memberOn);\r\n    }\r\n\r\n    console.log(list)\r\n\r\n    // 페이지네이션\r\n    const Pagination = (page) =>{ \r\n        setPageNum(page)\r\n        if(change==1){setChange(0)}else{setChange(1)} } // useEffect 재실행을 위해 change값을 변경\r\n    const PaginationNum = (e) =>{\r\n        let pageNum = e.target.id\r\n        Pagination(pageNum)\r\n    }\r\n    const PaginationArr = (e) =>{\r\n        let pageArr = e.target.value\r\n        Pagination(pageArr)\r\n    }\r\n    for(let i=list.startPage; i<=list.totalPage;i++){pages[i]=i}\r\n\r\n    // 조건검색\r\n    const searchInput = (e)=>{\r\n        e.preventDefault()\r\n        const searchInput = e.target.value;\r\n        setSearch(searchInput)\r\n    }\r\n    const Search = () =>{\r\n        setPageNum(1)\r\n        setSearchNo(search)\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    }\r\n    const Reset = () =>{\r\n        setSearch('')\r\n        let e = document.querySelector('.memberChatSearch')\r\n        e.value = '';\r\n        Search()\r\n    }\r\n\r\n    useEffect(async () => { // list-useEffect\r\n        const list = await axios.get(\"http://localhost:3001/admin/member/room?idx=\"+id.idx+\"&page=\"+pageNum+\"&title=\"+search)\r\n        setList(list.data)\r\n        let paginationClass = document.querySelectorAll('.paginationClass');\r\n        if(list.data.totalPage!==0){\r\n            for(let i=0; i<paginationClass.length; i++){\r\n                paginationClass[i].style.color = \"#888\";\r\n            }\r\n            let current = document.getElementById(pageNum);\r\n            current.style.color = \"#14c1c7\";\r\n        }\r\n        if(list.data.result.length !== 0){ setAxios(1) } // axios의 값 존재 여부 저장\r\n    }, [change]);\r\n\r\n    useEffect(async () => { // modal-useEffect\r\n        const info = await axios.get(\"http://localhost:3001/admin/member/room/detail?roomIdx=\"+detailId)\r\n        setDetail({chatDetail:info.data[0], chatMember:info.data[1]})\r\n    }, [chatOn]);\r\n\r\n    console.log(detail)\r\n\r\n    const Modal = () => {\r\n        return (\r\n            <div id=\"mw_temp\" className=\"mw\">\r\n                <div className=\"bg\"></div>\r\n                <div className=\"fg\">\r\n                    <div className=\"closeBtn\" onClick={onOpenChat}><i class=\"fas fa-times\"></i></div>\r\n                    <p className=\"popTitle\">{detail.chatDetail.length!==0 ? detail.chatDetail[0].title:<></>}</p>\r\n                    <div className=\"popBox\">\r\n                        <div className=\"chatContentBox\">\r\n                            {detail.chatDetail.length!==0 ?\r\n                                detail.chatDetail.map(chatData => (\r\n                                    <div className=\"chatBox\">\r\n                                        <img className=\"chatImg\" src={chatData.img===null?'/img/admin/noneImg.png':'/'+chatData.img}/>\r\n                                        <div>\r\n                                            <p className=\"chatName\">{chatData.name}</p>\r\n                                            <p className=\"chatText\">{chatData.content}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                )):<></>\r\n                            }\r\n                        </div>\r\n                        <div className=\"member-openBox\"><button className=\"member-openBtn\" onClick={onOpenMember}>참여멤버</button></div>\r\n                    </div>\r\n                    {memberOn? <MemberModal/>: ''}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const MemberModal = () => {\r\n        return (\r\n            <div className=\"member-pop\">\r\n                <div className=\"popBox\">\r\n                    <div className=\"chatMemberBox\">\r\n                        {detail.chatMember.length!==0 ?\r\n                            detail.chatMember.map(memberData => (\r\n                                <div className=\"memberBox\">\r\n                                    <img className=\"memberImg\" src={memberData.img===null?'/img/admin/noneImg.png':'/'+memberData.img}/>\r\n                                    <p className=\"memberText\">{memberData.name}</p>\r\n                                </div>\r\n                            )):<></>\r\n                        }\r\n                    </div>\r\n                    <div className=\"member-closeBox\"><button className=\"member-closeBtn\" onClick={onOpenMember}>닫기</button></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } \r\n\r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <MemberChatForm>\r\n            <div className=\"memberChatListBox\">\r\n                <p className=\"title\">회원관리 <i class=\"fas fa-chevron-right\"></i> 채팅방목록</p>\r\n                <div className=\"memberChatSearchBox\">\r\n                        <p>\r\n                            <input type=\"text\" className=\"memberChatSearch\" placeholder=\"채팅방 제목을 입력하세요\" onChange={searchInput}/>\r\n                            <input type=\"button\" className=\"searchBtn btn\" value=\"검색\" onClick={Search}/>\r\n                            <input type=\"button\" className=\"resetBtn btn\" value=\"초기화\" onClick={Reset}/>\r\n                        </p>\r\n                </div>\r\n                <div>\r\n                    <table>\r\n                        <tr>\r\n                            <th className=\"memberChatNum\">채팅방 번호</th>\r\n                            <th className=\"memberChatTitle\">채팅방 제목</th>\r\n                            <th className=\"memberChatDate\">생성날짜</th>\r\n                        </tr>\r\n                        {listAxios !== 0 ?\r\n                            list.result.length !== 0 ?\r\n                                list.result.map(rowData => (\r\n                                    <tr>\r\n                                        <td className=\"memberChatNum\">{rowData.idx}</td>\r\n                                        <td className=\"memberChatTitle chatTitle\"><div  id={rowData.idx} onClick={onOpenChat} className=\"contentOverflow\">[{rowData.type}] {rowData.title}</div></td>\r\n                                        <td className=\"memberChatDate\">{rowData.createdAt}</td>\r\n                                    </tr>\r\n                                )) :\r\n                                // rowData 가 없으면 나타냄\r\n                                <tr className=\"nonData\"><td colSpan=\"3\">' {searchNo} ' 에 대한 검색결과가 존재하지 않습니다</td></tr>\r\n                            : \r\n                            // member의 post 데이터가 없으면 나타냄\r\n                            <tr className=\"nonData\"><td colSpan=\"3\">채팅창이 존재하지 않습니다</td></tr>\r\n                        }\r\n                    </table>\r\n                </div>\r\n                <div className=\"pagination\">\r\n                    <ul>\r\n                        { list.startPage !== 1 ?\r\n                            <>\r\n                            <li onClick={PaginationArr} value=\"1\">《</li>\r\n                            <li onClick={PaginationArr} value={list.startPage-1}>〈</li>\r\n                            </> : <></> // startPage가 1이면 나타냄\r\n                        }\r\n                        { list.totalPage !== 0 ?\r\n                            pages.map(rowData => (\r\n                                list.startPage+5 > rowData ?\r\n                                <li onClick={PaginationNum} class=\"paginationClass\" id={rowData}>{rowData}</li>\r\n                                : <></>\r\n                            )) : <></> // pages가 없으면 나타냄\r\n                        }\r\n                        { list.endPage !== list.totalPage && list.endPage < list.totalPage ?\r\n                            <>\r\n                            <li onClick={PaginationArr} value={list.endPage+1}>〉</li>\r\n                            <li onClick={PaginationArr} value={list.totalPage}>》</li>\r\n                            </> : <></>\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"returnBtnBox\">\r\n                    <Link to= \"/admin/member\"><button className=\"returnBtn\">뒤로가기</button></Link>\r\n                </div>\r\n            </div>\r\n            {chatOn? <Modal/>: ''}\r\n            </MemberChatForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default MemberChatPage;","C:\\project\\us\\frontend\\src\\user\\main.jsx",["246","247","248","249","250"],"C:\\project\\us\\frontend\\src\\admin\\postPage.jsx",["251","252","253","254"],"import React, { useEffect, useState } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport '../../src/admin.css';\r\nimport axios from \"axios\";\r\n\r\nconst PostForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    ul { list-style:none; display: flex; }\r\n    ul li { padding: 0.6rem; font-size: 1.8rem; background-color: none; color: #888; cursor: pointer; font-weight: bold; }\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .postListBox{ background-color: white; margin: 13rem auto 10rem; width: 112rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    .postSearchBox{ display: flex; font-size:1.5rem; margin-top: 2rem; width: 100%; justify-content: end; margin-bottom:2rem; }\r\n    .postSearchBox p{ margin: 0 1rem; display: flex; align-items: center; }\r\n    .btn{ padding: 0.4rem 1.2rem }\r\n    .searchBtn{ background-color: #14c1c7; border: 1px solid white; color: white; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1.5rem; font-size: 1.3rem; }\r\n    .resetBtn{ background-color: white; border: 1px solid #14c1c7; color: #14c1c7; width: 7rem; height: 3.5rem; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); margin-left: 1rem; font-size: 1.3rem; }\r\n    select{ width:12rem; margin-right:1rem; border: 1px solid #14c1c7; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); }\r\n    select:focus, .postDate:focus{outline:none;}\r\n    .postDate{ border: 1px solid #14c1c7; border-radius: 5px; box-shadow: 2px 2px 2px 2px rgb(210,210,210); }\r\n    .postContent{ width:45%; }\r\n    .postContent a{ text-decoration: none; color: black; }\r\n    .postContent a:hover{ font-size: 1.45rem; color: #14c1c7; font-weight: bolder; }\r\n    .postRegist{ width:20%; }\r\n    .postDateText{ width:20%; }\r\n    .postDec{ width:15%; }\r\n    table { text-align: center; width: 100%; margin-top: 10px; border-collapse: collapse; border: 2px solid #9b9b9b; font-size:1.4rem }\r\n    table th, table td { border: 1px solid #9b9b9b; height: 3.8rem; }\r\n    table th { background-color: rgb(248, 250, 252); }\r\n    .nonData { height: 10rem; color: #999; font-size: 1.4rem;  }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\nconst PostPage = () => {\r\n\r\n    const [listAxios, setAxios] = useState(0); // useEffect axios의 값 존재 여부 저장\r\n    let [post, setPost] = useState([]);\r\n    let [pageNum, setPageNum] = useState(1);\r\n    let [change, setChange] = useState(1);\r\n    let [search, setSearch] = useState('');\r\n    let [dateStart, setDateStart] = useState('');\r\n    let [dateEnd, setDateEnd] = useState('')\r\n\r\n    let pages = [];\r\n\r\n    const Pagination = (page) =>{ \r\n        setPageNum(page)\r\n        if(change == 1){ setChange(0) }else{ setChange(1) } } // useEffect 재실행을 위해 change값을 변경\r\n\r\n    const PaginationNum = (e) =>{\r\n        let pageNum = e.target.id\r\n        Pagination(pageNum)\r\n    }\r\n\r\n    const PaginationArr = (e) =>{\r\n        let pageArr = e.target.value\r\n        Pagination(pageArr)\r\n    }\r\n\r\n    const Start = (e)=>{\r\n        e.preventDefault()\r\n        const dateStart = e.target.value;\r\n        setDateStart(dateStart)\r\n    }\r\n\r\n    const End = (e)=>{\r\n        e.preventDefault()\r\n        const dateEnd = e.target.value;\r\n        setDateEnd(dateEnd)\r\n    }\r\n\r\n    const searchSelect = (e)=>{\r\n        e.preventDefault()\r\n        const searchSelect = e.target.value;\r\n        setSearch(searchSelect)\r\n    }\r\n    \r\n    const Search = () =>{\r\n        setPageNum(1)\r\n        if(change==1){setChange(0)}else{setChange(1)} // useEffect 재실행을 위해 change값을 변경\r\n    }\r\n\r\n    const Reset = () =>{\r\n        setSearch('')\r\n        setDateStart('')\r\n        setDateEnd('')\r\n        let e1 = document.getElementById('startDate');\r\n        let e2 = document.getElementById('endDate');\r\n        let e3 = document.getElementById('report');\r\n        e1.value = '';\r\n        e2.value = '';\r\n        e3.value = '전체';\r\n        Search()\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const post = await axios.get(\"http://localhost:3001/admin/post?page=\" + pageNum + \"&report=\" + search + \"&date1=\" + dateStart + \"&date2=\" + dateEnd)\r\n        setPost(post.data)\r\n        let paginationClass = document.querySelectorAll('.paginationClass');\r\n        if(post.data.totalPage!==0){\r\n            for(let i=0; i<paginationClass.length; i++){\r\n                paginationClass[i].style.color = \"#888\";\r\n            }\r\n            let current = document.getElementById(pageNum);\r\n                current.style.color = \"#14c1c7\";\r\n        }\r\n        if(post.data.result.length !== 0){ setAxios(1) } // axios의 값 존재 여부 저장\r\n    }, [change]);\r\n\r\n    for(let i = post.startPage; i <= post.endPage; i++) { pages[i] = i }\r\n\r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <PostForm>\r\n                <div className=\"postListBox\">\r\n                <p className=\"title\">게시물관리</p>\r\n                    <div className=\"postSearchBox\">\r\n                        <p>구분</p>\r\n                        <select id=\"report\" onChange={searchSelect}>\r\n                            <option>전체</option>\r\n                            <option value=\"Y\">신고여부 : Y</option>\r\n                            <option value=\"N\">신고여부 : N</option>\r\n                        </select>\r\n                        <p>날짜</p>\r\n                        <input type=\"date\" className=\"postDate\" id=\"startDate\" onChange={Start}/>\r\n                        <p>~</p>\r\n                        <input type=\"date\" className=\"postDate\" id=\"endDate\" onChange={End}/>\r\n                        <input type=\"button\" className=\"searchBtn btn\" value=\"검색\" onClick={Search}/>\r\n                        <input type=\"button\" className=\"resetBtn btn\" value=\"초기화\" onClick={Reset}/>\r\n                    </div>\r\n                    <div>\r\n                        <table>\r\n                            <tr>\r\n                                <th className=\"postRegist\">작성자</th>\r\n                                <th className=\"postContent\">게시물 내용</th>\r\n                                <th className=\"postDateText\">게시물 생성 날짜</th>\r\n                                <th className=\"postDec\">게시물 신고 여부</th>\r\n                            </tr>\r\n                            { listAxios !== 0 ?\r\n                                post.result.length !== 0 ?\r\n                                    post.result.map(rowData => (\r\n                                        <tr>\r\n                                            <td className=\"postRegist\">{rowData.name}</td>\r\n                                            <td className=\"postContent\"><Link to={\"/admin/post/detail/\"+rowData.idx}>{rowData.content}</Link></td>\r\n                                            <td className=\"postDateText\">{rowData.createdAt}</td>\r\n                                            <td className=\"postDec\">{rowData.report}</td>\r\n                                        </tr>\r\n                                    )) : // rowData 가 없으면 나타냄\r\n                                    <tr className=\"nonData\"><td colSpan=\"4\">검색결과가 존재하지 않습니다</td></tr>\r\n                                : // post의 데이터가 없으면 나타냄\r\n                                <tr className=\"nonData\"><td colSpan=\"4\">작성된 게시물이 없습니다</td></tr>\r\n                            }\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"pagination\">\r\n                        <ul>\r\n                        { post.startPage !== 1 ?\r\n                            <>\r\n                            <li onClick={PaginationArr} value=\"1\">《</li>\r\n                            <li onClick={PaginationArr} value={post.startPage-1}>〈</li>\r\n                            </>\r\n                            : <></> // startPage가 1이면 나타냄\r\n                        }\r\n                        { post.totalPage !== 0 ?\r\n                            pages.map(rowData => (\r\n                                post.startPage+5 > rowData ?\r\n                                <li onClick={PaginationNum} class=\"paginationClass\" id={rowData}>{rowData}</li>\r\n                                : <></>\r\n                            )) : <></> // pages가 없으면 나타냄\r\n                        }\r\n                        { post.endPage !== post.totalPage && post.endPage < post.totalPage ?\r\n                            <>\r\n                            <li onClick={PaginationArr} value={post.endPage+1}>〉</li>\r\n                            <li onClick={PaginationArr} value={post.totalPage}>》</li>\r\n                            </> : <></>\r\n                        }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </PostForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default PostPage;","C:\\project\\us\\frontend\\src\\user\\FinishIdPage.jsx",["255","256","257","258","259","260","261","262","263"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport { Link,BrowserRouter as Router } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { matchPath, useParams } from \"react-router\";\r\nimport { UseParams } from \"react-router\";\r\n\r\nconst SuckFindId = (props) => {\r\n    const SuckFindIdcss = styled.div`\r\n    html{\r\n        background-color: rgb(248, 250, 252);\r\n    }\r\n    .body{\r\n        width: 50rem;\r\n        position:absolute; top:50%; left:50%; transform: translate(-50%, -50%);\r\n        padding: 2rem;\r\n    }\r\n    .topNum{\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n    .topNum img{\r\n        width: 18rem;\r\n    }\r\n    .twoKindBtn{\r\n        padding: 1.5rem 0; \r\n        font-size: 1.9rem; \r\n        font-weight: bolder;\r\n        color: white; \r\n        width: 48%; \r\n        margin: 3.5rem 0 0; \r\n        border-radius: 15px;\r\n        border:0; \r\n        background: #93a2b5;\r\n        margin-right: 5px;\r\n        cursor: pointer;\r\n    }\r\n    .twoKindBtn2{\r\n        padding: 1.5rem 0; \r\n        font-size: 1.9rem; \r\n        font-weight: bolder;\r\n        color: white; \r\n        width: 48%; \r\n        margin: 3.5rem 0 0;\r\n        border-radius: 15px;\r\n        border:0; \r\n        background: #4fd1c5;\r\n        cursor: pointer;\r\n    }\r\n    .topNum{\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n    span{\r\n        color: gray;\r\n    }\r\n    `;\r\n    const urldata = useParams();\r\n    console.log(urldata)\r\n    const [data ,setData] = useState(urldata)\r\n    \r\n    const usedata = {\r\n        url : data\r\n    };\r\n\r\n    return (\r\n        <SuckFindIdcss>\r\n        <div className=\"body\">\r\n            <div className=\"findtopnav\">\r\n            <div className=\"topNum\">\r\n            <img src=\"/img/us_logo_forLogin.png\"></img>\r\n                </div>\r\n                <h1>회원님의 이메일 주소는 <span>{urldata.someInfo}</span> 입니다.</h1>\r\n                <hr/>\r\n            </div>\r\n\r\n            <div className=\"twoBtn\">\r\n                <Link to=\"/FindIdPw2\">\r\n                <button className=\"twoKindBtn\">\r\n                    비밀번호 찾기\r\n                </button>\r\n                </Link>\r\n                <Link to=\"/\">\r\n                <button className=\"twoKindBtn2\">\r\n                로그인\r\n                </button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n        </SuckFindIdcss>\r\n    )\r\n}\r\n    \r\nexport default SuckFindId;","C:\\project\\us\\frontend\\src\\user\\SignInPage.jsx",["264","265","266","267","268","269","270"],"import React, { useState,useEffect ,Component } from \"react\";\r\n\r\nimport { Link, BrowserRouter as Router } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nconst Login = styled.div`\r\nhtml{\r\n    background: rgb(248, 250, 252);\r\n}\r\n\r\ninput, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n\r\n.body{\r\n    width: 50rem;\r\n    padding: 2rem;\r\n    position:absolute; top:50%; left:50%; transform: translate(-50%, -50%);\r\n}\r\n.logo{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.logo img{\r\n    width: 18rem;\r\n}\r\n.login_top input{\r\n    border-radius: 12px;\r\n    width: 49rem;\r\n    height: 6rem;\r\n    margin-bottom: 0.5rem;\r\n    border: 1px solid lightgray;\r\n    font-size:2rem;\r\n    background-color: #fff;\r\n    padding-left: 1rem;\r\n}\r\n.login_top input:hover{\r\n    border: 1px solid mediumaquamarine;\r\n}\r\nbutton{\r\n    border: 1px solid black;\r\n    border-radius: 12px;\r\n    cursor: pointer;\r\n}\r\n.login_btn2{\r\n    display: flex;\r\n    align-items: baseline;\r\n        cursor: pointer;\r\n}\r\n.signup{\r\n    background: #4fd1c5;\r\n    width: 24.5rem;\r\n    margin-right: 5px;\r\n    color: white; \r\n    border:0; \r\n    font-size: 1.9rem;\r\n    padding: 1.5rem 0;\r\n    font-weight: 600;\r\n}\r\n.find{\r\n    background: #4fd1c5;\r\n    width: 24.5rem;\r\n    color: white; \r\n    border:0; \r\n    margin-left:0.5rem;\r\n    font-size: 1.9rem;\r\n    padding: 1.5rem 0;\r\n    font-weight: 600;\r\n}\r\n.login_btn_box{\r\n    margin-top: 3rem;\r\n}\r\n.login_btn1 {\r\n    border-radius: 15px;\r\n    border:0; \r\n    background: #4fd1c5;\r\n    width: 100%; \r\n    padding: 1.5rem 0; \r\n    font-size: 2rem; \r\n    color: white; \r\n    margin-bottom: 5px;\r\n    font-weight: 600;\r\n}\r\n.login_btn1:disabled{ background: #dfdfdf; }\r\n.forheigth{\r\n    height:69px\r\n}\r\n\r\n.login-text{\r\n    font-size:1.5rem;\r\n}\r\n.red{\r\n    color:red;\r\n    font-size:1.2rem;\r\n    margin: 0;\r\n}\r\n`;\r\n\r\nlet emailDisable = false;\r\nlet passwordDisable = false;\r\n\r\nconst LoginPage = () => {\r\n    const formRef = React.createRef();\r\n\r\n    function onSubmit(event){\r\n        \r\n    }\r\n\r\n    \r\n\r\n    //이메일, 비밀번호 확인\r\n    const [email, setEmail] = React.useState('')\r\n    const [password, setPassword] = React.useState('')\r\n\r\n    const [display, setDisplay] = useState(\"none\")\r\n    const [display2, setDisplay2] = useState(\"none\")\r\n\r\n    const changeDispaly = (display) => {\r\n        setDisplay(display)\r\n    }\r\n    const changeDispaly2 = (display2) => {\r\n        setDisplay2(display2)\r\n    }\r\n    var alltruecnt = 0;\r\n\r\n\r\n    const checkEmail = (e) => {\r\n        e.preventDefault();\r\n        var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i\r\n        // 형식에 맞는 경우 true 리턴\r\n        console.log('이메일 유효성 검사 :: ', regExp.test(e.target.value))\r\n\r\n        const inputId = e.target.value;\r\n        setEmail(inputId);\r\n        if (regExp.test(e.target.value) === false) {\r\n            changeDispaly(\"block\")\r\n            emailDisable = false\r\n        } else {\r\n            changeDispaly(\"none\")\r\n            emailDisable = true\r\n        }\r\n        idDisabled()\r\n\r\n    }\r\n\r\n    //비밀번호 유효성 검사\r\n    const checkPassword = (e) => {\r\n        e.preventDefault();\r\n        //  8 ~ 10자 영문, 숫자 조합\r\n        var regExp = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/\r\n        // 형식에 맞는 경우 true 리턴\r\n        console.log('비밀번호 유효성 검사 :: ', regExp.test(e.target.value))\r\n        const inputPw = e.target.value;\r\n        setPassword(inputPw);\r\n        if (regExp.test(e.target.value) === false) {\r\n            changeDispaly2(\"block\")\r\n            passwordDisable = false\r\n\r\n        } else {\r\n            changeDispaly2(\"none\")\r\n            passwordDisable = true\r\n\r\n        }\r\n        idDisabled()\r\n    }\r\n\r\n    const [disabled, setDisabled] = React.useState('disabled');\r\n\r\n    const idDisabled = () => {\r\n        if (emailDisable === true && passwordDisable === true) {\r\n            setDisabled('');\r\n        } else {\r\n            setDisabled('disabled');\r\n        }\r\n    }\r\n\r\n    //axios\r\n    //http://localhost:3001/member/login\r\n    const onClickLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        axios.post('/member/login',null,{\r\n            //params을 config로 보내주려고 중간데이터 null넣어쥼!\r\n            params: {\r\n            'email': email,\r\n            'userPw': password\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(res)\r\n\r\n            // 작업 완료 되면 페이지 이동(새로고침)\r\n            if(res.data == false){\r\n                alert(\"아이디와 패스워드가 일치하지 않습니다.\");\r\n            } else{\r\n                document.location.href = `/main?idx=${res.data}`\r\n            }\r\n        })\r\n        .catch()\r\n    }\r\n    \r\n    useEffect(() => {\r\n        axios.get('/member/login')\r\n            .then(res => console.log(res))\r\n            .catch()\r\n    }, [])\r\n\r\n\t// function getLocation() {\r\n    //     if (navigator.geolocation) { // GPS를 지원하면\r\n    //         navigator.geolocation.getCurrentPosition(function(position) {\r\n    //             alert(position.coords.latitude + ' ' + position.coords.longitude);\r\n    //         }, function(error) {\r\n    //             console.error(error);\r\n    //         }, {\r\n    //             enableHighAccuracy: false,\r\n    //             maximumAge: 0,\r\n    //             timeout: Infinity\r\n    //         });\r\n    //     } else {\r\n    //         alert('GPS를 지원하지 않습니다');\r\n    //     }\r\n    // }\r\n    // getLocation();\r\n\r\n    return (\r\n        <Login>\r\n            <div className=\"body\">\r\n                <div className=\"logo\">\r\n                    <img src=\"img/us_logo_forLogin.png\"></img>\r\n                </div>\r\n                <div>\r\n                    <form className=\"Login\" ref={formRef} onSubmit={onSubmit}>\r\n                        <div className=\"login_top\">\r\n                            {/* 이메일 인풋창 */}\r\n                            <p className='login-text'>이메일</p>\r\n                            <div className=\"forheigth\">\r\n                                <input id=\"email\" value={email} onChange={checkEmail} placeholder=\"이메일을 입력해주세요.\" />\r\n                                <p className=\"red\" style={{ display: display }}>* 이메일 양식을 확인해주세요.</p>\r\n                            </div>\r\n                            {/* 비밀번호 인풋 */}\r\n                            <p className='login-text'>비밀번호</p>\r\n                            <div className=\"forheigth\">\r\n                                <input id=\"pw\" value={password} onChange={checkPassword} placeholder=\"비밀번호를 입력해주세요.\" type=\"password\" />\r\n                                <p className=\"red\" style={{ display: display2 }}>* 영문,숫자,특수문자 포함 8자 이상 입력해주세요.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"login_btn_box\">\r\n                            {/* 로그인버튼 , 회원가입버튼*/}\r\n                            \r\n                                <button className=\"login_btn1\" type=\"button\" disabled={disabled} onClick={onClickLogin} >로그인</button>\r\n                            \r\n                        </div>\r\n\r\n                        \r\n                        {/* 회원가입 버튼 클릭 -> /signup페이지로 이동 */}\r\n                    </form>\r\n                    <div className=\"login_btn2\">\r\n                            <Link to=\"/Regist1\">\r\n                                <button className=\"signup\">\r\n                                    회원가입\r\n                                </button>\r\n                            </Link>\r\n\r\n                            <Link Link to=\"/FindIdPw\">\r\n                                <button className=\"find\">이메일/비밀번호 찾기</button>\r\n                            </Link>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        </Login>\r\n    )\r\n}\r\nexport default LoginPage;","C:\\project\\us\\frontend\\src\\user\\mainMapPage.jsx",["271"],"import React from \"react\";\r\nimport Header from \"../UserComponents/header\";\r\nimport MainProfile from \"../UserComponents/mainProfile\";\r\nimport MainMap from \"../UserComponents/mainMap\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MainForm = styled.div`\r\n    *{ text-decoration:none; }\r\n\r\n    .container{ padding-top: 1.5rem; max-width: 100rem; margin: 0 auto; }\r\n    \r\n    .sec_location_box { border-top: 1.5px solid #222; }\r\n`;\r\n\r\nconst MainMapPage = () =>{\r\n    const param = window.location.search.split('=')[1]\r\n\r\n    return (\r\n        <>\r\n        <Header/>\r\n        <MainForm>\r\n            <div className=\"container\">\r\n                <MainProfile idx={param}/>\r\n                <MainMap idx={param}/>\r\n            </div>\r\n        </MainForm>\r\n        </>\r\n    );\r\n} \r\n\r\nexport default MainMapPage;","C:\\project\\us\\frontend\\src\\user\\FinishPwPage.jsx",["272","273"],"import React from \"react\";\r\nimport { Link,BrowserRouter as Router } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nconst FinFindidpw = () => {\r\n    const Findidpw = styled.div`\r\n    html{\r\n        background-color: rgb(248, 250, 252);\r\n    }\r\n    .body{\r\n        width: 50rem;\r\n        position:absolute; top:50%; left:50%; transform: translate(-50%, -50%);\r\n        padding: 2rem;\r\n    }\r\n    .topNum{\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n    .topNum img{\r\n        width:18rem\r\n    }\r\n    .findtopnav {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n        margin-top: 2rem;\r\n    }\r\n    .findtopnav p{\r\n        font-size: 1.9rem;\r\n        margin: 1rem 0;\r\n    }\r\n    .findtopnav h2{\r\n        border-bottom: 2px black;\r\n    }\r\n    .finfind { text-align: center; margin-top: 3rem;}\r\n    .finfind button{\r\n        padding: 1.5rem 0; \r\n        font-size: 1.9rem; \r\n        font-weight: bold;\r\n        color: white; \r\n        width: 80%; \r\n        border-radius: 15px;\r\n        border:0; \r\n        background: #4fd1c5;\r\n        cursor: pointer;\r\n    }\r\n    .finfind button:hover{\r\n        background-color: lightsteelblue;\r\n    }\r\n    `;\r\n    return (\r\n        <Findidpw>\r\n        <div className=\"body\">\r\n            <div className=\"topNum\">\r\n            <img src=\"/img/us_logo_forLogin.png\"></img>\r\n                </div>\r\n            <div className=\"findtopnav\">\r\n                <p>임시 비밀번호를 전송하였습니다</p>\r\n                <p>전송 받은 임시 비밀번호로 로그인 해주세요</p>\r\n            </div>\r\n            \r\n            <div className=\"finfind\">\r\n                <Link to=\"/\">\r\n                <button>\r\n                    로그인\r\n                </button>\r\n                </Link>\r\n            </div>\r\n            \r\n        </div>\r\n        </Findidpw>\r\n    )\r\n}\r\n    \r\nexport default FinFindidpw;","C:\\project\\us\\frontend\\src\\user\\RegistPage.jsx",["274","275","276","277","278","279","280","281","282","283","284","285","286"],"import React, { useState, Component } from \"react\";\r\nimport { Link, BrowserRouter as Router } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport { useEffect } from \"react\";\r\nimport axios from 'axios';\r\n\r\nconst Regi1 = styled.div`\r\nhtml{\r\n    background: rgb(248, 250, 252);\r\n}\r\n\r\n    input, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n\r\n    input[type=\"checkbox\"] { -webkit-appearance: auto; }\r\n\r\n    .body{\r\n        width: 50rem;\r\n        padding: 2rem;\r\n        position:absolute; top:50%; left:50%; transform: translate(-50%, -50%);\r\n    }\r\n    .topNum{\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    \r\n    }\r\n    .topNum img{\r\n        width: 18rem;\r\n    }\r\n    .topnav h2 {\r\n        color: #4c4c4c;\r\n        text-align: center;\r\n    }\r\n    \r\n    .forregi {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin-top: 4rem;\r\n    }\r\n    .forregi input{\r\n        background-color: #F8FAFC;\r\n        border-bottom: 1px solid lightgray;\r\n        height: 5rem;\r\n        color: #222;\r\n        border-left: none;\r\n        border-right: none;\r\n        margin-bottom: 1rem;\r\n        font-size: 2rem;\r\n        width:100%\r\n    }\r\n\r\n    .checkbtn input{\r\n        position: relative;\r\n        bottom:-0.4rem;\r\n        height: 2rem;\r\n        width: auto;\r\n        margin-bottom: 0;\r\n        margin-right: 1rem;\r\n    }\r\n\r\n    .checkbtn span{\r\n        color: blue;\r\n        font-weight: bold;\r\n        \r\n    }\r\n\r\n    .activebtn button{\r\n        padding: 1.5rem 0; \r\n        font-size: 1.9rem; \r\n        font-weight: bold;\r\n        color: white; \r\n        width: 100%; \r\n        margin: 3.5rem 0 0;\r\n        border-radius: 15px;\r\n        border:0; \r\n            background: #4fd1c5;\r\n        cursor: pointer;\r\n    }\r\n    .activebtn button:disabled{ background: #dfdfdf; }\r\n\r\n    \r\n\r\n    .red{\r\n        color:red;\r\n        font-size:1.2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    .checkbtn p{\r\n    font-size: 15px;\r\n    position: relative;\r\n    top: -7px;\r\n    left: -4px;\r\n    z-index: 10;\r\n    }\r\n    \r\n    .forheigth{\r\n        height:75px\r\n    }\r\n    .checkinput{\r\n        border: 1px red\r\n    }\r\n    .checkimg{\r\n        position: relative;\r\n        top: 6px;\r\n    }\r\n    input[id=\"check\"] {\r\n        display: none;\r\n    }\r\n    input[id=\"check2\"] {\r\n        display: none;\r\n    }\r\n    select { width: 200px; /* 원하는 너비설정 */ padding: .8em .5em; /* 여백으로 높이 설정 */ font-family: inherit; /* 폰트 상속 */ background: url(https://farm1.staticflickr.com/379/19928272501_4ef877c265_t.jpg) no-repeat 95% 50%; /* 네이티브 화살표 대체 */ border: 1px solid lightgray; border-radius: 0px; /* iOS 둥근모서리 제거 */ -webkit-appearance: none; /* 네이티브 외형 감추기 */ -moz-appearance: none; appearance: none; }\r\n    input[type=checkbox]{height: 0;width: 0;visibility: hidden;}\r\n    label {cursor: pointer;text-indent: -9999px;width: 45px;height: 28px;background: grey;display: block;border-radius: 100px;position: relative; top: -3px; margin-right: 8px;}\r\n    label:after {content: '';position: absolute;top: 5px;left: 5px;width: 19px;height: 19px;background: #fff;border-radius: 90px;transition: 0.3s;}\r\n    input:checked + label {background: #4fd1c5;}\r\n    input:checked + label:after {left: calc(100% - 5px);transform: translateX(-100%);}\r\n    label:active:after {width: 45px;}\r\n    .checkbtn p {\r\n        display:flex;\r\n    }\r\n    `;\r\n    let emailDisable = false;\r\n    let passwordDisable = false;\r\n    let nameDisable = false;\r\n    let hpDisable = false;\r\n    let btnDisable =false;\r\n    let btn2Disable =false;\r\nconst RegistPage1 = () => {\r\n\r\n    const formRef = React.createRef();\r\n    const inputRef = React.createRef();\r\n\r\n    //이메일, 비밀번호 확인\r\n    const [email, setEmail] = React.useState('')\r\n    const [password, setPassword] = React.useState('')\r\n    const [name,setName] = React.useState('')\r\n    const [hp,setHp] = React.useState('')\r\n    const [gender,setGender] = React.useState('남')\r\n    const [checkbox1,setCheckBox1] = React.useState('')\r\n    const [checkbox2,setCheckBox2] = React.useState('')\r\n    const [checkedInputs, setCheckedInputs] = useState([]);\r\n    const [checkedInputs2, setCheckedInputs2] = useState([]);\r\n\r\n    // 랜덤코드 저장\r\n    const [random, setRandom] = useState('');\r\n\r\n    //에러메세지 온오프\r\n    const [display, setDisplay] = useState(\"none\")\r\n    const [display2, setDisplay2] = useState(\"none\")\r\n    const [display3, setDisplay3] = useState(\"none\")\r\n    const [display4, setDisplay4] = useState(\"none\")\r\n\r\n    useEffect (()=>{\r\n        const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'\r\n        const stringLength = 6\r\n        let randomstring = ''\r\n        for (let i = 0; i < stringLength; i++) {\r\n            const rnum = Math.floor(Math.random() * chars.length)\r\n            randomstring += chars.substring(rnum, rnum + 1)\r\n        }\r\n        console.log(randomstring);\r\n        setRandom(randomstring);\r\n        console.log(\"랜덤 : \" + random)\r\n    },[])\r\n    \r\n    \r\n    const changeDispaly = (display) => {\r\n        setDisplay(display)\r\n    }\r\n    const changeDispaly2 = (display2) => {\r\n        setDisplay2(display2)\r\n    }\r\n    const changeDispaly3 = (display3) => {\r\n        setDisplay3(display3)\r\n    }\r\n    const changeDispaly4 = (display4) => {\r\n        setDisplay4(display4)\r\n    }\r\n    const changeGender = (gender) => {\r\n        setGender(gender)\r\n    }\r\n    //정규식 체크\r\n    const checkEmail = (e) => {\r\n        e.preventDefault();\r\n\r\n        var text = document.getElementById('email').value;\r\n\r\n        var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i\r\n        // 형식에 맞는 경우 true 리턴\r\n        const emailV = e.target.value;\r\n        setEmail(emailV)\r\n\r\n        if (regExp.test(e.target.value) === false) {\r\n            changeDispaly(\"block\")\r\n            emailDisable = false\r\n        } else {\r\n            changeDispaly(\"none\")\r\n            emailDisable = true\r\n        }\r\n        idDisabled()\r\n\r\n    }\r\n\r\n    ///비밀번호 유효성 검사\r\n    const checkPassword = (e) => {\r\n        e.preventDefault();\r\n        //  8 ~ 10자 영문, 숫자 조합\r\n        var regExp = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/\r\n        // 형식에 맞는 경우 true 리턴\r\n        const pwV = e.target.value;\r\n        setPassword(pwV)\r\n        if (regExp.test(e.target.value) === false) {\r\n            changeDispaly2(\"block\")\r\n            \r\n            passwordDisable = false\r\n        } else {\r\n            changeDispaly2(\"none\")\r\n            passwordDisable = true\r\n        }\r\n        idDisabled()\r\n\r\n    }\r\n\r\n    //한글이름 유효성 검사\r\n    const checkName = (e) => {\r\n        e.preventDefault();\r\n        var regExp = /^[가-힣]{2,15}$/;\r\n        const pwV = e.target.value;\r\n        setName(pwV)\r\n        if (regExp.test(e.target.value) === false) {\r\n            changeDispaly3(\"block\")\r\n            nameDisable = false\r\n        } else {\r\n            changeDispaly3(\"none\")\r\n            nameDisable = true\r\n        }\r\n        idDisabled()\r\n\r\n    }\r\n\r\n    //핸드폰버노 유효성 검사\r\n    const checkPh = (e) => {\r\n        e.preventDefault();\r\n        var regExp = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;\r\n        const pwV = e.target.value;\r\n        setHp(pwV)\r\n        if (regExp.test(e.target.value) === false) {\r\n            changeDispaly4(\"block\")\r\n            hpDisable = false\r\n        } else {\r\n            changeDispaly4(\"none\")\r\n            hpDisable = true\r\n        }\r\n        idDisabled()\r\n\r\n    }\r\n\r\n    const changeHandler = (checked, id) => {\r\n        if (checked) {\r\n            setCheckedInputs([...checkedInputs, id]);\r\n            console.log(\"체크 반영 완료\");\r\n            btnDisable = true;\r\n            setCheckBox1(\"Y\")\r\n\r\n        } else {\r\n            setCheckedInputs(checkedInputs.filter(el => el !== id));\r\n            console.log(\"체크 해제 반영 완료\");\r\n            btnDisable = false;\r\n            setCheckBox1(\"N\")\r\n\r\n        }\r\n        idDisabled()\r\n    };\r\n\r\n    const changeHandler2 = (checked2, id2) => {\r\n        if (checked2) {\r\n            setCheckedInputs2([...checkedInputs2, id2]);\r\n            console.log(\"체크 반영 완료\");\r\n            setCheckBox2(\"Y\")\r\n            btn2Disable = true;\r\n\r\n        } else {\r\n            setCheckedInputs2(checkedInputs2.filter(el => el !== id2));\r\n            console.log(\"체크 해제 반영 완료\");\r\n            setCheckBox2(\"N\")\r\n            btn2Disable = false;\r\n\r\n        }\r\n        idDisabled()\r\n    };\r\n\r\n    const checkGender = (e) => {\r\n        e.preventDefault();\r\n\r\n        console.log(e.target.value)\r\n        if(e.target.value == 1){\r\n            changeGender(\"남\")\r\n        }else{\r\n            changeGender(\"여\")\r\n        }\r\n    }\r\n    //버튼활성화\r\n    const [disabled, setDisabled ] = React.useState('disabled');\r\n\r\n    const idDisabled = () => {\r\n        if(emailDisable===true&&passwordDisable===true&&nameDisable===true&&hpDisable===true&&btnDisable===true&&btn2Disable==true){\r\n            setDisabled('');\r\n        }else{\r\n            setDisabled('disabled');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // axios 제출\r\n    const goRegist = async () => {\r\n        let ag1 = \"Y\";\r\n        let ag2 = \"Y\";\r\n        let log = await axios.post('http://localhost:3001/member/regist?email='+email+\"&userPw=\"+password+\"&name=\"+name+\"&tel=\"+hp+\"&gender=\"+gender+\"&code=\"+random+\"&agreement1=\"+ag1+\"&agreement2=\"+ag2)\r\n        if(log.data===true){\r\n            alert('회원가입이 완료되었습니다. 로그인 페이지에서 로그인 해주세요!')\r\n            window.location.href=\"/\"\r\n        }else{\r\n            alert('올바르지 않거나 중복된 정보입니다. 다시 입력해 주세요!')\r\n        }\r\n    }\r\n    return (\r\n        <Regi1>\r\n            <div className=\"body\">\r\n                <div className=\"topnav\">\r\n                    <div className=\"topNum\">\r\n                    <img src=\"img/us_logo_forLogin.png\"></img>\r\n                    </div>\r\n                    <h2>US 에 처음 오신 것을 환영합니다</h2>\r\n                </div>\r\n\r\n                <form className=\"forregi\" ref={formRef}>\r\n                    <div className=\"forheigth\">\r\n                        <input id=\"email\" onChange={checkEmail} placeholder=\"이메일을 입력해주세요.\" />\r\n                        <p className=\"red\" style={{ display: display }}>* 이메일 양식을 확인해주세요.</p>\r\n                    </div>\r\n                    <div className=\"forheigth\">\r\n                        <input id=\"pw\" onChange={checkPassword} placeholder=\"비밀번호를 입력해주세요.\" type=\"password\" />\r\n                        <p className=\"red\" style={{ display: display2 }}>* 영문,숫자,특수문자 포함 8자 이상 입력해주세요.</p>\r\n                    </div>\r\n                    <div className=\"forheigth\">\r\n                        <input id=\"koreaName\" onChange={checkName} placeholder=\"이름을 입력해주세요.\" />\r\n                        <p className=\"red\" style={{ display: display3 }}>* 한글 2글자 이상 입력해주세요.</p>\r\n                    </div>\r\n                    <div className=\"forheigth\">\r\n                        <input id=\"ph\" onChange={checkPh} placeholder=\"휴대폰번호를 입력해주세요.\" />\r\n                        <p className=\"red\" style={{ display: display4 }}>* 전화번호를 다시 입력해 주세요. ('-'제외)</p>\r\n                    </div>\r\n                    <div>\r\n                    <select className=\"choiceGender\" onChange={checkGender}>\r\n                        <option value=\"1\">남성</option>\r\n                        <option value=\"2\">여성</option>\r\n                    </select>\r\n                    </div>\r\n                    <div className=\"checkbtn\">\r\n\r\n                        <p><input type=\"checkbox\" className=\"checkinput\" id=\"check\" onChange={e => { changeHandler(e.currentTarget.checked, 'check'); }} checked={checkedInputs.includes('check') ? true : false} />\r\n                            <label id=\"check\" htmlFor=\"check\">Toggle</label>\r\n                            <span>이용약관</span> 에 동의합니다</p>\r\n\r\n                        <p><input type=\"checkbox\" className=\"checkinput\" id=\"check2\" onChange={e => { changeHandler2(e.currentTarget.checked, 'check2'); }} checked={checkedInputs2.includes('check2') ? true : false} />\r\n                            <label id=\"check2\" htmlFor=\"check2\">Toggle</label>\r\n                            <span>개인 정보 보호 약관</span> 에 동의합니다</p>\r\n                    </div>\r\n                    <div className=\"activebtn\">\r\n                            <button type=\"button\"\r\n                                onClick={goRegist} disabled={disabled}>\r\n                                회원가입\r\n                            </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </Regi1>\r\n    )\r\n}\r\nexport default RegistPage1;","C:\\project\\us\\frontend\\src\\user\\FindIdPage.jsx",["287","288","289","290","291"],"import React, { useState , useEffect ,Component } from \"react\";\r\nimport { Link,BrowserRouter as Router } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nconst FindidpwStyled = styled.div`\r\n    html{\r\n        text-decoration:none;\r\n        background-color: rgb(248, 250, 252);\r\n    }\r\n    .forheigth{ height:80px }\r\n    .red{\r\n        color:red;\r\n        font-size:1.2rem;\r\n        margin: 0;\r\n    }\r\n    *{ text-decoration:none; box-sizing: border-box; }\r\n    input, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n    .body{\r\n        width: 55rem;\r\n        padding: 2rem;\r\n        position:absolute; top:50%; left:50%; transform: translate(-50%, -50%);\r\n    }\r\n    .findtopnav {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n    }\r\n    .findComment{ margin: 3rem 0; }\r\n    .findComment p{\r\n        text-align: left;\r\n        font-size: 2rem;\r\n        color: #222;\r\n        margin: 0;\r\n        word-break : keep-all;\r\n    }\r\n    .findtopnav h2{\r\n        color: #222;\r\n        font-size: 3.5rem;\r\n    }\r\n    .phinput input{\r\n        border: none;\r\n        background-color: #fff;\r\n        width: 100%;\r\n        height: 6rem;\r\n        color: black;\r\n        margin-bottom: 1rem;\r\n        font-size: 2rem;\r\n        border: 1px solid lightgray;\r\n        border-radius: 12px;\r\n        padding-left: 1rem;\r\n        font-size:1.5rem;\r\n    }\r\n    .finregi { margin-top: 1rem;}\r\n    .finregi button{\r\n        display: flex;\r\n        padding: 1.5rem 0;\r\n        font-size: 1.9rem;\r\n        font-weight: bolder;\r\n        color: white;\r\n        width: 100%;\r\n        border-radius: 15px;\r\n        border: 0;\r\n        background: #4fd1c5;\r\n        justify-content: center;\r\n        margin-top: 0.5rem;\r\n        cursor: pointer;\r\n    }\r\n    .finregi button:disabled{ background: #dfdfdf; }\r\n    .ph{ font-size:1.5rem; }\r\n    `;\r\n\r\nlet hpDisable = false;\r\nconst Findidpw = () => {    \r\n    const formRef = React.createRef();\r\n    //휴대폰번호 저장\r\n    const [display4 ,setDisplay4] = useState(\"none\")\r\n    const [handp ,setHandp] = React.useState('');\r\n\r\n    //핸드폰버노 유효성 검사\r\n    const changeDispaly4 = (display4) => {\r\n        setDisplay4(display4)\r\n    }\r\n\r\n     //핸드폰버노 유효성 검사\r\n    const checkPh = (e) => {\r\n        e.preventDefault();\r\n        const regExp = /^01([0|1|6|7|8|9])-?([0-9]{4})-?([0-9]{4})$/;\r\n        const ph = e.target.value;\r\n        setHandp(ph)\r\n        if (!regExp.test(ph)) {\r\n            changeDispaly4(\"block\")\r\n            hpDisable = false\r\n        } else {\r\n            changeDispaly4(\"none\")\r\n            hpDisable = true\r\n        }\r\n        idDisabled()\r\n    }\r\n    //버튼 활성화\r\n    const [disabled, setDisabled ] = React.useState('disabled');\r\n    const idDisabled = () => {\r\n        if(hpDisable===true){\r\n            setDisabled('');\r\n        }else{\r\n            setDisabled('disabled');\r\n        }\r\n    }\r\n    //axios\r\n    //http://localhost:3001/member/login\r\n    const searchEmail = (e) => {\r\n        e.preventDefault();\r\n\r\n        axios.post('/member/findId',null,{\r\n            //params을 config로 보내주려고 중간데이터 null넣어쥼!\r\n            params: {\r\n            'tel': handp\r\n            }\r\n        })\r\n        .then(res => {\r\n            if(res.data == false){\r\n                alert(\"존재하지 않는 전화번호 입니다\")\r\n            }else{\r\n                window.location.href=\"/SuckFindId/\"+ res.data\r\n            }\r\n        })\r\n        .catch()\r\n    }\r\n    return (\r\n        <FindidpwStyled>\r\n            <div className=\"body\">\r\n                <div className=\"findtopnav\">\r\n                    <h2>이메일 찾기</h2>\r\n                    <hr/>\r\n                    <div className=\"findComment\">\r\n                        <p>가입 시 등록한 휴대폰 번호를 입력하면\r\n                        이메일 주소의 일부를 알려드립니다.</p>\r\n                    </div>\r\n                </div>\r\n                <form className=\"findemail\" ref={formRef}>\r\n                    <div className=\"ph\">\r\n                        <p>휴대폰 번호</p>\r\n                        <div className=\"phinput forheigth\">\r\n                        <input type=\"text\"   id=\"phInput\" value={handp} onChange={checkPh} placeholder=\"휴대폰번호를 입력해주세요.\"/>\r\n                        <p className=\"red\"  style={{display:display4}}>* 전화번호를 다시 입력해 주세요. ('-'제외)</p>  \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"finregi\">\r\n                        <button className=\"activebtn\" type=\"button\" disabled={disabled} onClick={searchEmail}>이메일 찾기</button>\r\n                    </div>    \r\n                </form>\r\n            </div>\r\n        </FindidpwStyled>\r\n    )\r\n}\r\n    \r\nexport default Findidpw;","C:\\project\\us\\frontend\\src\\user\\mypage.jsx",["292","293","294","295"],"import React, {useEffect, useState} from \"react\";\r\nimport Header from \"../UserComponents/header\";\r\n// import MypageSideBar from \"../components/mypageSideBar\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst MypageWrap = styled.div`\r\n* { text-decoration:none; }\r\nul, li { list-style: none; padding:0; margin: 0;}\r\ninput, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n.container { max-width:100rem; margin: 0 auto; }\r\n.navBar { float: left; width: 12rem; padding:5rem 3rem 3rem 2rem; }\r\n.menuLink { margin-bottom: 4rem; color: #555; cursor: pointer; font-size: 1.6rem; }\r\n.menuLink.on { font-weight: 600; color: #14c1c7; }\r\n.menuLink:hover { color:#14c1c7; font-weight: 600; }\r\n.content { padding: 4rem 3rem 5rem 6rem; overflow: hidden; border-left: 1px solid rgba(0,0,0,0.1);}\r\n.profileItem { display: flex; position: relative; align-items: center; margin-bottom: 2.5rem; }\r\n.profileFirst { margin-left: -1.5rem; margin-bottom: 4rem; }\r\n.profileList { margin-left: 9rem; }\r\n.privacy { margin-left: -1rem; }\r\n.privacy .section1 { width: 100%; font-size: 1.5rem; color: #777; }\r\n.privacy .section1 .star { color: #14c1c7; font-size: 1.5rem; margin-left: 0; }\r\n.privacy .section1 span { font-size: 1.3rem; color: #14c1c7; margin-left: 3rem; }\r\n.section1 { width: 6rem; position: relative; right:3rem; font-size: 1.4rem; text-align: left; font-weight: 600;}\r\n.section2 { width: 80%; }\r\n.modifyImg { color: #14c1c7; font-weight: bold; cursor: pointer; font-size: 1.4rem; margin-top: 1rem; }\r\n.profileName { font-size: 1.7rem; font-weight: bold; color: #444; }\r\n.profileImg img { width: 6.5rem; border-radius: 50%; vertical-align:middle; border: 2px solid #999; }\r\n.section2 input, .section2 textarea { border: 1px solid lightgray; background-color: #fff; border-radius: 5px; width: 100%; height: 4rem; color: black; font-size: 1.4rem; padding-left: 1rem; }\r\n.section2 textarea { height: 8rem; padding-top: 1rem; }\r\n.section2 p { font-size: 1.4rem;  margin: 0; margin-left:1rem; }\r\n.widthraw { color: #14c1c7; cursor: pointer; display: inline-block; font-size: 1.4rem; position:relative; margin-left: 84%; }\r\n.widthraw:hover { font-weight: bold; }\r\n.submitBtn { text-align: center; margin-top: 2rem; }\r\n.btn { width: 12rem; height: 4rem; font-size: 1.5rem; background: #14c1c7; border-radius: 7px; color: #fff; cursor: pointer; box-shadow: 3px 3px 3px #d0d0d0; }\r\n`;\r\n\r\nconst WithdrawWrap = styled.div`\r\n    z-index: 100; \r\n    position:fixed; \r\n    left:0; \r\n    top:0; \r\n    width:100%; \r\n    height:100%; \r\n    background:rgba(0,0,0,0.3);\r\n    text-align: center;\r\n    .popContainer { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); background: #fff; border:1px solid rgba(0,0,0,0.3s); border-radius: 20px; width: 35rem; height: 30rem; }\r\n    .closeIcon { position: absolute; top: 1.5rem; right: 1.5rem; cursor: pointer; }\r\n    .popHeader { padding: 4rem 5rem 3rem; }\r\n    .title { font-size: 2rem; font-weight: 700; }\r\n    .popContent { padding: 0 3rem 3rem; }\r\n    .desc { font-size: 1.4rem; color: rgba(35,35,35,.8); }\r\n    .btnItem button { \r\n        border: 0;\r\n        outline: none;\r\n        background: none;\r\n        background-color: rgba(0,0,0,0);\r\n        -webkit-appearance: none;\r\n        -moz-appearance: none;\r\n        appearance: none;\r\n        border-radius: 0;\r\n        cursor:pointer;\r\n        vertical-align: center;\r\n        padding: 1rem 1.8rem;\r\n        font-size: 1.6rem;\r\n        border-radius: 12px;\r\n        background-color: #14c1c7;\r\n        color: #fff;\r\n    }\r\n    .linkWidthraw { color: rgba(34,34,34,.5); text-decoration: underline; margin-top:1.5rem; font-size: 1.3rem; cursor: pointer; }\r\n`;\r\n\r\nconst Mypage = () =>{\r\n    // 초기 프로필 세팅\r\n    const [name , setName] = React.useState('')\r\n    const [changeName , setChangeName] = React.useState('')\r\n    const [proImg, setProImg] = React.useState('')\r\n    const [proEmail, setProEmail] = React.useState('')\r\n    const [protell, setProTell] = React.useState('')\r\n    const [proInfo, setProInfo] = React.useState('')\r\n    const [proInfo2, setProInfo2] = React.useState('')\r\n\r\n    const [proCode, setProCode] = React.useState('')\r\n    const [proGender, setProGender] = React.useState('')\r\n    //memberIdx\r\n    const param = window.location.search.split('=')[1];\r\n    // 이미지 파일 변경 \r\n    const [fileImage, setFileImage] = useState('');\r\n    // 탈퇴 팝업\r\n    const [withdrawPop, setWithdrawPop] = useState(false);\r\n    \r\n    // 프로필 정보 가져오기\r\n    useEffect (()=>{\r\n        axios.get(\"http://localhost:3001/member/edit\", {\r\n                params: {\r\n                    'idx': param\r\n                }\r\n            })\r\n            .then(function (result) {\r\n                console.log(result.data[0]) \r\n                setName(result.data[0].name)\r\n                setChangeName(result.data[0].name)\r\n                setProImg(result.data[0].img)\r\n                setProEmail(result.data[0].email)\r\n                setProInfo(result.data[0].message)\r\n                setProInfo2(result.data[0].message)\r\n                setProTell(result.data[0].tel)\r\n                setProCode(result.data[0].code)\r\n                setProGender(result.data[0].gender)\r\n            }).catch(function (error) {\r\n            });\r\n    },[]);\r\n    \r\n    // 이미지 변경 함수\r\n    const changeImage = (e)=>{\r\n        setFileImage(\"img/\"+e.target.files[0].name);\r\n        console.log(e.target.files[0]);\r\n        document.querySelector('.profileImg img').src = URL.createObjectURL(e.target.files[0]);\r\n    }\r\n\r\n    // 프로필 정보 onChange 이벤트 함수\r\n    const nameInput = (e) => {\r\n        e.preventDefault();\r\n        const data = e.target.value;\r\n        setChangeName(data)\r\n    }\r\n    const infoInput = (e) => {\r\n        e.preventDefault();\r\n        const data = e.target.value;\r\n        setProInfo(data)\r\n    }\r\n    const emailInput = (e) => {\r\n        e.preventDefault();\r\n        const data = e.target.value;\r\n        setProEmail(data)\r\n    }\r\n    const telInput = (e) => {\r\n        e.preventDefault();\r\n        const data = e.target.value;\r\n        setProTell(data)\r\n    }\r\n    \r\n    // 수정 진행\r\n    const send = async () => {\r\n        console.log(fileImage)\r\n        console.log(proEmail)\r\n        console.log(changeName)\r\n        console.log(protell)\r\n        console.log(proInfo)\r\n        console.log(proGender)\r\n\r\n        let log = await axios.post('http://localhost:3001/member/editMember?img='+fileImage+\"&email=\"+proEmail+\"&name=\"+changeName+\"&tel=\"+protell+\"&message=\"+proInfo+\"&gender=\"+proGender)\r\n        console.log(log)\r\n        if(log.data == false){\r\n            alert(\"수정실패\")\r\n        }else{\r\n            alert(\"개인정보가 수정 되었습니다\")\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    // 탈퇴진행\r\n    const withdrawRun = ()=>{\r\n        axios.delete('http://127.0.0.1:3000/member/delete?idx='+param)\r\n        .then(function (response) {\r\n            // handle success\r\n            console.log(response);\r\n            alert('탈퇴되었습니다. 이용해주셔서 감사합니다.');\r\n            window.location.href = '/';\r\n        })\r\n        .catch(function (error) {\r\n            // handle error\r\n            alert('탈퇴 실패했습니다.');\r\n            console.log(error);\r\n        })\r\n        .then(function () {\r\n            // always executed\r\n        });\r\n    }\r\n\r\n    // 탈퇴 html\r\n    const WithdrawPop = ()=>{\r\n        return (\r\n            <WithdrawWrap>\r\n                <div className=\"popContainer\">\r\n                    <div className=\"popHeader\">\r\n                        <div className=\"title\">정말 탈퇴하시겠습니까?</div>\r\n                        <img className=\"closeIcon\" src=\"img/clear_black.png\" alt=\"엑스버튼\" onClick={changePop}/>\r\n                    </div>\r\n                    <div className=\"popContent\">\r\n                        <div className=\"desc\">\r\n                            탈퇴하기 클릭 시 바로 탈퇴 처리됩니다.<br/>\r\n                            탈퇴 후 재가입할 수 없으며,<br/>\r\n                            재가입 시 동일 이메일을 사용할 수 없습니다.<br/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"btnItem\">\r\n                        <button onClick={changePop}>탈퇴 안 할래요</button>\r\n                    </div>\r\n                    <p className=\"linkWidthraw\" onClick={withdrawRun}>탈퇴하기</p>\r\n                </div>\r\n            </WithdrawWrap>\r\n        )\r\n    }\r\n\r\n    // 탈퇴 팝업 열기\r\n    const changePop = ()=>{\r\n        setWithdrawPop(!withdrawPop);\r\n        if(withdrawPop){\r\n            document.body.style.overflowY = \"unset\";\r\n        } else {\r\n            document.body.style.overflowY = \"hidden\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {withdrawPop ? <WithdrawPop/> : \"\"}\r\n            <Header/>\r\n            <MypageWrap>\r\n                <div className=\"container\">\r\n                    <div className=\"navForm\">\r\n                        <ul className=\"navBar\">\r\n                            <Link to={'/mypage?idx='+param}><li className=\"menuLink on\">프로필 편집</li></Link>\r\n                            <Link to={'/mypagePw?idx='+param}><li className=\"menuLink\">비밀번호 변경</li></Link>\r\n                            <Link to={'/mypageMap?idx='+param}><li className=\"menuLink\">로그인 활동</li></Link>\r\n                            <Link to={'/mypageQna?idx='+param}><li className=\"menuLink\">문의하기</li></Link>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <ul className=\"profileList\">\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"profileImg section1\">\r\n                                    <img src={proImg==null||proImg==''? \"/img/blank_profile.png\": \"/\"+proImg} alt=\"프로필사진\"/>\r\n                                </div>\r\n                                <div className=\"profileNameBox section2\">\r\n                                    <div className=\"profileName\">{name}</div>\r\n                                    <label htmlFor=\"inputImg\"><div className=\"modifyImg\">프로필 사진 바꾸기</div></label>\r\n                                    <input type=\"file\" name=\"inputImg\" id=\"inputImg\" accept=\"image/*\" style={{display:\"none\"}} onChange={changeImage}/>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">이름</div>\r\n                                <div className=\"section2\">\r\n                                    <input type=\"text\" name=\"name\" id=\"name\" placeholder={name} onChange={nameInput}/>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">코드</div>\r\n                                <div className=\"section2\">\r\n                                    <input type=\"text\" name=\"code\" id=\"code\" placeholder=\"코드\" value={proCode}/>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">소개</div>\r\n                                <div className=\"section2\">\r\n                                    <textarea name=\"intro\" id=\"intro\" placeholder={proInfo2==null||proInfo2==''? \"소개\":proInfo2} onChange={infoInput}/>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem privacy\">\r\n                                <div className=\"section1\">\r\n                                    <p>\r\n                                        <span className=\"star\">*</span> 개인정보<span className=\"\">아래에 작성된 개인정보는 프로필에 공개되지 않습니다.</span>\r\n                                    </p>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">이메일</div>\r\n                                <div className=\"section2\">\r\n                                    <input type=\"text\" name=\"email\" id=\"email\" placeholder={proEmail} onChange={emailInput} />\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">번호</div>\r\n                                <div className=\"section2\">\r\n                                    <input type=\"text\" name=\"hp\" id=\"hp\" placeholder={'+82 '+protell} onChange={telInput}/>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">성별</div>\r\n                                <div className=\"section2\">\r\n                                <input type=\"text\" name=\"gender\" id=\"gender\" placeholder=\"성별\" value={proGender}/>\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"widthraw\" onClick={changePop}> 탈퇴하기 </div>\r\n                        <div className=\"submitBtn\">\r\n                            <button type=\"submit\" className=\"btn\" onClick={send}> 수정 </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </MypageWrap>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Mypage;","C:\\project\\us\\frontend\\src\\user\\mypageLogin.jsx",["296"],"import React from \"react\";\r\nimport Header from \"../UserComponents/header\";\r\nimport MainProfile from \"../UserComponents/mainProfile\";\r\nimport LoginMap from \"../UserComponents/loginMap\";\r\n// import MypageSideBar from \"../components/mypageSideBar\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MypageLoginWrap = styled.div`\r\n    * { text-decoration:none; font-size: 2rem;}\r\n    ul, li { list-style: none; padding:0; margin: 0;}\r\n    input, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n    .container { max-width:100rem; margin: 0 auto; }\r\n    .navBar { float: left; width: 12rem; padding:5rem 3rem 3rem 2rem; }\r\n    .menuLink { margin-bottom: 4rem; color: #555; cursor: pointer; font-size: 1.6rem; }\r\n    .menuLink.on { font-weight: 600; color: #14c1c7; }\r\n    .menuLink:hover { color:#14c1c7; font-weight: 600; }\r\n    .content { padding: 3rem 3rem 5rem 7rem; overflow: hidden; border-left: 1px solid rgba(0,0,0,0.1);}\r\n    .profileItem { display: flex; position: relative; align-items: center; }\r\n    .profileItem.marginTop { margin-top: 3rem; }\r\n    .profileItem p { font-weight: bold; }\r\n    .profileItem.padding { padding: 2rem 0; border-bottom: 1px solid rgba(0,0,0,0.2); }\r\n    .section1 { width: 10%; position: relative; right:3rem; font-size: 1.8rem; text-align: right; font-weight: 600;}\r\n    .section2 { width: 90%; }\r\n    .activTime { display: inline-block; }\r\n    .activTime.active { color:#14c1c7; }\r\n    .activTime:after { content: \"·\";  padding: 0 .5rem;}\r\n    .device { display: inline-block; color: rgba(0,0,0,0.5); }\r\n    `;\r\n\r\nconst MypageLogin = () =>{\r\n    const param = window.location.search.split('=')[1];\r\n    \r\n    return (\r\n        <>\r\n            <Header/>\r\n            <MypageLoginWrap>\r\n                <div className=\"container\">\r\n                    <div>\r\n                        <ul className=\"navBar\">\r\n                            <Link to={\"/mypage?idx=\"+ param}><li className=\"menuLink \">프로필 편집</li></Link>\r\n                            <Link to={\"/mypagePw?idx=\"+ param}><li className=\"menuLink\">비밀번호 변경</li></Link>\r\n                            <Link to={\"/mypageLogin?idx=\" + param}><li className=\"menuLink on\">로그인 활동</li></Link>\r\n                            <Link to={\"/mypageQnA?idx=\" + param}><li className=\"menuLink\">문의하기</li></Link>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <ul className=\"profileList\">\r\n                            <li className=\"profileItem\">\r\n                                <p className=\"mapTitle\">로그인 활동</p>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <LoginMap/>\r\n                            </li>\r\n                            <li className=\"profileItem marginTop\">\r\n                                <p className=\"mapTitle\">로그인한 위치</p>\r\n                            </li>\r\n                            <li className=\"profileItem padding\">\r\n                                <div className=\"markerImg section1\">\r\n                                    <img src=\"img/position_icon.svg\" alt=\"positionImage\" />\r\n                                </div>\r\n                                <div className=\"positionItem section2\">\r\n                                    <div className=\"position\">\r\n                                        Seongnam, Korea    \r\n                                    </div>\r\n                                    <div className=\"activTime active\">\r\n                                    지금 활동 중\r\n                                    </div>\r\n                                    <div className=\"device\">\r\n                                        이 Windows\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem padding\">\r\n                                <div className=\"markerImg section1\">\r\n                                    <img src=\"img/position_icon.svg\" alt=\"positionImage\" />\r\n                                </div>\r\n                                <div className=\"positionItem section2\">\r\n                                    <div className=\"position\">\r\n                                        Suwon, Korea    \r\n                                    </div>\r\n                                    <div className=\"activTime\">\r\n                                        15시간 전\r\n                                    </div>\r\n                                    <div className=\"device\">\r\n                                        Samsung SM-N986N\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem padding\">\r\n                                <div className=\"markerImg section1\">\r\n                                    <img src=\"img/position_icon.svg\" alt=\"positionImage\" />\r\n                                </div>\r\n                                <div className=\"positionItem section2\">\r\n                                    <div className=\"position\">\r\n                                        Incheon, Korea    \r\n                                    </div>\r\n                                    <div className=\"activTime\">\r\n                                        10월 20일\r\n                                    </div>\r\n                                    <div className=\"device\">\r\n                                        이 Windows\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </MypageLoginWrap>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MypageLogin;","C:\\project\\us\\frontend\\src\\user\\FindPwPage.jsx",["297","298","299","300","301","302","303"],"import React, { useState , useEffect ,Component } from \"react\";\r\nimport { Link,BrowserRouter as Router } from \"react-router-dom\";\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nlet emailDisable = false;\r\nlet hpDisable = false;\r\nconst Findidpwcss2 = styled.div`\r\n    *{\r\n        text-decoration:none;\r\n        box-sizing: border-box;\r\n    }\r\n    html{\r\n        background: rgb(248, 250, 252);\r\n    }\r\n    .red{\r\n        color:red;\r\n        font-size:1.2rem;\r\n        margin: 0;\r\n    }\r\n    .forheigth{\r\n        height:80px\r\n    }\r\n    input, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n\r\n    .body{\r\n        width: 55rem;\r\n        position:absolute; top:50%; left:50%; transform: translate(-50%, -50%);\r\n        padding: 2rem;\r\n    }\r\n\r\n    .findtopnav {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n    }\r\n    .findtopnav p{\r\n        font-size: 2rem;\r\n        color: #222;\r\n        word-break : keep-all;\r\n    }\r\n    .findtopnav h2{\r\n        color: #222;\r\n        font-size: 3rem;\r\n    }\r\n    .phinput input{\r\n        border: 1px solid lightgray;\r\n        background-color: #fff;\r\n        border-radius: 12px;\r\n        width: 100%;\r\n        height: 6rem;\r\n        color: black;\r\n        margin-bottom: 1rem;\r\n        font-size: 2rem;\r\n        padding-left: 1rem;\r\n    }\r\n    input:hover{\r\n        border: 1px solid mediumaquamarine;\r\n    }\r\n\r\n    .finregi { margin-top: 2rem; }\r\n\r\n    .finregi button:hover{\r\n        background-color: lightsteelblue;\r\n    }\r\n    .red{\r\n        color:red;\r\n        display: none;\r\n        margin: 0;\r\n    }\r\n    \r\n    .finregi button{\r\n        display: flex;\r\n        padding: 1.5rem 0; \r\n        font-size: 1.9rem; \r\n        font-weight: bolde;\r\n        color: white; \r\n        width: 100%; \r\n        border-radius: 15px;\r\n        border:0; \r\n        background: #4fd1c5;\r\n        margin: 0 auto;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n    }\r\n    .finregi button:disabled{ background: #dfdfdf; }\r\n\r\n    .tofind p {\r\n        font-size: 1.5rem;\r\n    }\r\n    `;\r\nconst Findidpw2 = () => {\r\n    const formRef = React.createRef();\r\n    //휴대전화번호, 이메일저장\r\n    const [hp,setHp] = React.useState('')\r\n    const [email, setEmail] = React.useState('')\r\n\r\n\r\n    //axios\r\n    const searchPw = (e) => {\r\n        axios.post('/member/findPassword',null,{\r\n            params: {\r\n            'tel': hp ,\r\n            'email': email\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(res)\r\n                window.location.href=\"/FinFindidpw/\"\r\n        })\r\n        .catch()\r\n    }\r\n    //에러메세지 토글\r\n    const [display ,setDisplay] = useState(\"none\")\r\n    const [display4 ,setDisplay4] = useState(\"none\")\r\n    const changeDispaly = (display) => {\r\n        setDisplay(display)\r\n    }\r\n    const changeDispaly4 = (display4) => {\r\n        setDisplay4(display4)\r\n    }\r\n    //이메일 정규식 체크\r\n    const checkEmail = (e) => {\r\n        e.preventDefault();\r\n        var text = document.getElementById('email').value;\r\n\r\n        var regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i\r\n        // 형식에 맞는 경우 true 리턴\r\n        const emailV = e.target.value;\r\n        setEmail(emailV)\r\n        if (regExp.test(e.target.value) === false) {\r\n            changeDispaly(\"block\")\r\n            emailDisable = false\r\n\r\n        } else {\r\n            changeDispaly(\"none\")\r\n            emailDisable = true\r\n\r\n        }\r\n        idDisabled()\r\n    }\r\n    const checkPh = (e) => {\r\n        e.preventDefault();\r\n        var regExp = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/;\r\n        const phV = e.target.value;\r\n        setHp(phV)\r\n        if (regExp.test(e.target.value) === false) {\r\n            changeDispaly4(\"block\")\r\n            hpDisable = false\r\n\r\n        } else {\r\n            changeDispaly4(\"none\")\r\n            hpDisable = true\r\n        }\r\n        idDisabled()\r\n    }\r\n    \r\n    let to_val = '';\r\n    const [disabled, setDisabled ] = React.useState('disabled');\r\n\r\n    const idDisabled = () => {\r\n        if(emailDisable===true&&hpDisable===true){\r\n            setDisabled('');\r\n        }else{\r\n            setDisabled('disabled');\r\n        }\r\n    }\r\n\r\n    \r\n    return (\r\n        <Findidpwcss2>\r\n        <div className=\"body\">\r\n            <div className=\"findtopnav\">\r\n                <h2>비밀번호 찾기</h2>\r\n                <hr/>\r\n                <p>가입 시 등록한 휴대폰 번호와 이메일을 입력하시면, 이메일로 임시 비밀번호를 전송해드립니다.</p>\r\n            </div>\r\n\r\n            <form className=\"findemail\" ref={formRef}>\r\n                \r\n                <input id=\"ranpw\" name=\"ran_pw\" value={to_val} type=\"hidden\"></input>\r\n                <div className=\"tofind\">\r\n                    <p>휴대폰 번호</p>\r\n                    <div className=\"phinput forheigth\">\r\n                    <input id=\"ph\" onChange={checkPh} placeholder=\"휴대폰번호를 입력해주세요.\"/>\r\n                    <p className=\"red\"  style={{display:display4}}>* 전화번호를 다시 입력해 주세요. ('-'제외)</p>\r\n                    </div>\r\n                    \r\n\r\n                    <p>이메일 주소</p>\r\n                    <div className=\"phinput forheigth\">\r\n                    <input type=\"email\" id=\"email\" name=\"user_email\" onChange={checkEmail} placeholder=\"이메일을 입력해주세요.\"/>\r\n                    <p className=\"red\"  style={{display:display}}>* 이메일 양식을 확인해주세요.</p> \r\n                    </div>\r\n                \r\n                </div>\r\n                <div className=\"finregi\">\r\n                <button type=\"button\" value=\"Send\" onClick={searchPw} disabled={disabled}>\r\n                    비밀번호 찾기\r\n                </button>\r\n            </div>\r\n            </form>\r\n            \r\n            \r\n        </div>\r\n        </Findidpwcss2>\r\n    )\r\n}\r\n    \r\nexport default Findidpw2;","C:\\project\\us\\frontend\\src\\user\\mypagePw.jsx",["304","305","306","307"],"import React, { useState , useEffect ,Component } from \"react\";\r\nimport Header from \"../UserComponents/header\";\r\nimport MainProfile from \"../UserComponents/mainProfile\";\r\n// import MypageSideBar from \"../components/mypageSideBar\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nconst MyPagePwWrap = styled.div`\r\n* { text-decoration:none; }\r\nul, li { list-style: none; padding:0; margin: 0;}\r\ninput, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n.container { max-width:100rem; margin: 0 auto;  }\r\n.navBar { float: left; width: 12rem; padding:5rem 3rem 3rem 2rem; }\r\n.menuLink { margin-bottom: 4rem; color: #555; cursor: pointer; font-size: 1.6rem; }\r\n.menuLink.on { font-weight: 600; color: #14c1c7; }\r\n.menuLink:hover { color:#14c1c7; font-weight: 600; }\r\n.content { padding: 5.5rem 3rem 5rem 10rem; overflow: hidden; border-left: 1px solid rgba(0,0,0,0.1); height: 77.5vh;}\r\n.profileItem { display: flex; position: relative; align-items: center; margin-bottom: 1.5rem; margin-left: 4.5rem; }\r\n.profileFirst { margin-left: -2rem; margin-bottom: 5rem; }\r\n.section1 { width: 11rem; position: relative; right:3rem; font-size: 1.4rem; text-align: left; font-weight: 600; margin-top: -2rem; }\r\n.section2 { width: 80%; height: 6.2rem; }\r\n.profileImg img { width: 6.5rem; border-radius: 50%; vertical-align:middle; border: 2px solid #999; margin-left: 6rem; }\r\n.profileName { font-size: 1.7rem; font-weight: bold; color: #444; margin-top: 1rem; margin-left: 0.5rem; }\r\n.section2 .red { font-size: 1.2rem; margin-top: 0.5rem; color: #fb3b3b; }\r\n.section2 input { border: 1px solid lightgray; background-color: #fff; border-radius: 5px; width: 90%; height: 4rem; color: black; font-size: 1.4rem; padding-left: 1rem; }\r\n.section2 p { font-size: 1.4rem;  margin: 0; margin-left:1rem; }\r\n.submitBtn { text-align: center; margin-top: 5rem; }\r\n.btn:disabled { background: #dfdfdf; }\r\n.btn { width: 12rem; height: 4rem; font-size: 1.5rem; background: #14c1c7; border-radius: 7px; color: #fff; cursor: pointer; box-shadow: 3px 3px 3px #d0d0d0; }\r\n`;\r\n\r\n// 버튼 활성화\r\nlet passwordDisable = false;\r\nlet passwordDisable2 = false;\r\nlet passwordDisable3 = false;\r\n\r\nconst MyPagePw = () =>{\r\n    // memberIdx 가져오기\r\n    const param = window.location.search.split('=')[1];\r\n\r\n    ///member/ComparePassword\r\n    const [name , setName] = React.useState('')\r\n    const [proImg, setProImg] = React.useState('')\r\n\r\n    const [password, setPassword] = useState('');\r\n    const [password2, setPassword2] = useState('');\r\n    const [password3, setPassword3] = useState('');\r\n\r\n    //오류메시지 저장\r\n    const [passwordMessage, setPasswordMessage] = useState('');\r\n\r\n    //유효성 검사\r\n    const [isPassword, setIsPassword] = useState(false);\r\n    const [ disabled, setDisabled ] = useState('disabled');\r\n    const [forDis, setForDis] = useState(\"none\");\r\n    const [forDis2, setForDis2] = useState(\"none\");\r\n\r\n    useEffect(()=>{\r\n        axios.get(\"http://localhost:3001/member/edit\", {\r\n            params: {\r\n                'idx': param\r\n            }\r\n        })\r\n        .then(function (result) {\r\n            console.log(result.data[0]) \r\n            setName(result.data[0].name)\r\n            setProImg(result.data[0].img)\r\n        }).catch(function (error) {\r\n        });\r\n    },[])\r\n    \r\n    //비밀번호 변경 제출\r\n    const send = async () => {\r\n        console.log(password3+\"///////////////\"+password +\"///////////\"+ param)\r\n        let log = await axios.post('http://localhost:3001/member/ComparePassword?userPw='+password3+\"&userPw2=\"+password+\"&idx=\"+param)\r\n        console.log(log)\r\n        if(log.data === false){\r\n            alert('이전 비밀번호를 확인해주세요.')\r\n            window.location.reload();\r\n        } else{\r\n            console.log(\"통과\")\r\n            alert(\"비밀번호가 변경되었습니다\");\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    //전 비밀번호 \r\n    const passwordInput3 = (e) => {\r\n        e.preventDefault();\r\n        const regExp = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/\r\n        const password = e.target.value;\r\n        setPassword3(password);\r\n        if (!regExp.test(password)) {\r\n            passwordDisable3 = false;\r\n            changeDispaly('block')\r\n        } else {\r\n            passwordDisable3 = true;\r\n            changeDispaly('none')\r\n        }\r\n        idDisabled()\r\n    }\r\n\r\n    //새 비밀번호\r\n    const passwordInput = (e) => {\r\n        e.preventDefault();\r\n        const regExp = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/\r\n        const password = e.target.value;\r\n        setPassword(password);\r\n        if (!regExp.test(password)) {\r\n            setPasswordMessage('* 영문,숫자,특수문자 포함 8자 이상 입력해주세요.');\r\n            setIsPassword(false);\r\n            passwordDisable = false;\r\n        } else {\r\n            setPasswordMessage('');\r\n            setIsPassword(true);\r\n            passwordDisable = true;\r\n        }\r\n        idDisabled()\r\n    }\r\n\r\n    //새 비밀번호 확인 \r\n    const passwordInput2 = (e) => {\r\n        e.preventDefault();\r\n        const passwordC = e.target.value;\r\n        setPassword2(passwordC);\r\n        console.log(password2 +\"새 비밀번호 확인 / 새 비밀번호\"+ password)\r\n\r\n        if(password === e.target.value){\r\n            passwordDisable2 = true;\r\n            changeDispaly2('none');\r\n        }else{\r\n            changeDispaly2('block');\r\n            passwordDisable2 = false;\r\n        }\r\n        idDisabled()\r\n    }\r\n\r\n    const changeDispaly = (display) => {\r\n        setForDis(display)\r\n    }\r\n    const changeDispaly2 = (display2) => {\r\n        setForDis2(display2)\r\n    }\r\n\r\n    const idDisabled = () => {\r\n        console.log(passwordDisable,passwordDisable2,passwordDisable3);\r\n        if(passwordDisable === true && passwordDisable2 === true && passwordDisable3===true) {\r\n            setDisabled('');\r\n        }else{\r\n            setDisabled('disabled');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <MyPagePwWrap>\r\n                <div className=\"container\">\r\n                    <div>\r\n                    <ul className=\"navBar\">\r\n                            <Link to={\"/mypage?idx=\"+ param}><li className=\"menuLink \">프로필 편집</li></Link>\r\n                            <Link to={\"/mypagePw?idx=\"+ param}><li className=\"menuLink on\">비밀번호 변경</li></Link>\r\n                            <Link to={\"/mypageLogin?idx=\" + param}><li className=\"menuLink\">로그인 활동</li></Link>\r\n                            <Link to={\"/mypageQnA?idx=\" + param}><li className=\"menuLink\">문의하기</li></Link>\r\n                        </ul>\r\n                        </div>\r\n                    <div className=\"content\">\r\n                        <ul className=\"profileList\">\r\n                            <li className=\"profileItem profileFirst\">\r\n                                <div className=\"profileImg section1\">\r\n                                    <img src={proImg==null||proImg==''? \"/img/blank_profile.png\": \"/\"+proImg} alt=\"프로필사진\"/>\r\n                                </div>\r\n                                <div className=\"profileNameBox section2\">\r\n                                    <div className=\"profileName\">{name}</div>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">이전 비밀번호</div>\r\n                                <div className=\"profileNameBox section2\">\r\n                                    <input type=\"password\" name=\"currPw\" id=\"currPw\" placeholder=\"이전 비밀번호\" onChange={passwordInput3}/>\r\n                                    <p className=\"red\" style={{display:forDis}}>* 영문,숫자,특수문자 포함 8자 이상 입력해주세요.</p>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">새 비밀번호</div>\r\n                                <div className=\"profileNameBox section2\">\r\n                                    <input type=\"password\" name=\"newPw\" id=\"newPw\" placeholder=\"새 비밀번호\" onChange={passwordInput}/>\r\n                                    <p className=\"red\">{password.length > 0 && <span className={`message ${isPassword  ? 'success' : 'error'}`}>{passwordMessage}</span>}</p>\r\n                                </div>\r\n                            </li>\r\n                            <li className=\"profileItem\">\r\n                                <div className=\"section1\">새 비밀번호 확인</div>\r\n                                <div className=\"profileNameBox section2\">\r\n                                    <input type=\"password\" name=\"confirmNewPw\" id=\"confirmNewPw\" placeholder=\"새 비밀번호 확인\" onChange={passwordInput2}/>\r\n                                    <p className=\"red\" style={{display: forDis2}}>* 새 비밀번호가 일치하지 않습니다.</p>\r\n                                </div>\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"submitBtn\">\r\n                            <button type=\"button\" onClick={send} className=\"btn\" disabled={disabled}> 변경 </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </MyPagePwWrap>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MyPagePw;","C:\\project\\us\\frontend\\src\\user\\mypageQnA.jsx",["308","309","310","311","312","313","314","315","316"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../UserComponents/header\";\r\nimport styled from \"styled-components\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst MyPageQnAWrap = styled.div`\r\n    * { text-decoration:none; }\r\n    ul, li { list-style: none; padding:0; margin: 0;}\r\n    input, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n    .container { max-width:100rem; margin: 0 auto; }\r\n    .navBar { float: left; width: 12rem; padding: 5rem 3rem 3rem 2rem; }\r\n    .menuLink { margin-bottom: 4rem; color: #555; cursor: pointer; font-size: 1.6rem; }\r\n    .menuLink.on { font-weight: 600; color: #14c1c7; }\r\n    .menuLink:hover { color:#14c1c7; font-weight: 600; }\r\n    .content { padding: 4rem 3rem 5rem 10rem; overflow: hidden; border-left: 1px solid rgba(0,0,0,0.1); height: 79.5vh; }\r\n    .profileItem { position: relative; align-items: center; margin-bottom: 2rem; margin-left: 0.5rem; }\r\n    .profileItem select, .profileItem option { margin-right: 1rem; font-size: 1.4rem; width: 18rem; height: 4rem; padding: 0.5rem; border-color: rgba(0,0,0,0.2); border-radius: 3px; }\r\n    .profileItem select:focus { border-color: rgba(0,0,0,0.1); outline: none; }\r\n    .profileItem div { display: inline-block; }\r\n    .profileItem h1 { font-size: 1.75rem; margin-bottom: 1rem; color: #444; }\r\n    .section1 { width: 11rem; font-size: 1.45rem; font-weight: 600; vertical-align: top; }\r\n    .section2 { width: 80%; font-size: 1.3rem; }\r\n    .profileImg { width: 8rem; }\r\n    .profileImg img { width: 5rem; border-radius: 50%; vertical-align: middle; border: 2px solid #999; }\r\n    .section2 input, .section2 textarea { border: 1px solid lightgray; background-color: #fff; border-radius: 3px; width: 90%; height: 4rem; font-size: 1.4rem; padding-left: 1rem; }\r\n    .section2 textarea { height: 16rem; padding-top: 1rem; }\r\n    .section2 p { font-size: 1.5rem;  margin: 0; position: relative; top:1.5rem; font-weight: bold; color: #555; }\r\n    .profileSelect { margin-left: 1.5rem; }\r\n    .profileSelect .decType { width: 100%; }\r\n    .firstItem { margin-top: 4rem; }\r\n    .profileFirst { margin-bottom: 3rem; }\r\n    .proFirst { margin-bottom: 4rem; }\r\n    .QnaTitle { margin-top: 0.5rem; color: #444; }\r\n    .red { color: #14c1c7; font-size: 1.2rem; font-weight: bold; }\r\n    #target { width: 81%; }\r\n    .submitBtn { text-align: center; margin-top: 3rem; }\r\n    .btn { width: 12rem; height: 4rem; font-size: 1.5rem; background: #14c1c7; border-radius: 7px; color: #fff; cursor: pointer; box-shadow: 3px 3px 3px #d0d0d0; }\r\n    .popup { padding: 1.5rem 1rem 1rem; }\r\n    .fa-search { font-size: 2.6rem; color: #14c1c7; cursor: pointer; }\r\n    .fa-search:hover { font-size: 2.75rem; color: #14c1c7;  }\r\n    // 모달창 css\r\n    .mw { position:fixed; top:0; left:0; width:100%; height:100%; z-index: 1000; }\r\n    .mw .bg { position:fixed; top:0; left:0; width:100%; height:100%; background:#000; opacity:.5; filter:alpha(opacity=50); }\r\n    .mw .fg { position:absolute; top:50%; left:50%; width: 45rem; height: 52rem;  transform: translate(-50%, -50%); background:#fff; border-radius: 30px; }\r\n    .closeBtn { position: absolute; cursor: pointer; font-size: 4rem; top: 1.5rem; right: 3rem; }\r\n    .mw .fg .modalTitle { border: none; width: 14rem; margin: 2rem auto; font-size: 2rem; font-weight: bold;  }\r\n    .fa-times { font-size: 3.5rem; }\r\n    .nonData { font-size: 1.6rem; color: #777; margin: 3rem auto; }\r\n    .searchName input[type=\"text\"] { width: 25rem; margin-left: 1.5rem; border: none; border-bottom: 2px solid #9b9b9b; height: 3rem; font-size: 1.4rem;  }\r\n    .searchName input[type=\"button\"] { width: 6rem; padding: 1rem; margin-left: 1rem; font-size: 1.4rem; font-weight: bold; color: #14c1c7; cursor: pointer; border: none; box-shadow: 1.5px 1.5px 1.5px 2px #e7e7e7; } \r\n    .searchName { margin-left: 4rem; margin-top: 3rem; font-size: 1.5rem; font-weight: bold; color: #444; }\r\n    .findForm { border: 1px solid #c7c7c7; width: 38rem; height: 32rem; margin-left: 3.6rem; margin-top: 2rem; overflow-y: auto; }\r\n    .findForm p {  border: 1px solid #c7c7c7; height: 3rem; width: 85%; margin: 0rem auto 0.5rem; border-radius: 5px; padding: 1.2rem 1.5rem 0.5rem; }\r\n    .email { color: #14c1c7;  }\r\n    .fa-angry { font-size: 3rem;}\r\n`;\r\n\r\nconst MyPageQnA = () =>{\r\n    // 프로필정보\r\n    const [name, setName] = useState('');\r\n    const [proImg, setProImg] = React.useState('')\r\n\r\n    // 문의 유형\r\n    let [type, setType] = useState([]);\r\n    let [title, setTitle] = useState('');\r\n    let [content, setContent] = useState('');\r\n\r\n    // 신고 대상자\r\n    let [defendant, setDefendant] = useState({});\r\n\r\n    // 팝업\r\n    const [modalOn, setModalOn] = useState(false); \r\n    let [popup, setPopup] = useState();\r\n\r\n    // 팝업 친구 목록\r\n    let [friendsList, setFriendsList] = useState([]);\r\n\r\n    // 코드 검색\r\n    let [codeFriend, setCodeFriend] = useState(null);\r\n\r\n    // memberIdx\r\n    const param = window.location.search.split('=')[1];\r\n\r\n    // 프로필정보 불러오기\r\n    useEffect(()=>{\r\n        axios.get(\"http://localhost:3001/member/edit\", {\r\n            params: {\r\n                'idx': param\r\n            }\r\n        })\r\n        .then(function (result) {\r\n            console.log(result.data[0]) \r\n            setName(result.data[0].name)\r\n            setProImg(result.data[0].img)\r\n        }).catch(function (error) {\r\n        });\r\n    },[])\r\n\r\n    // 친구목록 불러오기\r\n    useEffect(async () => {\r\n        const list = await axios.get(`http://localhost:3001/main/friend/list?idx=${param}`)\r\n        setFriendsList(list.data)\r\n        console.log(friendsList)\r\n    }, [modalOn]);\r\n\r\n    // 문의 유형 선택시\r\n    const selectType = (e) => {\r\n        e.preventDefault();\r\n        setType(e.target.value);\r\n    }\r\n    // 제목 입력시\r\n    const changeTitle = (e)=>{\r\n        e.preventDefault();\r\n        setTitle(e.target.value);\r\n    }\r\n    // 내용 입력시\r\n    const changeContent = (e)=>{\r\n        e.preventDefault();\r\n        setContent(e.target.value);\r\n    }\r\n\r\n    // 신고대상자 선택시\r\n    const addDefendant = (target)=>{\r\n        console.log(target);\r\n        setDefendant(target);\r\n        document.querySelector('#target').value = target.email;\r\n        setModalOn(!modalOn);\r\n    }\r\n\r\n    // 코드 검색 버튼 클릭\r\n    const codeBtn = async() =>{\r\n        let code = document.getElementById('codeInput').value\r\n        let findFriend = await axios.post(\"http://localhost:3001/main/friend?code=\" + code + `&idx=${param}`);\r\n        console.log(findFriend.data);\r\n        setCodeFriend({info:findFriend.data.result1[0], flag:findFriend.data.flag});\r\n    }\r\n\r\n    // 문의하기 axios 제출\r\n    const goRegist = async () => {\r\n        let korType = '';\r\n        \r\n        if(type==='declaration'){\r\n            korType += '신고하기';\r\n            korType += '일반문의';\r\n        }\r\n        let log = await axios.post('http://localhost:3001/inquiry?memberIdx='+param+\"&title=\"+title+\"&content=\"+content+\"&type=\"+korType)\r\n        console.log(log);\r\n        if(log.data===true){\r\n            alert('문의가 등록되었습니다.');\r\n            window.location.reload();\r\n        }else{\r\n            alert('다시 입력해 주세요!')\r\n            window.location.reload();\r\n        }\r\n    }\r\n\r\n    const onOpenModal = (e) => {\r\n        setModalOn(!modalOn);\r\n        //팝업 창 띄울 시 body 스크롤\r\n        if(modalOn==false){\r\n            document.body.style.overflow = \"hidden\";\r\n        }else if(modalOn==true){\r\n            document.body.style.overflow = \"unset\";\r\n        }\r\n    }\r\n    \r\n    // 신고대상 찾기 팝업 html\r\n    const Modal = () => {\r\n        return(\r\n            <div id=\"mw_temp\" className=\"mw\">\r\n                <div className=\"bg\"></div>\r\n                <div className=\"fg\">\r\n                    <div className=\"closeBtn\" onClick={onOpenModal}><i className=\"fas fa-times\"></i></div>\r\n                    <p className=\"modalTitle\">신고대상 찾기</p>\r\n                    <div className=\"searchName\"><i class=\"far fa-angry\"></i><input type=\"text\" placeholder=\"신고대상자 코드를 입력하세요\" id=\"codeInput\"/><input type=\"button\" value=\"검색\" onClick={codeBtn}/></div>\r\n                    <div className=\"findForm\">\r\n                        {codeFriend==null ?\r\n                            friendsList.length!==0 ?\r\n                                friendsList.map(list=>(\r\n                                    <p onClick={()=>{addDefendant(list)}} style={{cursor:\"pointer\"}}>{list.name} [ <span className=\"email\">{list.email}</span> ]</p>\r\n                                ))\r\n                                :\r\n                                <p>신고할 친구가 존재하지 않습니다.<br/>상단의 신고 대상자 코드를 입력하세요</p>\r\n                            :\r\n                            <p onClick={()=>{addDefendant(codeFriend.info)}} style={{cursor:\"pointer\"}}>{codeFriend.info.name} [ <span className=\"email\">{codeFriend.info.email}</span> ]</p>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <MyPageQnAWrap>\r\n                <div className=\"container\">\r\n                    <div>\r\n                    <ul className=\"navBar\">\r\n                            <Link to={\"/mypage?idx=\" + param}><li className=\"menuLink \">프로필 편집</li></Link>\r\n                            <Link to={\"/mypagePw?idx=\" + param}><li className=\"menuLink\">비밀번호 변경</li></Link>\r\n                            <Link to={\"/mypageLogin?idx=\" + param}><li className=\"menuLink\">로그인 활동</li></Link>\r\n                            <Link to={\"/mypageQnA?idx=\" + param}><li className=\"menuLink on\">문의하기</li></Link>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        { type !== \"declaration\" ? \r\n                            <ul className=\"profileList\">\r\n                                <li className=\"profileItem proFirst\">\r\n                                    <h1>신고/문의하기</h1>\r\n                                </li>\r\n                                <li className=\"profileItem\">\r\n                                    <div className=\"profileImg section1\">\r\n                                        <img src={proImg===null||proImg==='' ? '/img/blank_profile.png' : proImg} alt=\"프로필사진\"/>\r\n                                    </div>\r\n                                    <div className=\"profileNameBox section2\">\r\n                                        <p className=\"profileName\">{name}</p>\r\n                                    </div>\r\n                                </li>\r\n                                <li className=\"profileItem profileSelect firstItem\">\r\n                                    <div className=\"QnaTitle section1\">문의유형</div>\r\n                                    <select name=\"category1\" id=\"category1\" onChange={selectType}>\r\n                                        <option value=\"inquiry1\">계정관리</option>\r\n                                        <option value=\"inquiry2\">로그인 활동</option>\r\n                                        <option value=\"inquiry3\">사용법 안내</option>\r\n                                        <option value=\"declaration\">신고하기</option>\r\n                                    </select>\r\n                                </li>\r\n                                <li className=\"profileItem profileSelect\">\r\n                                    <div className=\"QnaTitle section1\">문의명</div>\r\n                                    <div className=\"titleBox section2\">\r\n                                        <input type=\"text\" name=\"title\" id=\"title\" placeholder=\"제목\" onBlur={changeTitle}/>\r\n                                    </div>\r\n                                </li>\r\n                                <li className=\"profileItem profileSelect\">\r\n                                    <div className=\"QnaContent section1\">문의내용</div>\r\n                                    <div className=\"contentBox section2\">\r\n                                        <textarea type=\"text\" name=\"content\" id=\"content\" placeholder=\"내용\" onBlur={changeContent}/>\r\n                                    </div>\r\n                                </li>\r\n                            </ul>\r\n                            :\r\n                            <ul className=\"profileList\">\r\n                                <li className=\"profileItem profileFirst\">\r\n                                    <h1>신고/문의하기</h1>\r\n                                    <span className=\"red\">* 신고사실은 신고대상자가 알 수 없습니다.</span>\r\n                                </li>\r\n                                <li className=\"profileItem\">\r\n                                    <div className=\"profileImg section1\">\r\n                                        <img src={proImg===null||proImg==='' ? '/img/blank_profile.png' : proImg} alt=\"프로필사진\"/>\r\n                                    </div>\r\n                                    <div className=\"profileNameBox section2\">\r\n                                        <p className=\"profileName\">{name}</p>\r\n                                    </div>\r\n                                </li>\r\n                                <li className=\"profileItem profileSelect firstItem\">\r\n                                    <div className=\"QnaTitle section1\">문의유형</div>\r\n                                    <select name=\"category1\" id=\"category1\" onClick={selectType}>\r\n                                        <option value=\"inquiry1\">계정관리</option>\r\n                                        <option value=\"inquiry2\">로그인 활동</option>\r\n                                        <option value=\"inquiry3\">사용법 안내</option>\r\n                                        <option value=\"declaration\">신고하기</option>\r\n                                    </select>\r\n                                </li>\r\n                                <li className=\"profileItem profileSelect\">\r\n                                    <div className=\"QnaTitle section1\">신고대상</div>\r\n                                    <div className=\"titleBox section2\">\r\n                                        <input type=\"text\" id=\"target\" placeholder=\"신고대상\" readOnly/><span className=\"popup\" onClick={onOpenModal}><i class=\"fas fa-search\"></i></span>\r\n                                        {modalOn? <Modal/>: ''}\r\n                                    </div>\r\n                                </li>\r\n                                <li className=\"profileItem profileSelect\">\r\n                                    <div className=\"QnaTitle section1\">신고유형</div>\r\n                                    <div className=\"titleBox section2\">\r\n                                        <input type=\"text\" placeholder=\"신고유형\" onBlur={changeTitle}/>\r\n                                    </div>\r\n                                </li>\r\n                                <li className=\"profileItem profileSelect\">\r\n                                    <div className=\"QnaContent section1\">신고이유</div>\r\n                                    <div className=\"contentBox section2\">\r\n                                        <textarea type=\"text\" name=\"content\" id=\"content\" placeholder=\"신고하는 이유\" onBlur={changeContent}/>\r\n                                    </div>\r\n                                </li>\r\n                            </ul>\r\n                        }\r\n                        <div className=\"submitBtn\">\r\n                            <button type=\"submit\" className=\"btn\" onClick={goRegist}> 제출 </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </MyPageQnAWrap>\r\n        </>\r\n    );\r\n}\r\nexport default MyPageQnA;","C:\\project\\us\\frontend\\src\\admin\\mainPage.jsx",["317"],"import React, { useState, useEffect } from \"react\";\r\nimport Header from \"../AdminComponents/header\";\r\nimport SideBar from \"../AdminComponents/sidebar\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MainForm = styled.div`\r\n    overflow-x: hidden;\r\n    margin-left: 24rem;\r\n    .mw { position:fixed; top:0; left:0; width:100%; height:100%; z-index: 1000; }\r\n    .mw .bg { position:fixed; top:0; left:0; width:100%; height:100%; background:#000; opacity:.5; filter:alpha(opacity=50); }\r\n    .mw .fg { position:absolute; top:50%; left:50%; width: 50rem; height: 60rem;  transform: translate(-50%, -50%); background:#fff; border-radius: 30px; }\r\n    .openBtn {\r\n        background-color: #F9B514;\r\n        padding: 5px 10px;\r\n        border-radius: 4px;\r\n        cursor: pointer;\r\n    }\r\n    .title { border-radius: 10px; font-size: 1.5rem; font-weight: bold; color: #14c1c7; }\r\n    .mainDashBox{ background-color: white; margin: 13rem auto 10rem; width: 112rem; border-radius: 20px; padding: 1.5rem 4rem; box-shadow: 5px 5px 5px 5px rgb(210, 210, 210); }\r\n    .dashFlexBox{ display: flex; justify-content: center; margin-top: 5rem; }\r\n    .dashBox{ border: 1px solid lightgray; border-radius: 10px; display: flex; align-items: center; margin: 0 1rem; padding: 0 2rem 0 1rem; }\r\n    .dashImgBox{ font-size: 6rem; margin: 1rem; color: #14c1c7;}\r\n    .dashTextBox p{ margin: 0; }\r\n    .dashBText{ font-size: 2.2rem; font-weight: bold; }\r\n    .dashSText{ font-size: 1.2rem; }\r\n    .dashListBox{ width:32rem; font-size: 1.5rem; border: 1px solid lightgray; border-radius: 5px; margin: 0 1rem; padding: 1.5rem 1rem; text-align: center; }\r\n    .fa-user, .fa-clipboard-list, .fa-bell{ font-size: 2rem; color: gray; }\r\n    .sListBox{ text-align: left; }\r\n    .sListBox p{ margin: 1.5rem auto; width: 90%; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }\r\n    .sListBox p:hover{ font-weight: bold; color: #14c1c7; }\r\n    .ListTitle{ margin: 0.8rem 0 2rem 0; font-weight: bold; }\r\n    .dashChatFlexBox{ width: 95.1%; display: flex; border: 1px solid lightgray; border-radius: 5px; margin: 2rem auto; }\r\n    .dashChatTextBox{ width: 20rem; border-right: 1px solid lightgray; text-align: center; }\r\n    .fa-comments{ font-size: 3rem; margin-top: 6rem; color: gray; }\r\n    .dashChatTextBox { height: 19rem;}\r\n    .dashChatTextBox p{ font-size: 1.5rem; font-weight: bold; }\r\n    .dashChatListBox p{ font-size: 1.5rem; padding: 0 0 0 2rem; }\r\n    .dashChatListBox p span{ font-weight: bold; }\r\n    .dashChatListBox p:hover{ font-weight: bold; color: #14c1c7; }\r\n    a { color: black; text-decoration-line: none; }\r\n`;\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\n\r\nconst MainPage = () => {\r\n\r\n    // axios 뿌리기\r\n    let [member, setMember] = useState([]);\r\n    let [post, setPost] = useState([]);\r\n    let [question, setQuestion] = useState([]);\r\n    let [chat, setChat] = useState([]);\r\n    let [memCount, setMemCount] = useState([]);\r\n    let [postCount, setPostCount] = useState([]);\r\n    let [questionCount, setQuesCount] = useState([]);\r\n    let [chatCount, setChatCount] = useState([]);\r\n\r\n    useEffect(async () => {\r\n        const main = await axios.get(\"http://localhost:3001/admin/dashBoard\")\r\n        setMemCount(main.data[0])\r\n        setPostCount(main.data[1])\r\n        setQuesCount(main.data[3])\r\n        setChatCount(main.data[2])\r\n        setMember(main.data[4])\r\n        setPost(main.data[5])\r\n        setQuestion(main.data[6])\r\n        setChat(main.data[7])\r\n    }, []);\r\n    console.log(post);\r\n    console.log(chatCount)\r\n\r\n    return (\r\n        <Form>\r\n            <Header/>\r\n            <SideBar/>\r\n            <MainForm>\r\n                <div className=\"mainDashBox\">\r\n                    <p className=\"title\">대시보드</p>\r\n                    <div className=\"dashFlexBox\">\r\n                        <div className=\"dashBox\">\r\n                            <div className=\"dashImgBox\"><i class=\"fas fa-child\"></i></div>\r\n                            <div className=\"dashTextBox\">\r\n                                { memCount !== 0 ?\r\n                                    memCount.map(rowData =>(\r\n                                        <p className=\"dashBText\">{rowData.memberCnt}명</p>\r\n                                    )):\r\n                                    <p className=\"dashBText\"><span>0</span> 명</p>\r\n                                }\r\n                                <p className=\"dashSText\">전체 회원 수</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"dashBox\">\r\n                            <div className=\"dashImgBox\"><i class=\"far fa-clipboard\"></i></div>\r\n                            <div className=\"dashTextBox\">\r\n                            { postCount !== 0 ?\r\n                                postCount.map(rowData =>(\r\n                                    <p className=\"dashBText\">{rowData.postCnt}개</p>\r\n                                )):\r\n                                    <p className=\"dashBText\"><span>0</span> 명</p>\r\n                            }\r\n                                <p className=\"dashSText\">게시물 수</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"dashBox\">\r\n                            <div className=\"dashImgBox\"><i class=\"fas fa-comment-dots\"></i></div>\r\n                            <div className=\"dashTextBox\">\r\n                                { chatCount !== 0 ?\r\n                                    chatCount.map(rowData =>(\r\n                                        <p className=\"dashBText\">{rowData.roomCnt}개</p>\r\n                                    )):\r\n                                        <p className=\"dashBText\"><span>0</span> 명</p>\r\n                                }\r\n                                <p className=\"dashSText\">채팅방 수</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"dashBox\">\r\n                            <div className=\"dashImgBox\"><i class=\"far fa-question-circle\"></i></div>\r\n                            <div className=\"dashTextBox\">\r\n                                { questionCount !== 0 ?\r\n                                    questionCount.map(rowData =>(\r\n                                        <p className=\"dashBText\">{rowData.inquiryCnt}개</p>\r\n                                    )):\r\n                                        <p className=\"dashBText\"><span>0</span> 명</p>\r\n                                }\r\n                                <p className=\"dashSText\">문의 수</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dashFlexBox\">\r\n                        <div className=\"dashListBox\">\r\n                            <i class=\"fas fa-user\"></i>\r\n                            <p className=\"ListTitle\">최신 회원</p>\r\n                            { member.length !== 0 ?\r\n                                member.map(rowData => (\r\n                                    <div className=\"sListBox\">\r\n                                        <Link to={\"/admin/member/detail/\" + rowData.idx}><p>{rowData.email}</p></Link>\r\n                                    </div>\r\n                                )):\r\n                                    <div className=\"sListBox\">\r\n                                        <p>게시글이 없습니다</p>\r\n                                    </div>\r\n                            } \r\n                        </div>\r\n                        <div className=\"dashListBox\">\r\n                        <i class=\"fas fa-clipboard-list\"></i>\r\n                            <p className=\"ListTitle\">최신 게시물</p>\r\n                            { post.length !== 0 ?\r\n                                post.map(rowData => (\r\n                                <div className=\"sListBox\">\r\n                                    <Link to={\"/admin/post/detail/\" + rowData.idx}><p>{rowData.postContent}</p></Link>\r\n                                </div>\r\n                            )):\r\n                                <div className=\"sListBox\">\r\n                                    <p>게시글이 없습니다</p>\r\n                                </div>\r\n                            } \r\n                        </div>\r\n                        <div className=\"dashListBox\">\r\n                            <i class=\"fas fa-bell\"></i>\r\n                            <p className=\"ListTitle\">최신 문의 사항</p>\r\n                            { question.length !== 0 ?\r\n                                question.map(rowData => (\r\n                                    <div className=\"sListBox\">\r\n                                        <Link to={\"/admin/question/detail/\" + rowData.idx}><p>{rowData.inquiryContent}</p></Link>\r\n                                    </div>\r\n                                )):\r\n                                    <div className=\"sListBox\">\r\n                                        <p>게시글이 없습니다</p>\r\n                                    </div>\r\n                            }   \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dashChatFlexBox\">\r\n                        <div className=\"dashChatTextBox\">\r\n                            <i class=\"fas fa-comments\"></i>\r\n                            <p>최신 채팅방</p>\r\n                        </div>\r\n                        <div className=\"dashChatListBox\">\r\n                        { chat.length !== 0 ?\r\n                            chat.map(rowData => (\r\n                                <Link to={\"/admin/chat/detail/\" + rowData.idx}><p><span>{rowData.title}</span> - {rowData.type}채팅 / 인원 : {rowData.ChatCnt}명(정영범 외 {rowData.ChatCnt - 1}명) / 생성날짜 : {rowData.createdAt} </p></Link>\r\n                            )):\r\n                                <p>게시글이 없습니다</p>\r\n                        } \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </MainForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default MainPage;","C:\\project\\us\\frontend\\src\\admin\\loginPage.jsx",["318","319","320","321","322"],"import axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\naxios.defaults.withCredentials = true;\r\n\r\nconst LoginForm = styled.div`\r\n    .login-form{width: 35rem; position:absolute; top:50%; left:50%; transform: translate(-50%, -50%);}\r\n    .login_logo_box{text-align: center;}\r\n    .login-text{margin:0; margin-top: 2.7rem; margin-bottom: 1rem; font-size:1.6rem}\r\n    .login-input{width: calc(100% - 3.2rem); font-size: 1.4rem; padding: 1.5rem 1.4rem; border-radius: 15px; border:1.9px solid rgb(219, 219, 219); background: none;}\r\n    .login-input:focus{outline: none; border:1.9px solid rgb(53, 110, 156)}\r\n    .login-button{padding: 1.5rem 0; font-size: 1.4rem; font-weight: bolder; color: white; width: 100%; margin: 3.5rem 0 0; border-radius: 15px; border:0; background: #4fd1c5;}\r\n    .login-button:disabled{ background: #dfdfdf; }\r\n    .login_logo{width: 10rem;}\r\n    .loginPage-text{text-align:center; font-size:1.2rem; color:#8d8d8d;}\r\n    .text{ color: red; margin:0.5rem; font-size: 1.1rem; height: 1rem; }\r\n`;\r\n\r\nlet emailDisable = false;\r\nlet passwordDisable = false;\r\n\r\nconst Form = styled.div` background-color: rgb(248, 250, 252); height: 100%; position: fixed; width: 100%; overflow-y: auto;`;\r\n\r\nfunction Login(){\r\n    const formRef = React.createRef();\r\n    const inputRef = React.createRef();\r\n\r\n    //이메일, 비밀번호 확인\r\n    const [email, setEmail] = React.useState('')\r\n    const [password, setPassword] = React.useState('')\r\n\r\n    //오류메시지 저장\r\n    const [emailMessage, setEmailMessage] = React.useState('')\r\n    const [passwordMessage, setPasswordMessage] = React.useState('')\r\n\r\n    //유효성 검사\r\n    const [isEmail, setIsEmail] = React.useState(false)\r\n    const [isPassword, setIsPassword] = React.useState(false)\r\n\r\n    //이메일\r\n    const emailInput = (e)=>{\r\n        e.preventDefault();\r\n        const regExp = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/\r\n        const email = e.target.value;\r\n        setEmail(email)\r\n        if (!regExp.test(email)) {\r\n            setEmailMessage('* 이메일 형식에 맞게 입력해주세요')\r\n            setIsEmail(false)\r\n            emailDisable = false\r\n        } else {\r\n            setEmailMessage('')\r\n            setIsEmail(true)\r\n            emailDisable = true\r\n        }\r\n        idDisabled()\r\n    }\r\n\r\n    //비밀번호\r\n    const passwordInput = (e)=>{\r\n        e.preventDefault();\r\n        const regExp = /^(?=.*[a-zA-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]).{8,25}$/\r\n        const password = e.target.value;\r\n        setPassword(password)\r\n        if (!regExp.test(password)) {\r\n            setPasswordMessage('* 비밀번호는 영어, 숫자, 특수문자 포함 8자 이상입니다.')\r\n            setIsPassword(false)\r\n            passwordDisable = false\r\n        } else {\r\n            setPasswordMessage('')\r\n            setIsPassword(true)\r\n            passwordDisable = true\r\n        }\r\n        idDisabled()\r\n    }\r\n    \r\n    const [ disabled, setDisabled ] = React.useState('disabled');\r\n\r\n    const idDisabled = () => {\r\n        if(emailDisable===true&&passwordDisable===true){\r\n            setDisabled('');\r\n        }else{\r\n            setDisabled('disabled');\r\n        }\r\n    }\r\n\r\n    const login = async () => {\r\n        let password = document.getElementById('pwInput');\r\n        let idx = document.getElementById('emailInput')\r\n        let log = await axios.get('http://localhost:3001/admin/login?email='+idx.value+\"&userPw=\"+password.value)\r\n        if(log.data===true){\r\n            alert('환영합니다')\r\n            window.location.href=\"/admin/main\"\r\n        }else{\r\n            alert('이메일/비밀번호를 확인하세요')\r\n            window.location.href=\"/admin\"\r\n        }\r\n    }\r\n    return (\r\n        <Form>\r\n        <LoginForm>\r\n            <form className=\"login-form\" ref={formRef}>\r\n                <div className='login_logo_box'><img src=\"/img/admin/us_logo.png\" className=\"login_logo\"/></div>\r\n                <p className='login-text'>이메일</p>\r\n                <input type=\"text\" id=\"emailInput\" className=\"login-input email\" onChange={emailInput} placeholder=\"Your email adress\"/>\r\n                <p className=\"text\">{email.length > 0 && <span className={`message ${isEmail ? 'success' : 'error'}`}>{emailMessage}</span>}</p>\r\n                <p className='login-text'>비밀번호</p>\r\n                <input type=\"password\" id=\"pwInput\" className=\"login-input password\" onChange={passwordInput} placeholder=\"Your password\"/><br/>\r\n                <p className=\"text\">{password.length > 0 && <span className={`message ${isPassword  ? 'success' : 'error'}`}>{passwordMessage}</span>}</p>\r\n                <button className=\"login-button\" type=\"button\" onClick={login} disabled={disabled}>로그인</button>\r\n                <p className=\"loginPage-text\">Us Admin Server</p>\r\n            </form>\r\n        </LoginForm>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\project\\us\\frontend\\src\\user\\mainTalkPage.jsx",["323","324","325","326","327","328"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport Header from \"../UserComponents/header\";\r\nimport TalkList from \"../UserComponents/talkList\";\r\nimport MainProfile from \"../UserComponents/mainProfile\";\r\nimport Talk from \"../UserComponents/talk\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst MainForm = styled.div`\r\n    * { text-decoration:none; }\r\n    .container{ padding-top: 1.5rem; max-width:100rem; margin: 0 auto; }\r\n    .sec_chat_box { border-top: 1.5px solid #222; }\r\n`;\r\n\r\nconst MainTalkPage = () =>{\r\n    const param = window.location.search.split('=')[1];\r\n\r\n    return (\r\n        <>\r\n        <Header/>\r\n        <MainForm>\r\n            <div className=\"container\">\r\n                <MainProfile idx={param}/>\r\n                <TalkList idx={param}/>\r\n            </div>\r\n        </MainForm>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainTalkPage;","C:\\project\\us\\frontend\\src\\AdminComponents\\header.jsx",["329","330"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst HeaderForm = styled.div`\r\n    background-color: rgb(248, 250, 252);\r\n    width: 100%;\r\n    height: 7rem;\r\n    display: flex;\r\n    align-items: center;\r\n    position: fixed;\r\n    z-index: 100;\r\n    margin-top: 0;\r\n    box-shadow: 3px 3px 3px rgb(240,240,240);\r\n    padding-top: 1rem;\r\n    .main-logo {\r\n        margin-left: 5%;\r\n    }\r\n    .logout-logo {\r\n        margin-left: 83%;\r\n    }\r\n    .logo {\r\n        width: 10rem;\r\n    }\r\n    .logo2 {\r\n        width: 3.5rem;\r\n    }\r\n`;\r\nconst Header = () => {\r\n\r\n    const logout = async () =>{\r\n        await axios.get('http://localhost:3001/admin/logout')\r\n        alert('로그아웃 되었습니다')\r\n        window.location.href=\"/admin\"\r\n    }\r\n    \r\n    return (\r\n        <HeaderForm>\r\n            <Link to=\"/admin/main\" className=\"main-logo\">\r\n                <img src=\"/img/admin/us_logo.png\" className=\"logo\"/>\r\n            </Link>\r\n            <div className=\"logout-logo\">\r\n                <img src=\"/img/admin/logout.png\" className=\"logo2\" onClick={logout}/>\r\n            </div>  \r\n        </HeaderForm>  \r\n    );\r\n}\r\n\r\nexport default Header;","C:\\project\\us\\frontend\\src\\AdminComponents\\sidebar.jsx",["331","332","333","334"],"import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nconst SideBarForm = styled.div`\r\n    background-color: rgb(248, 250, 252); width: 24rem; margin-top: 7rem; box-sizing: border-box; position:fixed;  overflow-y: auto; box-shadow: 3px 3px 3px rgb(240,240,240); height: 100%;\r\n    .link-form { padding: 10px 0; }\r\n    .side-link { display: block; text-decoration : none; width: 16rem; margin: 2.5rem auto 0; border-radius: 5px; padding: 1rem 1rem 1.2rem; color: black; font-weight: bold; font-size: 1.34rem; }\r\n    .side-link:hover { background-color: white; text-decoration : none; color: #14c1c7; font-weight: bold; font-size: 1.36rem; box-shadow: 2px 2px 2px #9b9b9b; }\r\n    .fa-house-user, .fa-users, .fa-clipboard-list, .fa-comment-dots, .fa-quora { color: #14c1c7; margin-right: 1.1rem; font-size: 2rem; width: 4rem; }\r\n    .sub-sidebar { font-weight: bold; font-size: 1.8rem; color: #666; width: 14rem; margin: 6rem auto 3rem; }\r\n    .sub-link { font-size: 1.5rem; font-weight: bold; color: #777; margin-left: 1rem; }\r\n    .link-main img { width: 6rem;  border-radius: 10px; }\r\n    .link-main a {  text-decoration:none;  display: flex; }\r\n    .link-main { margin-left: 2.5rem; margin-top: 5rem; box-shadow: 3px 3px 3px 3px rgb(240, 240, 240); border-radius: 10px; padding-left: 1rem; width: 18rem; }\r\n    .small-text { color: #999; text-align: center; font-size: 1.1rem; margin-top: 4rem; margin-bottom: 5rem; }\r\n`;\r\n\r\nconst SideBar = () => {\r\n    \r\n    let location = window.location.pathname;\r\n    let curr = location.split('/')\r\n\r\n    React.useEffect(\r\n        (e) => {\r\n            let current = document.getElementById(curr[2]);\r\n            current.style.backgroundColor = \"white\";\r\n            current.style.textDecoration = \"none\";\r\n            current.style.color = \"#14c1c7\";\r\n            current.style.fontWeight = \"bold\";\r\n            current.style.fontSize = \"1.36rem\";\r\n            current.style.boxShadow = \"2px 2px 2px #9b9b9b\";\r\n        },\r\n    );\r\n\r\n\r\n    return (\r\n        <SideBarForm>\r\n            <div className=\"link-form\">\r\n                <p className=\"sub-sidebar\">ADMIN</p>\r\n                <Link to=\"/admin/main\" className=\"side-link first-link\" id=\"main\"><i class=\"fas fa-house-user\"></i>메인</Link>\r\n                <Link to=\"/admin/member\" className=\"side-link\" id=\"member\"><i class=\"fas fa-users\"></i>회원관리</Link>\r\n                <Link to=\"/admin/post\" className=\"side-link\" id=\"post\"><i class=\"fas fa-clipboard-list\"></i>게시물관리</Link>\r\n                <Link to=\"/admin/chat\" className=\"side-link\" id=\"chat\"><i class=\"far fa-comment-dots\"></i>채팅관리</Link>\r\n                <Link to=\"/admin/question\" className=\"side-link\" id=\"question\"><i class=\"fab fa-quora\"></i>문의사항</Link>\r\n            </div>\r\n            <div className=\"link-form link-main\">\r\n                <Link to=\"/login\"><img src=\"/img/admin/us_main.png\" /><p className=\"sub-link\">Go WebSite <i class=\"fas fa-angle-right\"></i></p></Link>\r\n            </div>\r\n            <div className=\"small-form\">\r\n                <p className=\"small-text\">Made In Korea</p>\r\n            </div>\r\n        </SideBarForm>  \r\n    );\r\n}\r\n\r\nexport default SideBar;","C:\\project\\us\\frontend\\src\\UserComponents\\header.jsx",["335","336","337"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport styled from \"styled-components\"; //css 사용할 때 import시켜줘야 함\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n\r\nconst HeaderForm = styled.div`\r\n    .header_container{border-bottom: 1px solid #8080803b; background-color: rgb(255, 255, 255); width: 100%; height: 5rem; display: flex; justify-content: space-evenly;}\r\n    .header_box{display: flex;}\r\n    .logo_img{vertical-align: middle; width: 5rem;}\r\n    .logo_box{margin-right: 400px; vertical-align: middle; padding-top: 1rem;}\r\n    .logout_box{margin-left: 40rem; vertical-align: middle; padding-top: 1rem;}\r\n    .logout_tag{width: 7rem;\r\n        cursor: pointer;}\r\n`;\r\n    \r\n    const logout = () =>{\r\n        axios.get('/member/logout')\r\n        .then(res =>{\r\n            alert(\"로그아웃 되었습니다.\")\r\n            window.location.href=\"/\"\r\n\r\n        })\r\n    }\r\nconst Header = () =>{\r\n    // memberIdx\r\n    const param = window.location.search.split('=')[1];\r\n    return (\r\n        <HeaderForm>\r\n            <div className=\"header_container\">\r\n                <div className=\"header_box\">\r\n                    <div className=\"logo_box\">\r\n                        <Link to={\"/main?idx=\"+param}><img className=\"logo_img\" alt=\"logo\" src=\"/img/us_logo.png\"/></Link>\r\n                    </div>\r\n                    <div className=\"logout_box\">\r\n                        <img className=\"logout_tag\" onClick={logout} alt=\"logout\" src=\"/img/logout_img.png\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </HeaderForm>\r\n    );\r\n} \r\n\r\nexport default Header;","C:\\project\\us\\frontend\\src\\UserComponents\\loginMap.jsx",["338","339"],"/*global kakao*/ \r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst LoginMap=()=>{\r\n    const { kakao } = window;\r\n    const [myPosition, setMyPosition] = useState([]);\r\n    \r\n    // 내 위치 불러오기\r\n    function getLocation() {\r\n        if (navigator.geolocation) { // GPS를 지원하면\r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n                // alert(position.coords.latitude + ' ' + position.coords.longitude);\r\n                setMyPosition(position.coords);\r\n            }, function(error) {\r\n                console.error(error);\r\n            }, {\r\n                enableHighAccuracy: true,\r\n                maximumAge: 0,\r\n                timeout: Infinity\r\n            });\r\n        } else {\r\n            alert('GPS를 지원하지 않습니다');\r\n        }\r\n    }\r\n    getLocation();\r\n    console.log(myPosition);\r\n\r\n    useEffect(()=>{\r\n        \r\n        // 지도 활성화\r\n        var container = document.getElementById('map');\r\n        var options = {\r\n            center: new kakao.maps.LatLng(myPosition.latitude, myPosition.longitude),\r\n            level: 3\r\n        };\r\n        var map = new kakao.maps.Map(container, options);\r\n\r\n        // 마커 표시\r\n        var markerPosition  = new kakao.maps.LatLng(myPosition.latitude, myPosition.longitude); \r\n        var marker = new kakao.maps.Marker({\r\n            map: map,\r\n            position: markerPosition,\r\n            title : \"Seongnam, Korea\",\r\n            clickable: true // 마커를 클릭했을 때 지도의 클릭 이벤트가 발생하지 않도록 설정합니다\r\n        });\r\n        marker.setMap(map);\r\n        \r\n        // 지도에 컨트롤 추가\r\n        var control = new kakao.maps.ZoomControl();\r\n        map.addControl(control, kakao.maps.ControlPosition.TOPRIGHT); \r\n\r\n    }, [myPosition])\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"map\" style={{width:\"600px\", height:\"400px\"}}></div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginMap;","C:\\project\\us\\frontend\\src\\UserComponents\\mainProfile.jsx",["340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359"],"C:\\project\\us\\frontend\\src\\UserComponents\\mainMap.jsx",["360","361"],"/* global kakao */\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst MapContainer = (idx) => {\r\n    const { kakao } = window;\r\n    const [myPosition, setMyPosition] = useState([]);\r\n\r\n    // 내 위치 불러오기\r\n    function getLocation() {\r\n        if (navigator.geolocation) { // GPS를 지원하면\r\n            navigator.geolocation.getCurrentPosition(function(position) {\r\n                // alert(position.coords.latitude + ' ' + position.coords.longitude);\r\n                setMyPosition(position.coords);\r\n            }, function(error) {\r\n                console.error(error);\r\n            }, {\r\n                enableHighAccuracy: true,\r\n                maximumAge: 0,\r\n                timeout: Infinity\r\n            });\r\n        } else {\r\n            alert('GPS를 지원하지 않습니다');\r\n        }\r\n    }\r\n    getLocation();\r\n    console.log(myPosition);\r\n\r\n    useEffect(() => {\r\n        \r\n        const container = document.getElementById('map');\r\n        const options = {\r\n            center: new kakao.maps.LatLng(myPosition.latitude, myPosition.longitude),\r\n            level: 3\r\n        };\r\n\r\n        // map\r\n        const map = new kakao.maps.Map(container, options);\r\n\r\n        // 마커를 표시할 위치와 title 객체 배열\r\n        var positions = [\r\n            {\r\n                title: '정순', \r\n                latlng: new kakao.maps.LatLng(myPosition.latitude, myPosition.longitude),\r\n                image:\"img/marker_soon.png\"\r\n            },\r\n            {\r\n                title: '영범', \r\n                latlng: new kakao.maps.LatLng(37.53050019531031, 126.72251599828131),\r\n                image:\"img/marker_defalut.png\"\r\n            },\r\n            {\r\n                title: '미정', \r\n                latlng: new kakao.maps.LatLng(37.3582321773491, 126.93296899827823),\r\n                image:\"img/marker_mee.png\"\r\n            },\r\n            {\r\n                title: '재성',\r\n                latlng: new kakao.maps.LatLng(37.566348088940565, 127.04295426944607),\r\n                image:\"img/marker_sorry.png\"\r\n            },\r\n            {\r\n                title: '서영',\r\n                latlng: new kakao.maps.LatLng(37.503290447218596, 126.94776267685054),\r\n                image:\"img/marker_defalut.png\"\r\n            },\r\n            {\r\n                title: '소민',\r\n                latlng: new kakao.maps.LatLng(36.99128209052405, 127.08492735409203),\r\n                image:\"img/marker_defalut.png\"\r\n            },\r\n            {\r\n                title: '윤정',\r\n                latlng: new kakao.maps.LatLng(37.14590120049749, 127.0672146596489),\r\n                image:\"img/marker_defalut.png\"\r\n            }\r\n        ];\r\n        \r\n        // 마커를 생성\r\n        for (var i = 0; i < positions.length; i ++) {\r\n            \r\n            // 마커 이미지의 이미지 크기 입니다\r\n            var imageSize = new kakao.maps.Size(68, 70); \r\n            \r\n            // 마커 이미지를 생성합니다\r\n            var markerImage = new kakao.maps.MarkerImage(positions[i].image, imageSize); \r\n            \r\n            // 마커를 생성합니다\r\n            var marker = new kakao.maps.Marker({\r\n                map: map, // 마커를 표시할 지도\r\n                position: positions[i].latlng, // 마커를 표시할 위치\r\n                title : positions[i].title, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다\r\n                image : markerImage,   // 마커 이미지 \r\n                clickable: true // 마커를 클릭했을 때 지도의 클릭 이벤트가 발생하지 않도록 설정합니다\r\n            });\r\n\r\n            // 마커에 클릭이벤트를 등록합니다\r\n            kakao.maps.event.addListener(marker, 'click', function() {\r\n                window.location.href = '/main';\r\n            });\r\n        }\r\n\r\n        // 마커를 지도 위에 표시\r\n        marker.setMap(map);\r\n\r\n        // 지도에 컨트롤 추가\r\n        var control = new kakao.maps.ZoomControl();\r\n        map.addControl(control, kakao.maps.ControlPosition.TOPRIGHT); \r\n        \r\n    }, [myPosition]);\r\n\r\n    return (\r\n        <div id='map' style={{\r\n            width: '100rem',\r\n            height: '50rem',\r\n            marginBottom: '8rem'\r\n        }}></div>\r\n    );\r\n}\r\n\r\nexport default MapContainer;","C:\\project\\us\\frontend\\src\\UserComponents\\talkList.jsx",["362","363","364","365","366","367","368","369","370","371"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport styled from \"styled-components\"; //css 사용할 때 import시켜줘야 함\r\nimport {Link} from 'react-router-dom';\r\nimport Talk from './talk';\r\nimport axios from 'axios';\r\n\r\nconst TalkListWrap = styled.div`\r\n    max-width: 100rem;\r\n    margin: 0 auto;\r\n    margin-bottom: 8rem;\r\n\r\n    * { font-size: 1.6rem; color: #222; }\r\n\r\n    .talkProfileImg { width: 7rem; cursor: pointer; border-radius: 50%; border: 3px solid #423b422e; }\r\n    .talkList { overflow-y: scroll; padding: 2rem; padding-bottom: 0; max-height: 60rem; }\r\n    .talkItem { display: flex; padding: 1.5rem; border-bottom: 1px solid #efefef; cursor:pointer; }\r\n    .talkItem:hover{ background-color: #efefef; }\r\n    .talkDetailWrap { margin-left: 2rem; max-width: 50%; margin-top: 1rem; }\r\n    .talkProfileName { margin-bottom: .5rem; font-weight: 600; }\r\n    .talkDetail { word-break : keep-all; white-space: nowrap; line-height: 2.5rem; color: #222; height: 2.5rem; text-overflow: ellipsis; overflow: hidden; }\r\n    .talkRecord{ margin-top: 1.5rem; margin-left: auto; text-align: right; }\r\n    .talkDate{ color: #7e7e7e; }\r\n    .readCount{ color: #fff; background-color: #f44; border-radius: 50%; display: inline-block; padding: .5rem; line-height: 1rem; }\r\n`;\r\n\r\n// 몇일전, 분, 시간, 일, 년 까지 구하는 함수\r\nfunction timeForToday(value) {\r\n    const today = new Date();\r\n    const timeValue = new Date(value);\r\n    const year = timeValue.getFullYear(); \r\n    const month = timeValue.getMonth() + 1; \r\n    const date = timeValue.getDate();\r\n    const hour = timeValue.getHours();\r\n    const minute = timeValue.getMinutes();\r\n    let halfHour = '오전';\r\n\r\n    const betweenTime = Math.floor((today.getTime() - timeValue.getTime()) / 1000 / 60);\r\n\r\n    if (betweenTime < 1) return '방금전';\r\n    if (betweenTime < 60) {\r\n        return `${betweenTime}분전`;\r\n    }\r\n\r\n    const betweenTimeHour = Math.floor(betweenTime / 60);\r\n    if (betweenTimeHour < 24) {\r\n        if(hour>13) halfHour = '오후';\r\n        return halfHour +' '+ timeValue.toTimeString().substring(0,5);\r\n    }\r\n\r\n    return `${year}-${month >= 10 ? month : '0' + month}-${date >= 10 ? date : '0' + date}`;\r\n}\r\n\r\nconst TalkList = (idx)=>{\r\n    const cookie = document.cookie;\r\n    const [posts, setPosts] = React.useState({});\r\n    const [current, setCurrent] = React.useState({});\r\n    \r\n    // 채팅창 팝업\r\n    const[addOn, setAddOn] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log('리스트에서 idx뽑기',idx);\r\n        console.log('리스트에서 idx뽑기',idx.idx);\r\n        try{\r\n            Promise.allSettled([\r\n                axios.get(`http://localhost:3000/main/chat?idx=${idx.idx}`, {\r\n                    validateStatus: function (status) {\r\n                      return status < 500; // Resolve only if the status code is less than 500\r\n                    }\r\n                })\r\n            ]).then((res) => {\r\n                console.log(res);\r\n                console.log(res[0].value.data);\r\n                setPosts(res[0].value.data);\r\n            })\r\n        } catch(e){\r\n            console.error(e.message)\r\n        }\r\n    },[])\r\n    \r\n    const onView = (roomIdx) => {\r\n        setCurrent(posts.find(item => item.idx === roomIdx))\r\n        console.log(current);\r\n    }\r\n\r\n    const onTalkPop = () => {\r\n        setAddOn(!addOn);\r\n        // 팝업 창 띄울 시 body 스크롤\r\n        if(addOn==false){\r\n            document.body.style.overflow = \"hidden\";\r\n        }else if(addOn==true){\r\n            // document.body.style.overflow = \"unset\";\r\n        }\r\n    }\r\n\r\n    // 조회 데이터 존재할 경우\r\n    if(posts.length > 0) {\r\n        return (\r\n            <TalkListWrap>\r\n                {addOn ? <Talk current={current} loginIdx={idx.idx}/> : \"\"}\r\n                <div className='talkItemList'>\r\n                {\r\n                    posts.map(post => (\r\n                        <a onClick={()=>{\r\n                            onTalkPop();\r\n                            onView(post.idx);\r\n                        }}>\r\n                            <div className='talkItem' onContextMenu={(e) => {\r\n                                e.preventDefault();\r\n                                alert('우클!');\r\n                            }}>\r\n                                <div className='talkProfileImgWrap'>\r\n                                    <img className='talkProfileImg' src={post.img==null||post.img==''? \"/img/blank_profile.png\": \"/\"+post.img} alt='프로필 사진'></img>\r\n                                </div>\r\n                                <div className='talkDetailWrap'>\r\n                                    <div className='talkProfileName'>{post.name}</div>\r\n                                    <div className='talkDetail'>{post.title}</div>\r\n                                </div>\r\n                                <div className='talkRecord'>\r\n                                    <div className='talkDate'>{timeForToday(post.time)}</div>\r\n                                </div>\r\n                            </div>\r\n                        </a>\r\n                    ))\r\n                }\r\n                </div>\r\n            </TalkListWrap>\r\n        )\r\n        \r\n    } \r\n    else { // 조회 데이터 존재하지 않을 경우\r\n        return (\r\n            <div style={{textAlign: \"center\", fontSize: \"1.5rem\", padding: \"10rem\", color: \"Gray\"}}>채팅방이 없습니다. 친구와 채팅을 해보세요!</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TalkList;","C:\\project\\us\\frontend\\src\\UserComponents\\talk.jsx",["372","373","374","375","376","377","378","379"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport styled from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\n\r\nconst TalkWrap = styled.div`\r\n    z-index: 100; \r\n    position:fixed; \r\n    left:0; \r\n    top:0; \r\n    width:100%; \r\n    height:100%; \r\n    background:rgba(0,0,0,0.3);\r\n\r\n    input, textarea, button { padding: 0; outline: 0; border: 0; resize: none; border-radius: 0; -webkit-appearance: none; background-color: rgba(0,0,0,0); }\r\n    .talkBox { position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); background: #aee7e2; border:1px solid rgba(0,0,0,0.3s); width: 60rem; height: 70rem; }\r\n    .talkHeader { display: flex; align-items: center; padding: 2rem; background-color: rgb(0 0 0 / 8%); }\r\n    .recieverName { align-items: center; margin-left: 2rem; font-size: 2rem; font-weight: 600; color: rgba(54,54,54); }\r\n    .talkToggle{ margin-left: auto; margin-right: 1rem; position: relative; }\r\n    .talkToggle > img { width: 3rem; height: 2.7rem; cursor: pointer; }\r\n    .talkToggle > img:first-child { margin-right:1rem; }\r\n    .talkExitPop { position: absolute; width: max-content; top: 5rem; background-color: #fff; padding: .7rem 2.5rem; border:1px solid rgb(0 0 0 / 8%); cursor: pointer; display: none; }\r\n    .talkExitPop:hover { background-color: rgb(236, 236, 236);}\r\n    .talkProfileImg { width: 7rem; cursor: pointer; }\r\n    .talkList { overflow-y: scroll; padding: 2rem; padding-bottom: 0; height: 47rem; }\r\n    .reciverTalk { display: flex; align-items: flex-start; margin-bottom: 2rem; }\r\n    .talkContents .talkProfileImg { width: 6.5rem; }\r\n    .talkDetailWrap { margin-left: 1rem; max-width: 50%; margin-top: 1rem; }\r\n    .talkProfileName { margin-bottom: .5rem; font-weight: 600; }\r\n    .talkDetailList { margin-left: .5rem; background-color: #fff; padding: .7rem; border-radius: .5rem; word-break : break-all; line-height: 2.5rem; }\r\n    .senderTalk { display: flex; flex-direction: row-reverse; margin-bottom: 2rem; }\r\n    .talkSendWrap{ padding: 2rem; position: relative; background-color: #fff; }\r\n    .talkTextInput { height: 10rem; width: 90%; font-family: \"Nanum Gothic\", sans-serif; }\r\n    .talkSendBtn { display: inline-block; position: absolute; top: 2rem; right: 2rem; background-color: rgb(204, 204, 204); color: #fff; padding: .5rem .7rem; border: 1px solid rgb(0 0 0 / 10%); border-radius: 5px; cursor: pointer; }\r\n    .talkSendBtn:hover { box-shadow: rgb(0 0 0 / 20%) 2px 2px 2px; }\r\n    .talkSendBtn.active { color: #333; }\r\n`;\r\n\r\nlet socket;\r\n\r\nconst Talk = ({current, loginIdx})=>{\r\n    const [img, setImg] = useState('');\r\n    const [name, setName] = useState('');\r\n    const [idx, setIdx] = useState('');\r\n    const [memberIdx, setMemberIdx] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const [addOn, setAddOn] = useState(true);\r\n    // const[cookie, setCookie] = useState('');\r\n\r\n    const ENDPORT = 'localhost:3001';\r\n    \r\n    const searchElement = useRef(null); // DOM 요소를 searchElement에 할당\r\n    \r\n    useEffect(() => {\r\n        console.log('current뽑기',current);\r\n        // current 에서 받은 데이터 저장\r\n        const {img, name, idx, memberIdx, title} = current;\r\n        if(img==null || img==''){\r\n            setImg('img/blank_profile.png');\r\n        } else setImg(img);\r\n        setName(name);\r\n        setIdx(idx);\r\n        setMemberIdx(memberIdx);\r\n        setTitle(title);\r\n\r\n        // soket.io\r\n        socket = io(ENDPORT);\r\n        console.log(socket);\r\n        socket.on('connection', function(){\r\n            console.log('웹소켓 서버에 연결되었습니다.');\r\n            \r\n        });\r\n        socket.emit('joinRoom', idx);   // {idx:idx, name:name}\r\n        console.log(`${title} 방 입장`)\r\n\r\n         // textarea focus 할당\r\n        if (searchElement.current) { // 할당한 DOM 요소가 불러지면 (마운트 되면)\r\n            searchElement.current.focus(); // textarea에 focus 할당!\r\n        }\r\n        console.log('로그인Idx',loginIdx);\r\n    }, [current]);\r\n\r\n    // 백에서 받아온 messase 처리\r\n    useEffect(()=>{\r\n        socket.on('send', function(msg){\r\n            console.log('백에서온거',JSON.stringify(msg));\r\n            setMessages([...messages, msg]);\r\n            console.log(messages);\r\n        })\r\n    }, [messages]);\r\n\r\n    // sendBtn 클릭\r\n    const sendMsg = (event)=>{\r\n        event.preventDefault();\r\n        console.log('왜또안나오니',loginIdx);\r\n\r\n        const data = document.querySelector('.talkTextInput').value;\r\n        const output = {idx:idx, memberIdx: loginIdx, sender:name, commend:'chat', type:'text', data:data, roomName : title};\r\n        console.log('프론트에서 보낼거',output);\r\n        if(socket == undefined){\r\n            alert('서버에 연결되지 않았습니다. 서버를 연결하세요');\r\n            return;\r\n        }\r\n        socket.emit('message', output);\r\n        if (searchElement.current) { // 할당한 DOM 요소가 불러지면 (마운트 되면)\r\n            searchElement.current.value='';\r\n            searchElement.current.focus();\r\n        }\r\n    }\r\n\r\n    const closePop = () => {\r\n        setAddOn(false);\r\n        document.body.style.overflowY = \"unset\";\r\n    }\r\n\r\n    return(\r\n        <>\r\n        {addOn ? (\r\n            <TalkWrap>\r\n            <div className=\"talkBox\">\r\n                <div className='talkHeader'>\r\n                    <div className='talkProfileImgWrap'>\r\n                        <img className='talkProfileImg' src={img} alt='프로필 사진'/>\r\n                    </div>\r\n                    <h2 className='recieverName'>{title}</h2>\r\n                    <div className='talkToggle'>\r\n                        {/* <img src='img/talk_toggle.svg' alt='메뉴'></img> */}\r\n                        <img src='img/close_icon.svg' alt='나가기' onClick={closePop}></img>\r\n                        <div className='talkExitPop'>채팅방 나가기</div>\r\n                    </div>\r\n                </div>\r\n                <div className='talkContents'>\r\n                    <div className='talkList'>\r\n                        <ScrollToBottom>\r\n                            {messages.map((message, i)=>{\r\n                                let isSentByCurrentUser = false;\r\n\r\n                                console.log(message);\r\n                                if(message.memberIdx === loginIdx){\r\n                                    isSentByCurrentUser = true;\r\n                                }\r\n\r\n                                return (\r\n                                    isSentByCurrentUser ? (\r\n                                    <div className='senderTalk'>\r\n                                        <div className='talkDetailWrap'>\r\n                                            <div className='talkDetailList'>{message.data}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                    )\r\n                                    : (\r\n                                        <div className='reciverTalk'>\r\n                                            <div className='talkProfileImgWrap'>\r\n                                                <img className='talkProfileImg' src={img} alt='프로필 사진'></img>\r\n                                            </div>\r\n                                            <div className='talkDetailWrap'>\r\n                                                <div className='talkProfileName'>{name}</div>\r\n                                                <div className='talkDetailList'>{message.data}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                )\r\n                            })}\r\n                        </ScrollToBottom>\r\n                    </div>\r\n                    <div className='talkSendWrap'>\r\n                        <textarea ref={searchElement} className='talkTextInput' onKeyPress={event => event.key === 'Enter' ? sendMsg(event) : null}></textarea>\r\n                        <button className='talkSendBtn' onClick={sendMsg}>전송</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </TalkWrap>\r\n        ) : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Talk;","C:\\project\\us\\frontend\\src\\user\\detailPage.jsx",["380","381","382","383","384","385","386","387","388"],"C:\\project\\us\\frontend\\src\\UserComponents\\replyLike.jsx",["389","390","391","392"],{"ruleId":"393","replacedBy":"394"},{"ruleId":"395","replacedBy":"396"},{"ruleId":"397","severity":1,"message":"398","line":4,"column":10,"nodeType":"399","messageId":"400","endLine":4,"endColumn":16},{"ruleId":"401","severity":1,"message":"402","line":53,"column":18,"nodeType":"403","messageId":"404","endLine":53,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":76,"column":18,"nodeType":"403","messageId":"404","endLine":76,"endColumn":20},{"ruleId":"405","severity":1,"message":"406","line":86,"column":15,"nodeType":"407","endLine":99,"endColumn":6},{"ruleId":"405","severity":1,"message":"408","line":99,"column":8,"nodeType":"409","endLine":99,"endColumn":16,"suggestions":"410"},{"ruleId":"401","severity":1,"message":"402","line":149,"column":19,"nodeType":"403","messageId":"404","endLine":149,"endColumn":21},{"ruleId":"401","severity":1,"message":"402","line":170,"column":18,"nodeType":"403","messageId":"404","endLine":170,"endColumn":20},{"ruleId":"405","severity":1,"message":"406","line":180,"column":15,"nodeType":"407","endLine":194,"endColumn":6},{"ruleId":"405","severity":1,"message":"408","line":194,"column":8,"nodeType":"409","endLine":194,"endColumn":16,"suggestions":"411"},{"ruleId":"401","severity":1,"message":"402","line":203,"column":18,"nodeType":"403","messageId":"404","endLine":203,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":47,"column":18,"nodeType":"403","messageId":"404","endLine":47,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":80,"column":18,"nodeType":"403","messageId":"404","endLine":80,"endColumn":20},{"ruleId":"405","severity":1,"message":"406","line":96,"column":15,"nodeType":"407","endLine":108,"endColumn":6},{"ruleId":"405","severity":1,"message":"412","line":108,"column":8,"nodeType":"409","endLine":108,"endColumn":16,"suggestions":"413"},{"ruleId":"405","severity":1,"message":"406","line":46,"column":15,"nodeType":"407","endLine":50,"endColumn":6},{"ruleId":"405","severity":1,"message":"414","line":50,"column":8,"nodeType":"409","endLine":50,"endColumn":10,"suggestions":"415"},{"ruleId":"405","severity":1,"message":"406","line":52,"column":15,"nodeType":"407","endLine":54,"endColumn":6},{"ruleId":"405","severity":1,"message":"416","line":54,"column":8,"nodeType":"409","endLine":54,"endColumn":19,"suggestions":"417"},{"ruleId":"418","severity":1,"message":"419","line":87,"column":29,"nodeType":"420","endLine":87,"endColumn":83},{"ruleId":"418","severity":1,"message":"419","line":88,"column":57,"nodeType":"420","endLine":88,"endColumn":163},{"ruleId":"418","severity":1,"message":"419","line":88,"column":163,"nodeType":"420","endLine":88,"endColumn":292},{"ruleId":"405","severity":1,"message":"406","line":31,"column":15,"nodeType":"407","endLine":34,"endColumn":6},{"ruleId":"405","severity":1,"message":"421","line":34,"column":8,"nodeType":"409","endLine":34,"endColumn":10,"suggestions":"422"},{"ruleId":"418","severity":1,"message":"419","line":46,"column":25,"nodeType":"420","endLine":46,"endColumn":100},{"ruleId":"405","severity":1,"message":"406","line":77,"column":15,"nodeType":"407","endLine":89,"endColumn":6},{"ruleId":"405","severity":1,"message":"423","line":89,"column":8,"nodeType":"409","endLine":89,"endColumn":16,"suggestions":"424"},{"ruleId":"405","severity":1,"message":"406","line":91,"column":15,"nodeType":"407","endLine":95,"endColumn":6},{"ruleId":"405","severity":1,"message":"425","line":95,"column":8,"nodeType":"409","endLine":95,"endColumn":17,"suggestions":"426"},{"ruleId":"405","severity":1,"message":"406","line":97,"column":15,"nodeType":"407","endLine":99,"endColumn":6},{"ruleId":"405","severity":1,"message":"416","line":99,"column":8,"nodeType":"409","endLine":99,"endColumn":19,"suggestions":"427"},{"ruleId":"401","severity":1,"message":"402","line":104,"column":18,"nodeType":"403","messageId":"404","endLine":104,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":124,"column":18,"nodeType":"403","messageId":"404","endLine":124,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":149,"column":19,"nodeType":"403","messageId":"404","endLine":149,"endColumn":21},{"ruleId":"401","severity":1,"message":"402","line":151,"column":25,"nodeType":"403","messageId":"404","endLine":151,"endColumn":27},{"ruleId":"418","severity":1,"message":"419","line":165,"column":29,"nodeType":"420","endLine":165,"endColumn":83},{"ruleId":"418","severity":1,"message":"419","line":166,"column":57,"nodeType":"420","endLine":166,"endColumn":163},{"ruleId":"418","severity":1,"message":"419","line":166,"column":163,"nodeType":"420","endLine":166,"endColumn":292},{"ruleId":"418","severity":1,"message":"419","line":179,"column":41,"nodeType":"420","endLine":179,"endColumn":71},{"ruleId":"418","severity":1,"message":"419","line":188,"column":41,"nodeType":"420","endLine":188,"endColumn":71},{"ruleId":"418","severity":1,"message":"419","line":197,"column":41,"nodeType":"420","endLine":197,"endColumn":71},{"ruleId":"397","severity":1,"message":"428","line":8,"column":8,"nodeType":"399","messageId":"400","endLine":8,"endColumn":10},{"ruleId":"405","severity":1,"message":"406","line":36,"column":15,"nodeType":"407","endLine":41,"endColumn":6},{"ruleId":"405","severity":1,"message":"429","line":41,"column":8,"nodeType":"409","endLine":41,"endColumn":10,"suggestions":"430"},{"ruleId":"397","severity":1,"message":"431","line":58,"column":11,"nodeType":"399","messageId":"400","endLine":58,"endColumn":22},{"ruleId":"397","severity":1,"message":"432","line":64,"column":11,"nodeType":"399","messageId":"400","endLine":64,"endColumn":17},{"ruleId":"401","severity":1,"message":"402","line":65,"column":18,"nodeType":"403","messageId":"404","endLine":65,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":77,"column":19,"nodeType":"403","messageId":"404","endLine":77,"endColumn":21},{"ruleId":"401","severity":1,"message":"402","line":79,"column":25,"nodeType":"403","messageId":"404","endLine":79,"endColumn":27},{"ruleId":"405","severity":1,"message":"406","line":84,"column":15,"nodeType":"407","endLine":89,"endColumn":6},{"ruleId":"405","severity":1,"message":"433","line":89,"column":8,"nodeType":"409","endLine":89,"endColumn":16,"suggestions":"434"},{"ruleId":"405","severity":1,"message":"406","line":92,"column":15,"nodeType":"407","endLine":95,"endColumn":6},{"ruleId":"405","severity":1,"message":"435","line":95,"column":8,"nodeType":"409","endLine":95,"endColumn":17,"suggestions":"436"},{"ruleId":"418","severity":1,"message":"419","line":175,"column":53,"nodeType":"420","endLine":175,"endColumn":132},{"ruleId":"401","severity":1,"message":"402","line":77,"column":18,"nodeType":"403","messageId":"404","endLine":77,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":79,"column":24,"nodeType":"403","messageId":"404","endLine":79,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":94,"column":18,"nodeType":"403","messageId":"404","endLine":94,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":114,"column":18,"nodeType":"403","messageId":"404","endLine":114,"endColumn":20},{"ruleId":"405","severity":1,"message":"406","line":123,"column":15,"nodeType":"407","endLine":135,"endColumn":6},{"ruleId":"405","severity":1,"message":"423","line":135,"column":8,"nodeType":"409","endLine":135,"endColumn":16,"suggestions":"437"},{"ruleId":"405","severity":1,"message":"406","line":137,"column":15,"nodeType":"407","endLine":140,"endColumn":6},{"ruleId":"405","severity":1,"message":"438","line":140,"column":8,"nodeType":"409","endLine":140,"endColumn":16,"suggestions":"439"},{"ruleId":"418","severity":1,"message":"419","line":156,"column":41,"nodeType":"420","endLine":156,"endColumn":135},{"ruleId":"418","severity":1,"message":"419","line":181,"column":37,"nodeType":"420","endLine":181,"endColumn":137},{"ruleId":"397","severity":1,"message":"440","line":5,"column":16,"nodeType":"399","messageId":"400","endLine":5,"endColumn":25},{"ruleId":"405","severity":1,"message":"406","line":29,"column":15,"nodeType":"407","endLine":35,"endColumn":6},{"ruleId":"397","severity":1,"message":"441","line":30,"column":15,"nodeType":"399","messageId":"400","endLine":30,"endColumn":21},{"ruleId":"405","severity":1,"message":"442","line":35,"column":8,"nodeType":"409","endLine":35,"endColumn":10,"suggestions":"443"},{"ruleId":"418","severity":1,"message":"419","line":51,"column":49,"nodeType":"420","endLine":51,"endColumn":114},{"ruleId":"401","severity":1,"message":"402","line":50,"column":19,"nodeType":"403","messageId":"404","endLine":50,"endColumn":21},{"ruleId":"401","severity":1,"message":"402","line":82,"column":18,"nodeType":"403","messageId":"404","endLine":82,"endColumn":20},{"ruleId":"405","severity":1,"message":"406","line":98,"column":15,"nodeType":"407","endLine":110,"endColumn":6},{"ruleId":"405","severity":1,"message":"412","line":110,"column":8,"nodeType":"409","endLine":110,"endColumn":16,"suggestions":"444"},{"ruleId":"397","severity":1,"message":"445","line":1,"column":16,"nodeType":"399","messageId":"400","endLine":1,"endColumn":25},{"ruleId":"397","severity":1,"message":"446","line":1,"column":27,"nodeType":"399","messageId":"400","endLine":1,"endColumn":33},{"ruleId":"397","severity":1,"message":"447","line":2,"column":32,"nodeType":"399","messageId":"400","endLine":2,"endColumn":38},{"ruleId":"397","severity":1,"message":"448","line":4,"column":8,"nodeType":"399","messageId":"400","endLine":4,"endColumn":13},{"ruleId":"397","severity":1,"message":"449","line":5,"column":10,"nodeType":"399","messageId":"400","endLine":5,"endColumn":19},{"ruleId":"397","severity":1,"message":"450","line":6,"column":10,"nodeType":"399","messageId":"400","endLine":6,"endColumn":19},{"ruleId":"397","severity":1,"message":"451","line":62,"column":18,"nodeType":"399","messageId":"400","endLine":62,"endColumn":25},{"ruleId":"397","severity":1,"message":"452","line":64,"column":11,"nodeType":"399","messageId":"400","endLine":64,"endColumn":18},{"ruleId":"418","severity":1,"message":"419","line":73,"column":13,"nodeType":"420","endLine":73,"endColumn":50},{"ruleId":"397","severity":1,"message":"453","line":1,"column":37,"nodeType":"399","messageId":"400","endLine":1,"endColumn":46},{"ruleId":"397","severity":1,"message":"447","line":3,"column":33,"nodeType":"399","messageId":"400","endLine":3,"endColumn":39},{"ruleId":"397","severity":1,"message":"454","line":123,"column":9,"nodeType":"399","messageId":"400","endLine":123,"endColumn":19},{"ruleId":"455","severity":1,"message":"456","line":128,"column":39,"nodeType":"457","messageId":"458","endLine":128,"endColumn":40,"suggestions":"459"},{"ruleId":"455","severity":1,"message":"456","line":128,"column":72,"nodeType":"457","messageId":"458","endLine":128,"endColumn":73,"suggestions":"460"},{"ruleId":"401","severity":1,"message":"402","line":192,"column":25,"nodeType":"403","messageId":"404","endLine":192,"endColumn":27},{"ruleId":"418","severity":1,"message":"419","line":228,"column":21,"nodeType":"420","endLine":228,"endColumn":57},{"ruleId":"397","severity":1,"message":"461","line":6,"column":10,"nodeType":"399","messageId":"400","endLine":6,"endColumn":14},{"ruleId":"397","severity":1,"message":"447","line":2,"column":32,"nodeType":"399","messageId":"400","endLine":2,"endColumn":38},{"ruleId":"418","severity":1,"message":"419","line":56,"column":13,"nodeType":"420","endLine":56,"endColumn":50},{"ruleId":"397","severity":1,"message":"453","line":1,"column":27,"nodeType":"399","messageId":"400","endLine":1,"endColumn":36},{"ruleId":"397","severity":1,"message":"461","line":2,"column":10,"nodeType":"399","messageId":"400","endLine":2,"endColumn":14},{"ruleId":"397","severity":1,"message":"447","line":2,"column":33,"nodeType":"399","messageId":"400","endLine":2,"endColumn":39},{"ruleId":"397","severity":1,"message":"462","line":133,"column":11,"nodeType":"399","messageId":"400","endLine":133,"endColumn":19},{"ruleId":"397","severity":1,"message":"463","line":141,"column":12,"nodeType":"399","messageId":"400","endLine":141,"endColumn":21},{"ruleId":"397","severity":1,"message":"464","line":142,"column":12,"nodeType":"399","messageId":"400","endLine":142,"endColumn":21},{"ruleId":"405","severity":1,"message":"465","line":166,"column":7,"nodeType":"409","endLine":166,"endColumn":9,"suggestions":"466"},{"ruleId":"397","severity":1,"message":"467","line":188,"column":13,"nodeType":"399","messageId":"400","endLine":188,"endColumn":17},{"ruleId":"455","severity":1,"message":"456","line":190,"column":39,"nodeType":"457","messageId":"458","endLine":190,"endColumn":40,"suggestions":"468"},{"ruleId":"455","severity":1,"message":"456","line":190,"column":72,"nodeType":"457","messageId":"458","endLine":190,"endColumn":73,"suggestions":"469"},{"ruleId":"401","severity":1,"message":"402","line":298,"column":27,"nodeType":"403","messageId":"404","endLine":298,"endColumn":29},{"ruleId":"401","severity":1,"message":"402","line":308,"column":125,"nodeType":"403","messageId":"404","endLine":308,"endColumn":127},{"ruleId":"418","severity":1,"message":"419","line":334,"column":21,"nodeType":"420","endLine":334,"endColumn":57},{"ruleId":"397","severity":1,"message":"445","line":1,"column":28,"nodeType":"399","messageId":"400","endLine":1,"endColumn":37},{"ruleId":"397","severity":1,"message":"453","line":1,"column":39,"nodeType":"399","messageId":"400","endLine":1,"endColumn":48},{"ruleId":"397","severity":1,"message":"461","line":2,"column":10,"nodeType":"399","messageId":"400","endLine":2,"endColumn":14},{"ruleId":"397","severity":1,"message":"447","line":2,"column":32,"nodeType":"399","messageId":"400","endLine":2,"endColumn":38},{"ruleId":"401","severity":1,"message":"402","line":122,"column":25,"nodeType":"403","messageId":"404","endLine":122,"endColumn":27},{"ruleId":"405","severity":1,"message":"442","line":113,"column":7,"nodeType":"409","endLine":113,"endColumn":9,"suggestions":"470"},{"ruleId":"401","severity":1,"message":"402","line":155,"column":21,"nodeType":"403","messageId":"404","endLine":155,"endColumn":23},{"ruleId":"401","severity":1,"message":"402","line":235,"column":67,"nodeType":"403","messageId":"404","endLine":235,"endColumn":69},{"ruleId":"401","severity":1,"message":"402","line":258,"column":108,"nodeType":"403","messageId":"404","endLine":258,"endColumn":110},{"ruleId":"397","severity":1,"message":"471","line":3,"column":8,"nodeType":"399","messageId":"400","endLine":3,"endColumn":19},{"ruleId":"397","severity":1,"message":"445","line":1,"column":28,"nodeType":"399","messageId":"400","endLine":1,"endColumn":37},{"ruleId":"397","severity":1,"message":"453","line":1,"column":39,"nodeType":"399","messageId":"400","endLine":1,"endColumn":48},{"ruleId":"397","severity":1,"message":"461","line":2,"column":10,"nodeType":"399","messageId":"400","endLine":2,"endColumn":14},{"ruleId":"397","severity":1,"message":"447","line":2,"column":32,"nodeType":"399","messageId":"400","endLine":2,"endColumn":38},{"ruleId":"397","severity":1,"message":"467","line":125,"column":13,"nodeType":"399","messageId":"400","endLine":125,"endColumn":17},{"ruleId":"455","severity":1,"message":"456","line":127,"column":39,"nodeType":"457","messageId":"458","endLine":127,"endColumn":40,"suggestions":"472"},{"ruleId":"455","severity":1,"message":"456","line":127,"column":72,"nodeType":"457","messageId":"458","endLine":127,"endColumn":73,"suggestions":"473"},{"ruleId":"397","severity":1,"message":"453","line":1,"column":39,"nodeType":"399","messageId":"400","endLine":1,"endColumn":48},{"ruleId":"397","severity":1,"message":"471","line":3,"column":8,"nodeType":"399","messageId":"400","endLine":3,"endColumn":19},{"ruleId":"405","severity":1,"message":"442","line":70,"column":7,"nodeType":"409","endLine":70,"endColumn":9,"suggestions":"474"},{"ruleId":"401","severity":1,"message":"402","line":171,"column":67,"nodeType":"403","messageId":"404","endLine":171,"endColumn":69},{"ruleId":"397","severity":1,"message":"440","line":4,"column":16,"nodeType":"399","messageId":"400","endLine":4,"endColumn":25},{"ruleId":"397","severity":1,"message":"475","line":70,"column":10,"nodeType":"399","messageId":"400","endLine":70,"endColumn":19},{"ruleId":"397","severity":1,"message":"476","line":74,"column":10,"nodeType":"399","messageId":"400","endLine":74,"endColumn":15},{"ruleId":"397","severity":1,"message":"477","line":74,"column":17,"nodeType":"399","messageId":"400","endLine":74,"endColumn":25},{"ruleId":"405","severity":1,"message":"442","line":98,"column":7,"nodeType":"409","endLine":98,"endColumn":9,"suggestions":"478"},{"ruleId":"405","severity":1,"message":"406","line":101,"column":15,"nodeType":"407","endLine":105,"endColumn":6},{"ruleId":"405","severity":1,"message":"479","line":105,"column":8,"nodeType":"409","endLine":105,"endColumn":17,"suggestions":"480"},{"ruleId":"401","severity":1,"message":"402","line":161,"column":19,"nodeType":"403","messageId":"404","endLine":161,"endColumn":21},{"ruleId":"401","severity":1,"message":"402","line":163,"column":25,"nodeType":"403","messageId":"404","endLine":163,"endColumn":27},{"ruleId":"405","severity":1,"message":"406","line":58,"column":15,"nodeType":"407","endLine":68,"endColumn":6},{"ruleId":"397","severity":1,"message":"481","line":2,"column":17,"nodeType":"399","messageId":"400","endLine":2,"endColumn":25},{"ruleId":"397","severity":1,"message":"462","line":26,"column":11,"nodeType":"399","messageId":"400","endLine":26,"endColumn":19},{"ruleId":"455","severity":1,"message":"456","line":43,"column":41,"nodeType":"457","messageId":"458","endLine":43,"endColumn":42,"suggestions":"482"},{"ruleId":"455","severity":1,"message":"456","line":43,"column":74,"nodeType":"457","messageId":"458","endLine":43,"endColumn":75,"suggestions":"483"},{"ruleId":"418","severity":1,"message":"419","line":102,"column":49,"nodeType":"420","endLine":102,"endColumn":107},{"ruleId":"397","severity":1,"message":"445","line":1,"column":16,"nodeType":"399","messageId":"400","endLine":1,"endColumn":25},{"ruleId":"397","severity":1,"message":"446","line":1,"column":27,"nodeType":"399","messageId":"400","endLine":1,"endColumn":33},{"ruleId":"397","severity":1,"message":"481","line":1,"column":35,"nodeType":"399","messageId":"400","endLine":1,"endColumn":43},{"ruleId":"397","severity":1,"message":"484","line":5,"column":8,"nodeType":"399","messageId":"400","endLine":5,"endColumn":12},{"ruleId":"397","severity":1,"message":"461","line":7,"column":10,"nodeType":"399","messageId":"400","endLine":7,"endColumn":14},{"ruleId":"397","severity":1,"message":"448","line":8,"column":8,"nodeType":"399","messageId":"400","endLine":8,"endColumn":13},{"ruleId":"418","severity":1,"message":"419","line":41,"column":17,"nodeType":"420","endLine":41,"endColumn":69},{"ruleId":"418","severity":1,"message":"419","line":44,"column":17,"nodeType":"420","endLine":44,"endColumn":86},{"ruleId":"397","severity":1,"message":"481","line":1,"column":17,"nodeType":"399","messageId":"400","endLine":1,"endColumn":25},{"ruleId":"397","severity":1,"message":"445","line":1,"column":27,"nodeType":"399","messageId":"400","endLine":1,"endColumn":36},{"ruleId":"397","severity":1,"message":"485","line":3,"column":16,"nodeType":"399","messageId":"400","endLine":3,"endColumn":27},{"ruleId":"418","severity":1,"message":"419","line":48,"column":35,"nodeType":"420","endLine":48,"endColumn":71},{"ruleId":"397","severity":1,"message":"445","line":1,"column":16,"nodeType":"399","messageId":"400","endLine":1,"endColumn":25},{"ruleId":"397","severity":1,"message":"446","line":1,"column":27,"nodeType":"399","messageId":"400","endLine":1,"endColumn":33},{"ruleId":"397","severity":1,"message":"481","line":1,"column":35,"nodeType":"399","messageId":"400","endLine":1,"endColumn":43},{"ruleId":"397","severity":1,"message":"486","line":1,"column":10,"nodeType":"487","messageId":"400","endLine":1,"endColumn":15},{"ruleId":"405","severity":1,"message":"488","line":52,"column":8,"nodeType":"409","endLine":52,"endColumn":20,"suggestions":"489"},{"ruleId":"397","severity":1,"message":"440","line":3,"column":16,"nodeType":"399","messageId":"400","endLine":3,"endColumn":25},{"ruleId":"405","severity":1,"message":"406","line":142,"column":15,"nodeType":"407","endLine":155,"endColumn":6},{"ruleId":"405","severity":1,"message":"490","line":155,"column":8,"nodeType":"409","endLine":155,"endColumn":10,"suggestions":"491"},{"ruleId":"401","severity":1,"message":"402","line":176,"column":20,"nodeType":"403","messageId":"404","endLine":176,"endColumn":22},{"ruleId":"401","severity":1,"message":"402","line":178,"column":26,"nodeType":"403","messageId":"404","endLine":178,"endColumn":28},{"ruleId":"405","severity":1,"message":"406","line":184,"column":15,"nodeType":"407","endLine":187,"endColumn":6},{"ruleId":"405","severity":1,"message":"429","line":187,"column":8,"nodeType":"409","endLine":187,"endColumn":15,"suggestions":"492"},{"ruleId":"401","severity":1,"message":"402","line":215,"column":18,"nodeType":"403","messageId":"404","endLine":215,"endColumn":20},{"ruleId":"401","severity":1,"message":"402","line":217,"column":24,"nodeType":"403","messageId":"404","endLine":217,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":228,"column":21,"nodeType":"403","messageId":"404","endLine":228,"endColumn":23},{"ruleId":"401","severity":1,"message":"402","line":230,"column":27,"nodeType":"403","messageId":"404","endLine":230,"endColumn":29},{"ruleId":"418","severity":1,"message":"419","line":302,"column":80,"nodeType":"420","endLine":302,"endColumn":111},{"ruleId":"418","severity":1,"message":"419","line":475,"column":37,"nodeType":"420","endLine":475,"endColumn":162},{"ruleId":"418","severity":1,"message":"419","line":484,"column":164,"nodeType":"420","endLine":484,"endColumn":221},{"ruleId":"418","severity":1,"message":"419","line":485,"column":164,"nodeType":"420","endLine":485,"endColumn":222},{"ruleId":"418","severity":1,"message":"419","line":492,"column":33,"nodeType":"420","endLine":492,"endColumn":85},{"ruleId":"418","severity":1,"message":"419","line":504,"column":33,"nodeType":"420","endLine":504,"endColumn":81},{"ruleId":"418","severity":1,"message":"419","line":516,"column":33,"nodeType":"420","endLine":516,"endColumn":85},{"ruleId":"493","severity":1,"message":"494","line":534,"column":28,"nodeType":"495","messageId":"496","endLine":534,"endColumn":40},{"ruleId":"497","severity":1,"message":"498","line":565,"column":5,"nodeType":"499","messageId":"500","endLine":565,"endColumn":90},{"ruleId":"397","severity":1,"message":"486","line":1,"column":11,"nodeType":"487","messageId":"400","endLine":1,"endColumn":16},{"ruleId":"405","severity":1,"message":"501","line":109,"column":8,"nodeType":"409","endLine":109,"endColumn":20,"suggestions":"502"},{"ruleId":"397","severity":1,"message":"446","line":1,"column":27,"nodeType":"399","messageId":"400","endLine":1,"endColumn":33},{"ruleId":"397","severity":1,"message":"481","line":1,"column":35,"nodeType":"399","messageId":"400","endLine":1,"endColumn":43},{"ruleId":"397","severity":1,"message":"461","line":3,"column":9,"nodeType":"399","messageId":"400","endLine":3,"endColumn":13},{"ruleId":"397","severity":1,"message":"503","line":34,"column":11,"nodeType":"399","messageId":"400","endLine":34,"endColumn":17},{"ruleId":"397","severity":1,"message":"441","line":54,"column":11,"nodeType":"399","messageId":"400","endLine":54,"endColumn":17},{"ruleId":"405","severity":1,"message":"504","line":79,"column":7,"nodeType":"409","endLine":79,"endColumn":9,"suggestions":"505"},{"ruleId":"401","severity":1,"message":"402","line":89,"column":17,"nodeType":"403","messageId":"404","endLine":89,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":91,"column":23,"nodeType":"403","messageId":"404","endLine":91,"endColumn":25},{"ruleId":"506","severity":1,"message":"507","line":104,"column":25,"nodeType":"420","endLine":107,"endColumn":28},{"ruleId":"401","severity":1,"message":"402","line":113,"column":98,"nodeType":"403","messageId":"404","endLine":113,"endColumn":100},{"ruleId":"397","severity":1,"message":"461","line":3,"column":9,"nodeType":"399","messageId":"400","endLine":3,"endColumn":13},{"ruleId":"397","severity":1,"message":"508","line":4,"column":8,"nodeType":"399","messageId":"400","endLine":4,"endColumn":19},{"ruleId":"397","severity":1,"message":"509","line":47,"column":12,"nodeType":"399","messageId":"400","endLine":47,"endColumn":21},{"ruleId":"397","severity":1,"message":"510","line":49,"column":12,"nodeType":"399","messageId":"400","endLine":49,"endColumn":19},{"ruleId":"397","severity":1,"message":"511","line":49,"column":21,"nodeType":"399","messageId":"400","endLine":49,"endColumn":31},{"ruleId":"401","severity":1,"message":"402","line":62,"column":28,"nodeType":"403","messageId":"404","endLine":62,"endColumn":30},{"ruleId":"405","severity":1,"message":"512","line":85,"column":8,"nodeType":"409","endLine":85,"endColumn":17,"suggestions":"513"},{"ruleId":"401","severity":1,"message":"402","line":104,"column":19,"nodeType":"403","messageId":"404","endLine":104,"endColumn":21},{"ruleId":"405","severity":1,"message":"406","line":209,"column":15,"nodeType":"407","endLine":226,"endColumn":6},{"ruleId":"405","severity":1,"message":"514","line":226,"column":8,"nodeType":"409","endLine":226,"endColumn":10,"suggestions":"515"},{"ruleId":"405","severity":1,"message":"406","line":230,"column":15,"nodeType":"407","endLine":234,"endColumn":6},{"ruleId":"405","severity":1,"message":"516","line":234,"column":8,"nodeType":"409","endLine":234,"endColumn":19,"suggestions":"517"},{"ruleId":"401","severity":1,"message":"402","line":479,"column":75,"nodeType":"403","messageId":"404","endLine":479,"endColumn":77},{"ruleId":"401","severity":1,"message":"402","line":516,"column":75,"nodeType":"403","messageId":"404","endLine":516,"endColumn":77},{"ruleId":"401","severity":1,"message":"402","line":552,"column":75,"nodeType":"403","messageId":"404","endLine":552,"endColumn":77},{"ruleId":"493","severity":1,"message":"494","line":603,"column":28,"nodeType":"495","messageId":"496","endLine":603,"endColumn":40},{"ruleId":"497","severity":1,"message":"498","line":631,"column":5,"nodeType":"499","messageId":"500","endLine":631,"endColumn":90},{"ruleId":"397","severity":1,"message":"446","line":1,"column":27,"nodeType":"399","messageId":"400","endLine":1,"endColumn":33},{"ruleId":"405","severity":1,"message":"406","line":7,"column":15,"nodeType":"407","endLine":11,"endColumn":6},{"ruleId":"405","severity":1,"message":"518","line":11,"column":8,"nodeType":"409","endLine":11,"endColumn":16,"suggestions":"519"},{"ruleId":"401","severity":1,"message":"402","line":16,"column":22,"nodeType":"403","messageId":"404","endLine":16,"endColumn":24},"no-native-reassign",["520"],"no-negated-in-lhs",["521"],"no-unused-vars","'Helmet' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'pageNum' and 'search'. Either include them or remove the dependency array.","ArrayExpression",["522"],["523"],"React Hook useEffect has missing dependencies: 'dateEnd', 'dateStart', 'pageNum', and 'search'. Either include them or remove the dependency array.",["524"],"React Hook useEffect has missing dependencies: 'detailImg' and 'id.idx'. Either include them or remove the dependency array.",["525"],"React Hook useEffect has a missing dependency: 'detail.postImg'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setScrollImg' needs the current value of 'detail.postImg'.",["526"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'id.idx'. Either include it or remove the dependency array.",["527"],"React Hook useEffect has missing dependencies: 'id.idx', 'pageNum', and 'search'. Either include them or remove the dependency array.",["528"],"React Hook useEffect has missing dependencies: 'detailId' and 'detailImg'. Either include them or remove the dependency array.",["529"],["530"],"'qs' is defined but never used.","React Hook useEffect has a missing dependency: 'idx.idx'. Either include it or remove the dependency array.",["531"],"'searchInput' is assigned a value but never used.","'Search' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id.idx' and 'search'. Either include them or remove the dependency array.",["532"],"React Hook useEffect has a missing dependency: 'popupId'. Either include it or remove the dependency array.",["533"],["534"],"React Hook useEffect has a missing dependency: 'detailId'. Either include it or remove the dependency array.",["535"],"'useParams' is defined but never used.","'cookie' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'param'. Either include it or remove the dependency array.",["536"],["537"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","'Router' is defined but never used.","'axios' is defined but never used.","'matchPath' is defined but never used.","'UseParams' is defined but never used.","'setData' is assigned a value but never used.","'usedata' is assigned a value but never used.","'Component' is defined but never used.","'alltruecnt' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["538","539"],["540","541"],"'Link' is defined but never used.","'inputRef' is assigned a value but never used.","'checkbox1' is assigned a value but never used.","'checkbox2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'random'. Either include it or remove the dependency array.",["542"],"'text' is assigned a value but never used.",["543","544"],["545","546"],["547"],"'MainProfile' is defined but never used.",["548","549"],["550","551"],["552"],"'defendant' is assigned a value but never used.","'popup' is assigned a value but never used.","'setPopup' is assigned a value but never used.",["553"],"React Hook useEffect has missing dependencies: 'friendsList' and 'param'. Either include them or remove the dependency array.",["554"],"'useState' is defined but never used.",["555","556"],["557","558"],"'Talk' is defined but never used.","'useLocation' is defined but never used.","'kakao' is defined but never used.","Program","React Hook useEffect has missing dependencies: 'kakao.maps.ControlPosition.TOPRIGHT', 'kakao.maps.LatLng', 'kakao.maps.Map', 'kakao.maps.Marker', and 'kakao.maps.ZoomControl'. Either include them or remove the dependency array.",["559"],"React Hook useEffect has missing dependencies: 'friendFor' and 'idx.idx'. Either include them or remove the dependency array.",["560"],["561"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has missing dependencies: 'kakao.maps.ControlPosition.TOPRIGHT', 'kakao.maps.LatLng', 'kakao.maps.Map', 'kakao.maps.Marker', 'kakao.maps.MarkerImage', 'kakao.maps.Size', 'kakao.maps.ZoomControl', and 'kakao.maps.event'. Either include them or remove the dependency array.",["562"],"'minute' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'idx'. Either include it or remove the dependency array.",["563"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'queryString' is defined but never used.","'memberIdx' is assigned a value but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loginIdx'. Either include it or remove the dependency array.",["564"],"React Hook useEffect has missing dependencies: 'detailImg' and 'idx'. Either include them or remove the dependency array.",["565"],"React Hook useEffect has a missing dependency: 'postImgArr'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setScrollImg' needs the current value of 'postImgArr'.",["566"],"React Hook useEffect has missing dependencies: 'memberIdx' and 'replyIdx'. Either include them or remove the dependency array.",["567"],"no-global-assign","no-unsafe-negation",{"desc":"568","fix":"569"},{"desc":"568","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"575","fix":"583"},{"desc":"584","fix":"585"},{"desc":"586","fix":"587"},{"desc":"588","fix":"589"},{"desc":"579","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"571","fix":"595"},{"messageId":"596","fix":"597","desc":"598"},{"messageId":"599","fix":"600","desc":"601"},{"messageId":"596","fix":"602","desc":"598"},{"messageId":"599","fix":"603","desc":"601"},{"desc":"604","fix":"605"},{"messageId":"596","fix":"606","desc":"598"},{"messageId":"599","fix":"607","desc":"601"},{"messageId":"596","fix":"608","desc":"598"},{"messageId":"599","fix":"609","desc":"601"},{"desc":"593","fix":"610"},{"messageId":"596","fix":"611","desc":"598"},{"messageId":"599","fix":"612","desc":"601"},{"messageId":"596","fix":"613","desc":"598"},{"messageId":"599","fix":"614","desc":"601"},{"desc":"593","fix":"615"},{"desc":"593","fix":"616"},{"desc":"617","fix":"618"},{"messageId":"596","fix":"619","desc":"598"},{"messageId":"599","fix":"620","desc":"601"},{"messageId":"596","fix":"621","desc":"598"},{"messageId":"599","fix":"622","desc":"601"},{"desc":"623","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},"Update the dependencies array to be: [change, pageNum, search]",{"range":"641","text":"642"},{"range":"643","text":"642"},"Update the dependencies array to be: [change, dateEnd, dateStart, pageNum, search]",{"range":"644","text":"645"},"Update the dependencies array to be: [detailImg, id.idx]",{"range":"646","text":"647"},"Update the dependencies array to be: [detail.postImg, detailImg]",{"range":"648","text":"649"},"Update the dependencies array to be: [id.idx]",{"range":"650","text":"651"},"Update the dependencies array to be: [change, id.idx, pageNum, search]",{"range":"652","text":"653"},"Update the dependencies array to be: [detailId, detailImg, modalOn]",{"range":"654","text":"655"},{"range":"656","text":"649"},"Update the dependencies array to be: [idx.idx]",{"range":"657","text":"658"},"Update the dependencies array to be: [change, id.idx, search]",{"range":"659","text":"660"},"Update the dependencies array to be: [modalOn, popupId]",{"range":"661","text":"662"},{"range":"663","text":"653"},"Update the dependencies array to be: [chatOn, detailId]",{"range":"664","text":"665"},"Update the dependencies array to be: [param]",{"range":"666","text":"667"},{"range":"668","text":"645"},"removeEscape",{"range":"669","text":"670"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"671","text":"672"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"673","text":"670"},{"range":"674","text":"672"},"Update the dependencies array to be: [random]",{"range":"675","text":"676"},{"range":"677","text":"670"},{"range":"678","text":"672"},{"range":"679","text":"670"},{"range":"680","text":"672"},{"range":"681","text":"667"},{"range":"682","text":"670"},{"range":"683","text":"672"},{"range":"684","text":"670"},{"range":"685","text":"672"},{"range":"686","text":"667"},{"range":"687","text":"667"},"Update the dependencies array to be: [friendsList, modalOn, param]",{"range":"688","text":"689"},{"range":"690","text":"670"},{"range":"691","text":"672"},{"range":"692","text":"670"},{"range":"693","text":"672"},"Update the dependencies array to be: [kakao.maps.ControlPosition.TOPRIGHT, kakao.maps.LatLng, kakao.maps.Map, kakao.maps.Marker, kakao.maps.ZoomControl, myPosition]",{"range":"694","text":"695"},"Update the dependencies array to be: [friendFor, idx.idx]",{"range":"696","text":"697"},"Update the dependencies array to be: [addOn, idx.idx]",{"range":"698","text":"699"},"Update the dependencies array to be: [kakao.maps.ControlPosition.TOPRIGHT, kakao.maps.LatLng, kakao.maps.Map, kakao.maps.Marker, kakao.maps.MarkerImage, kakao.maps.Size, kakao.maps.ZoomControl, kakao.maps.event, myPosition]",{"range":"700","text":"701"},"Update the dependencies array to be: [idx]",{"range":"702","text":"703"},"Update the dependencies array to be: [current, loginIdx]",{"range":"704","text":"705"},"Update the dependencies array to be: [detailImg, idx]",{"range":"706","text":"707"},"Update the dependencies array to be: [detailImg, postImgArr]",{"range":"708","text":"709"},"Update the dependencies array to be: [isLike, memberIdx, replyIdx]",{"range":"710","text":"711"},[4666,4674],"[change, pageNum, search]",[6112,6120],[4928,4936],"[change, dateEnd, dateStart, pageNum, search]",[2973,2975],"[detailImg, id.idx]",[3120,3131],"[detail.postImg, detailImg]",[1936,1938],"[id.idx]",[5897,5905],"[change, id.idx, pageNum, search]",[6273,6282],"[detailId, detailImg, modalOn]",[6427,6438],[2677,2679],"[idx.idx]",[5042,5050],"[change, id.idx, search]",[5244,5253],"[modalOn, popupId]",[7244,7252],[7490,7498],"[chatOn, detailId]",[1256,1258],"[param]",[4915,4923],[2703,2704],"",[2703,2703],"\\",[2736,2737],[2736,2736],[5045,5047],"[random]",[5638,5639],[5638,5638],[5671,5672],[5671,5671],[5387,5389],[3208,3209],[3208,3208],[3241,3242],[3241,3241],[3408,3410],[5489,5491],[5712,5721],"[friendsList, modalOn, param]",[1895,1896],[1895,1895],[1928,1929],[1928,1928],[1698,1710],"[kakao.maps.ControlPosition.TOPRIGHT, kakao.maps.LatLng, kakao.maps.Map, kakao.maps.Marker, kakao.maps.ZoomControl, myPosition]",[10319,10321],"[friendFor, idx.idx]",[11314,11321],"[addOn, idx.idx]",[3765,3777],"[kakao.maps.ControlPosition.TOPRIGHT, kakao.maps.LatLng, kakao.maps.Map, kakao.maps.Marker, kakao.maps.MarkerImage, kakao.maps.Size, kakao.maps.ZoomControl, kakao.maps.event, myPosition]",[3100,3102],"[idx]",[4161,4170],"[current, loginIdx]",[11429,11431],"[detailImg, idx]",[11705,11716],"[detailImg, postImgArr]",[428,436],"[isLike, memberIdx, replyIdx]"]